diff --git a/BRANDS b/BRANDS
index b222492..4e73002 100644
--- a/BRANDS
+++ b/BRANDS
@@ -7,6 +7,4 @@ Lumintop	0300 - 0399
 Fireflies	0400 - 0499
 Mateminco	0500 - 0599
 Sofirn		0600 - 0699
-Wurkkos     0700 - 0799
 gChart		1600 - 1699
-loneoceans  4200 - 4299
\ No newline at end of file
diff --git a/Debug/anduril2-lume1-ff-6af-no-fet-2022-12-27.hex b/Debug/anduril2-lume1-ff-6af-no-fet-2022-12-27.hex
deleted file mode 100644
index 153954d..0000000
--- a/Debug/anduril2-lume1-ff-6af-no-fet-2022-12-27.hex
+++ /dev/null
@@ -1,819 +0,0 @@
-:100000000C9428010C9445010C9445010C94450175
-:100010000C9445010C9475050C9445010C945A05FB
-:100020000C9445010C9445010C9445010C94450138
-:100030000C9445010C9445010C9445010C94450128
-:100040000C9445010C9445010C9445010C94450118
-:100050000C9466030C9445010C9445010C944501E5
-:100060000C9445010C9445010C9445010C944501F8
-:100070000C9445010C9445010C9445013230323208
-:100080003132323730343831000105041410111583
-:10009000101010101010101211111412141410104E
-:1000A000121010101214141010101010121014103E
-:1000B000111111121414141412121212121212101D
-:1000C0001010101014101210101010121010141420
-:1000D000141010141010101010121410141010140A
-:1000E00012121212121212121212121212121212F0
-:1000F00012121212121212121212121212121212E0
-:1001000012121212121212121212121212121212CF
-:1001100012121212121212121212121212121212BF
-:100120001212121212120000000000000000000063
-:1001300000000000000000000000000000000000BF
-:1001400000000000000000000000000000000000AF
-:10015000000000000000000000000000000000009F
-:10016000000000000000000000000000000000008F
-:10017000000000000000000000000000000000007F
-:10018000000000000000000000000000000000006F
-:10019000000000000000000000000000000000005F
-:1001A000000000000000000000000000000000004F
-:1001B0000000000000000000000000010207112301
-:1001C000416F2787C6CEAA03040E12051C22290BF5
-:1001D000161A536171839726C552FD8EA0B358A39A
-:1001E000B5C8DD92A0B0C0D2E5F90D0E0F1112070F
-:1001F0001505181A1C1E0722240E0F102E31133756
-:100200003A3E4145101C501F595E241718191A1CFC
-:100210001D1E202123242627292B2D2E3032343752
-:10022000393B3D404245474A4C4F5255585B5E6210
-:1002300065686C7073777B7F83878B9094999EA29F
-:10024000A7ACB1B7BCC2C7CDD3D9DFE5EBF2F8FF9D
-:1002500011241FBECFEFCDBFDFE3DEBF18E3A0E068
-:10026000B8E3EFEDF2E302C005900D92A432B107BE
-:10027000D9F728E3A4E2B8E301C01D92AF3CB2076E
-:10028000E1F70E9409170C9459190C940000CF93C0
-:10029000DF93CDB7DEB72697CDBFDEBF90911C3878
-:1002A00020917A3830917B382D593B4009F492E007
-:1002B000843019F460934C3821C06623F9F0823001
-:1002C00019F426E9261B622F26E0E6EBF2EBDE01AD
-:1002D000119601900D922A95E1F7E82FF0E0319701
-:1002E000EE0FFF1F21E030E02C0F3D1FE20FF31F48
-:1002F0000190F081E02DE90FF11D60832696CDBFBE
-:10030000DEBFDF91CF910895813019F410924E38FD
-:100310000895823019F460934D380895833019F4AC
-:1003200060934B380895843011F460931B3808951E
-:1003300081E008956111609321380895662389F062
-:10034000813061F480917D3890915738891B681B0A
-:100350006093573882E08093223803C0635E6093D5
-:10036000203880912038873418F086E48093203834
-:100370000895609345380895FF920F931F93CF938C
-:10038000DF93EC018B01F22E20917A3830917B388B
-:10039000232B31F0E0917A38F0917B38842F099546
-:1003A000C0937A38D0937B38CD2B39F0E0917A38EE
-:1003B000F0917B38B8018F2D099581E080935038FA
-:1003C000DF91CF911F910F91FF900895DC019091E3
-:1003D0005638983098F4E92FF0E0EE0FFF1FE15403
-:1003E000F74CA083B1839F5F9093563828E049E093
-:1003F000CD010E94BC018091563808958FEF089579
-:10040000CF93DF93E0915638EE2359F0E150E0931B
-:100410005638F0E0EE0FFF1FE154F74CC081D18158
-:1004200002C0C0E0D0E0E0915638EE2349F0F0E0A1
-:100430003197EE0FFF1FE154F74C8081918102C08C
-:1004400080E090E02AE049E060E070E00E94BC01BA
-:10045000CE01DF91CF9108950F931F93CF93DF9338
-:10046000EC018B010E940002B801CE010E94E6015E
-:10047000DF91CF911F910F910895CF93C0911D38B7
-:10048000C1111BC0813C39F460E070E080E99CE060
-:100490000E942C0215C0823C39F460E070E083E6D3
-:1004A00092E00E942C020CC0873B49F460E070E0AF
-:1004B00089EA9BE00E94E60103C0C1E001C0C1E0FF
-:1004C0008C2FCF910895813C41F460E070E080E989
-:1004D0009CE00E942C0280E00895823C41F460E0A0
-:1004E00070E08EE09EE00E942C0280E00895873B41
-:1004F00041F460E070E08FEA9BE00E94E60180E05A
-:10050000089581E00895813C41F460E070E080E965
-:100510009CE00E942C0280E00895823C41F460E05F
-:1005200070E089E59EE00E942C0280E0089581E061
-:1005300008958093813890938238609383387093C4
-:100540008438089590E001C09F5F903168F4292FAE
-:1005500030E0F901EE0FFF1F2E0F3F1FF901EB579F
-:10056000F74C20812111F0CF903160F4292F30E039
-:10057000F901EE0FFF1FE20FF31FEB57F74C8083DB
-:1005800061837283089520E01CC0822F90E0DC011B
-:100590001196AD01440F551FA40FB51FAB57B74CB3
-:1005A0003C91FC01EE0FFF1F8E0F9F1FFC01EB57CC
-:1005B000F74C308311968D919C9112978183928391
-:1005C0002F5F2F3010F3822F90E0FC01EE0FFF1F02
-:1005D000E80FF91FEB57F74C108211821282089531
-:1005E0000F931F93CF93DF93D82F8B01C091563871
-:1005F000C1500EC0EC2FEE0FFF0BE154F74C0190F1
-:10060000F081E02DB8018D2F0995882329F0C15084
-:10061000CC2384F781E001C080E0DF91CF911F916E
-:100620000F91089508C060918638709187380E94B4
-:10063000F0020E94C302809185388111F4CF0895A1
-:100640000E94A2020895BC018091BA380E94200342
-:1006500008951092BA3810925D3810925E3881E099
-:100660008093503808959091BA3890689093BA3832
-:10067000803171F490619093BA38292F2F7030E057
-:100680002F30310594F49F5F9093BA3881E008953C
-:1006900081110DC0892F8F7E8093BA3895FF09C0D4
-:1006A00080648093BA3881E0089581E0089580E005
-:1006B000089581E0089505C08EED96E20197F1F767
-:1006C000822F2FEF280F8111F7CF08951F920F92DD
-:1006D0000FB60F9211242F933F934F935F936F9315
-:1006E0007F938F939F93AF93BF93EF93FF9381E09B
-:1006F00080930B0680915B38882309F451C0E09108
-:100700005A38E13039F5A0E0B1E191968C9191979A
-:100710009096AC912091100630911106281B31095A
-:1007200087FD3395B0E00E942319DC01CB0180588E
-:100730009F4FAF4FBF4F892F9A2FAB2FBB27BC01C5
-:100740000024769567950794769567950794762F9C
-:10075000602D0DC0609110067091110600247695F1
-:1007600067950794769567950794762F602DF0E04E
-:10077000EE0FFF1FDF01A554B74C6D937C93EA5435
-:10078000F74C808191818617970708F401966817C6
-:10079000790708F401978083918381E080935C3826
-:1007A00081E080935B38FF91EF91BF91AF919F9172
-:1007B0008F917F916F915F914F913F912F910F900A
-:1007C0000FBE0F901F901895CF93DF9310925C3857
-:1007D0009091100680915138890F80935138809103
-:1007E0005938882309F458C11092593880915A38E1
-:1007F00090915338992339F0E0E0F6E090819E7FA4
-:10080000908310925A38811152C0809122388823E7
-:1008100049F06091BB387091BC386093B6387093E2
-:10082000B73804C06091B6387091B738605F7F4FB9
-:100830000024660F771F001C660F771F001C672FB0
-:10084000702D80E098E50E94FB1880912138680F98
-:10085000711D67507109769567956093583880913E
-:100860004238882321F08150809342380AC06D318C
-:1008700040F460E070E084E00E94200385E0809313
-:100880004238809153388111FEC0E0E0F6E08EE1FD
-:10089000868385E4828381E080935A3810925B38A6
-:1008A000828581608287808581608087ECC081300D
-:1008B00009F0E9C080912238882301F14091BD38C8
-:1008C0005091BE384093B8385093B93880E014C086
-:1008D000E82FF0E09A01205F3F4F3695279532953B
-:1008E00022952F7023273F702327EE0FFF1FEE5C0A
-:1008F000F74C208331838F5F883050F38091B83874
-:100900009091B938409696958795929582958F707B
-:1009100089279F7089279C0136952795C091573864
-:100920000C2E000CDD0B2C0F3D1F23513140F90123
-:1009300020937D3830937E3840913138A42FB0E039
-:10094000AA0FBB1FAE5CB74C2D913C911197BC0117
-:10095000621B730B9B018D939C934F5F4770409379
-:100960003138220F331F220F331F820F931F409104
-:10097000203850E09A012D5E3E4F2C1B3D0B220F7C
-:10098000331F821B930B20E009C01816190614F4BC
-:10099000019703C099230CF401962F5F2330A8F32D
-:1009A00018161906ACF577239CF1209130381216F1
-:1009B00024F4281B2093303856C0880F991F0397C2
-:1009C000BC01002476956795079476956795079402
-:1009D000762F602D91FF02C061587F4F660F672F01
-:1009E000661F770B1616170614F061E070E080E1C1
-:1009F000861B80933038495F5F4FE417F50724F476
-:100A000080915238853979F185E00E9420032BC00E
-:100A10009C012C5F3F4FF2F47723E4F420913038AF
-:100A2000222334F4281B822F8450809330381BC03B
-:100A30002CEE281B209330386CEF7FEF681B790B6E
-:100A400075956795809158388F3168F086E00E94DF
-:100A5000200309C0809158388E3128F060E070E0A2
-:100A600087E00E942003E0E0F6E08DE1868385E5E3
-:100A7000828310925A3810925B3882858160828717
-:100A800080858160808780912238882329F0809139
-:100A90002238815080932238DF91CF91089581E0F0
-:100AA00080935201809151018111FCCF81E48093A8
-:100AB000500108951F920F920FB60F9211248F9339
-:100AC00081E080935301809355388F910F900FBE32
-:100AD0000F901F9018958AB186958695869591E01E
-:100AE000892781708093803808951F920F920FB6E6
-:100AF0000F9211248F938BB188608BB981E0809322
-:100B000054388F910F900FBE0F901F9018958093BF
-:100B10008038882341F080E10E94330380E090E038
-:100B20000E94230309C080E00E94330380915D3856
-:100B300090915E380E94230310925D3810925E38C7
-:100B40000895CF93DF931092553880915D3890913E
-:100B50005E389C012F5F3F4F88279078822B932B24
-:100B600080935D3890935E38C09180380E946B0509
-:100B7000C81721F0109253380E948705C0915D3844
-:100B8000D0915E3880915338882341F1BE0183E0D3
-:100B90000E9420030E941203CF73DD27CD2B09F0A2
-:100BA00069C010922F38E0E0F6E08DE1868385E59C
-:100BB000828310925A3810925B38828581608287D6
-:100BC000808581608087A0EAB0E08C9180618C9301
-:100BD00083E0808380858160808739C08091BA38C6
-:100BE000807F803B31F460E070E081E00E94200370
-:100BF00004C0BE0181E00E9420038091BA3884FFC6
-:100C000014C085FF04C0CE010E94230320C0689752
-:100C1000F0F010925D3810925E3880628093BA389E
-:100C200080E090E00E94230312C0882381F085FFBA
-:100C300003C00E9429030BC0629748F08064809330
-:100C4000BA3880E090E00E9423030E94290380913B
-:100C50002F3881110BC0E0E0F6E092859160928719
-:100C600090859160908791E0909359388F5F8F7154
-:100C700080932F38DF91CF91089581E080935201C6
-:100C8000809151018111FCCF89E580935001E0E012
-:100C9000F6E080818E7F80830E946B058111FCCFFE
-:100CA0000E942903E0E4F4E083898160838B109241
-:100CB0005C38109255381092543822C0E0E5F0E0CC
-:100CC0008081897F84608083808181608083889532
-:100CD00080818E7F808380915438811110925338A7
-:100CE00080915C38882339F081E0809322388093AA
-:100CF00059380E94E4038091553881110E94A10562
-:100D0000809153388111DACF82E080932238E0E479
-:100D1000F4E08389887F838BE0E0F6E08DE18683D1
-:100D200085E5828310925A3810925B388285816003
-:100D30008287808581608087A0EAB0E08C918061A5
-:100D40008C9383E080838085816080870E944F053B
-:100D50000895E0E5F0E08081897F80838081816073
-:100D60008083889580818E7F808308958F5F803314
-:100D7000A8F080911F388330F1F1E4E0F4E0808145
-:100D800080688083E4E2F4E08081806280838081F7
-:100D90008061808383E080931F3808958D30A8F0B0
-:100DA00080911F38823039F1E4E0F4E0808180687E
-:100DB0008083E4E2F4E080818062808380818F7EA2
-:100DC000808382E080931F3808958823A1F080916A
-:100DD0001F38813081F0E4E0F4E080818068808316
-:100DE000E4E2F4E080818F7D808380818F7E808348
-:100DF00081E080931F380895E0910638F09107381C
-:100E00003196FB70F460E0930638F09307388091D8
-:100E100051388B5A80935138E491809151388E0F1C
-:100E200008951F93CF93DF9382E00E945B03F894B1
-:100E300080E490E00E943219853A79F0789480E05D
-:100E400011C0C12FD0E0CE018F5B9F4F0E9432199D
-:100E5000C15AD74C88831F5F01C010E01B3188F353
-:100E6000789481E0DF91CF911F910895CF9382E034
-:100E70000E945B03F894C0E00BC08C2F90E0FC0153
-:100E8000E15AF74C60818F5B9F4F0E943A19CF5F08
-:100E9000CB3198F365EA80E490E00E943A197894A7
-:100EA000CF910895CF93DF9300D01F92CDB7DEB7D7
-:100EB00019821A8291E09B8390E0A7C0492F50E0ED
-:100EC000BA01660F771F282F30E002C035952795AD
-:100ED0006A95E2F72370E1E0F0E0EC0FFD1FE40F0C
-:100EE000F51F3081222319F0213069F163C091117F
-:100EF0000CC041E050E0032E02C0440F551F0A947D
-:100F0000E2F7E0E4F4E041834683913061F441E0AC
-:100F100050E0032E02C0440F551F0A94E2F7E0E2AE
-:100F2000F4E041834683923009F06EC041E050E026
-:100F3000BA0102C0660F771F3A95E2F7E0E2F4E0EB
-:100F40006183668361C0911110C0E32FF0E041E03E
-:100F500050E0032E02C0440F551F0A94E2F740935D
-:100F60004204E05BFB4F28E02083913081F4E32FC3
-:100F7000F0E041E050E0032E02C0440F551F0A94F8
-:100F8000E2F740932204E05DFB4F28E0208392309B
-:100F9000D9F5E32FF0E041E050E0BA0102C0660F5E
-:100FA000771F3A95E2F760932204E05DFB4F28E05B
-:100FB00020832AC091110CC041E050E0032E02C0F2
-:100FC000440F551F0A94E2F7E0E4F4E041834583BF
-:100FD000913061F441E050E0032E02C0440F551FF0
-:100FE0000A94E2F7E0E2F4E041834583923061F451
-:100FF00041E050E0BA0102C0660F771F3A95E2F770
-:10100000E0E2F4E0618365839F5F933008F456CF9C
-:101010002396CDBFDEBFDF91CF910895CF93C82F28
-:101020008093523880937F3880915338811102C069
-:101030000E945207C11119C010921F38E4E0F4E079
-:1010400080818F778083E4E2F4E080818F7D8083EC
-:1010500080818F7E80831092A10610922C0A1092BC
-:101060002D0A8081877F808331C090912404C150F4
-:10107000C53930F4E4E2F4E080818860808305C003
-:10108000E4E2F4E08081877F8083809124049817D4
-:1010900019F085E00E945B032C2F30E0F901E55444
-:1010A000FE4FE491E093A106F901EA5DFE4FE49161
-:1010B000F0E0E0932C0AF0932D0AF901E057FF4F7E
-:1010C000E491E093A0008C2F0E94B606CF91089582
-:1010D000CF93C0917F3890915238C91718F48FEF91
-:1010E000890F06C09C1718F481E0890F01C08C2F6E
-:1010F0004FEF480F242F30E0B90165547E4FFB01BC
-:101100005491491750F49091A106911106C05F3F88
-:1011100021F49FEF9093A10613C09091A10695171B
-:1011200030F4E0EAF6E091819F5F918309C09091ED
-:10113000A106591728F4E0EAF6E0918191509183D5
-:10114000A9014A5D5E4FFA012491E0912C0AF091C9
-:101150002D0A30E0E217F30748F4E0E0FAE024A5B6
-:1011600035A52F5F3F4F24A735A70FC0E0912C0A6C
-:10117000F0912D0A2E173F0740F4E0E0FAE024A595
-:1011800035A52150310924A735A79091A106FB016F
-:10119000649196130FC020912C0A30912D0AFA0108
-:1011A0004491E42FF0E02E173F0721F40E940E082F
-:1011B000C0937F38CF910895883041F41092B538AC
-:1011C00010922A3880E00E940E0841C0813031F52B
-:1011D00080912A38811109C060327105C0F18F5F9A
-:1011E00080932A380E94290332C08130A1F46B3BDE
-:1011F000710538F08F5F80932A3880E00E940E08D6
-:1012000026C06115710519F16270862F880F8E5EF8
-:101210000E940E081CC00E94000219C0813811F003
-:10122000813EA9F491E090932A38813E31F4809177
-:10123000B538865F8093B53805C08091B5388F5F2B
-:101240008093B5380E9429038AE40E940E0880E04A
-:101250000895982F990F88230CF49095892F08955D
-:10126000F89488ED84BF81E0809300017894A8957C
-:10127000FFCF80915C3881110E94E4038091553842
-:1012800081110E94A1050895CF93DF930DC0809135
-:10129000503881110FC08AEC98E00197F1F70E9455
-:1012A00039090E941203CE01EC012197892B79F7AD
-:1012B00081E001C080E0DF91CF910895CF93DF936B
-:1012C000C82F811103C0CF5FD9E111C0D6EA0FC08A
-:1012D0008DE10E940E088D2F90E00E94440980E06D
-:1012E0000E940E088AEF90E00E944409C150C1118B
-:1012F000EFCF8AE992E00E944409DF91CF910895EF
-:101300001F93CF93DF93C9E28C9FC12D1124C29507
-:10131000CF70982F24E6C29F90191124DDEC9D9F79
-:10132000D12D1124D695D695D6952D2F220F822F0B
-:10133000880F880F820F192F181BCC2319F08C2FC0
-:101340000E945E09C11102C0DD2319F08D2F0E9499
-:101350005E09812F0E945E09DF91CF911F91089550
-:10136000809158380E94800908958DE10E940E08EE
-:1013700086EA90E00E94440986EA90E00E944409CF
-:1013800086EA90E00E94440980E00E940E0886EA06
-:1013900090E00E94440986EA90E00E94440986EAAF
-:1013A00090E00E94440986EA90E00E94440986EA9F
-:1013B00090E00E944409089580911C3890911D3856
-:1013C000911182E090E0FC01EA5EF74C20812093CD
-:1013D0001A38FC01ED5EF74C80818093193808952E
-:1013E000DF92EF92FF920F931F93CF93DF93EC0165
-:1013F0000E94DC0930911A3860911938E0911D384B
-:10140000F0E0EF5EF74C008180911C38882349F0B2
-:10141000013039F4832F90E0860F911D95958795C3
-:101420003EC0432F50E0C417D507A4F1462F50E02B
-:101430004C175D078CF1811102C08C2F30C0162F24
-:10144000131BE02EF12C81E0E81AF108812F90E0C7
-:10145000B7010E940F19D62E60937C38632F20E0CD
-:1014600015C0129FC0011124B7010E94FB18630F21
-:10147000FE01E61BF1091AF4F195E195F1094D2DF4
-:10148000469550E04E175F074CF42F5F201748F346
-:10149000862F05C0832F03C0862F01C0862FDF91C2
-:1014A000CF911F910F91FF90EF90DF90089580935F
-:1014B0004F380E940E080895CF93DF930E941107C2
-:1014C000882309F45BC0EFE5F8E3808180931C3842
-:1014D000218186E198E3DC012C932281C3E1D8E3EA
-:1014E0002883238140E158E3DA012C932481DC0135
-:1014F00011962C93258129832681DA0111962C934C
-:101500002781DC0112962C9380858A838185DA01FC
-:1015100012968C93828580931D38838580934C38F6
-:10152000848580934B38858580931B38868580938E
-:101530004E38878580934D38808980930B38818918
-:10154000A9E0B8E38C93828911968C938389809368
-:101550000838848980930D3885898093203886895E
-:1015600080935738878980932138808D80930F38F6
-:10157000818D80930E38828D80934538DF91CF9195
-:101580000895CF93DF93EFE5F8E380911C388083D3
-:1015900086E198E3DC012C912183C3E1D8E3288123
-:1015A000228340E158E3DA012C912383DC01119678
-:1015B0002C91248329812583DA0111962C9126838D
-:1015C000DC0112968C9187838A818087DA011296DA
-:1015D0008C91818780911D38828780914C388387D8
-:1015E00080914B38848780911B38858780914E3855
-:1015F000868780914D38878780910B38808BA9E052
-:10160000B8E38C91818B11968C91828B80910838F4
-:10161000838B80910D38848B80912038858B8091CD
-:101620005738868B80912138878B80910F38808F37
-:1016300080910E38818F80914538828F0E943607C5
-:10164000DF91CF910895CF93DF93EB018830A9F418
-:1016500010922B388DE50E940E0880918038811100
-:1016600062C080912B388F5F80932B3860E070E0F0
-:101670008CED98E00E94E60156C0982F907F903B39
-:10168000A1F550912B38451760F19B01A9E5B0E613
-:101690000E942319281B390B36952795820F931F1B
-:1016A0000024880F991F001C880F991F001C892F88
-:1016B000902D6DE5689F9001699F300D1124CE013A
-:1016C000821B930B029749F45F5F50932B384517A9
-:1016D00050F18AE40E940E0826C082E10E940E08A2
-:1016E00022C080E00E940E081EC0903E81F48091CE
-:1016F0002B38882349F0481738F060E070E08CED13
-:1017000098E00E94E6010FC00E9400020CC08A30DF
-:1017100051F46091B53880912B38F90109950E94F8
-:10172000C10A0E94000280E0DF91CF91089527E472
-:1017300031E043E00E94230B089527E431E044E0C8
-:101740000E94230B089524E831E044E00E94230B1B
-:1017500008952AE931E041E00E94230B08952EE923
-:1017600031E042E00E94230B089529EB31E041E093
-:101770000E94230B0895409158384D31A0F080E02D
-:1017800001C08E5F282F30E0F901E153FD449081C4
-:101790004917B8F7F901E253FD44E081F0E0E7575B
-:1017A000FF4F8491089580E008950F931F93CF9386
-:1017B0009091583891509C3120F480E00E9452075B
-:1017C00099C0C82FC295CF708F70909153389111E6
-:1017D00003C0C33008F0C2E0873030F4E82FF0E0F7
-:1017E000E757FF4FE49159C0873011F50091293830
-:1017F00010E00F5F1F4F0E94FC069DEC899F912D0A
-:10180000112496959695292F220F220F920F891B4E
-:101810009801280F311DC90166E070E00E940F1980
-:1018200080932938E82FF0E0E757FF4FE49135C067
-:101830008830D1F480915338811102C0E3E001C0B7
-:10184000EFE06E2351F48091293890E0019666E034
-:1018500070E00E940F1980932938E0912938F0E058
-:10186000E757FF4FE49119C080915338882321F046
-:101870000E94BB0BE82F11C066958BEA689F812DF3
-:1018800011248695982F990F890F681BE62FF0E099
-:10189000EE0FFF1FE757FF4FE491C33001F5409172
-:1018A000283850E04F5F5F4F9A01A5E9B7ED0E94DD
-:1018B0002319929582958F7089279F70892763E1FC
-:1018C000689F9001699F300D1124CA01821B930B00
-:1018D00080932838A82FB0E0A454BD44CC91CC23E9
-:1018E00019F0C13021F002C0E0E001C0EE0F8E2FF0
-:1018F0000E945207CF911F910F910895CF93C091ED
-:1019000052388DE18C0F863908F080E00E940E0875
-:1019100086E00E945B038C2F0E940E08CF910895F1
-:101920000F931F93CF938B01883091F480E00E9436
-:101930000E0860E080910F380E94D50B1092493854
-:10194000012B09F05BC181E080935338C0E061C195
-:10195000813061F46931710508F452C180935338C4
-:1019600080910F380E94D50BC0E053C1833079F5C8
-:1019700080914E38882371F090914D3842EC51E0BF
-:10198000949F9001959F300D11246217730710F0FA
-:1019900080931E38602F80910F380E94D50BC09124
-:1019A000453882EC91E0C89F9001C99F300D112409
-:1019B000CC2309F42EC12017310708F023C160E0C1
-:1019C00070E082EB9EE00E942C02C0E022C1813BCD
-:1019D000F1F481E090E00E94F0090E940E08C091AD
-:1019E0004B38C11111C180911C38811103C088E1AD
-:1019F00090E002C080E090E00817190708F409C1E0
-:101A000061E070E089E090E10E942C0202C1813E19
-:101A100041F461E070E089E090E10E942C02C0E0B6
-:101A2000F8C0813849F480911E3890E00E94F00996
-:101A30000E940E08C0E0EDC0813C49F4609152382C
-:101A400070E089E090E10E942C02C0E0E2C0823B9D
-:101A500099F480911B3890911D38911180914C38E8
-:101A6000811105C085E990E00E94F00901C085E977
-:101A70000E940E08C0E0CDC0823E29F480E00E94A2
-:101A80000E08C0E0C6C0823C41F465E970E089E020
-:101A900090E10E942C02C0E0BCC0833929F480E0B0
-:101AA0000E940E08C0E0B5C0833C41F460E070E0E5
-:101AB0008DE392E00E942C02C0E0ABC0843C51F464
-:101AC0000E947E0C60E070E082EB9EE00E942C029F
-:101AD000C0E09FC08D3B11F40E9430098F3C41F45F
-:101AE00060E070E088E991E00E942C02C0E091C0C3
-:101AF0008A3BA9F4672B99F4C0911D38CC2341F09F
-:101B00000E947E0C10921D380E94C10AC0E081C064
-:101B100060E070E08DE99BE00E94E6017AC0C09130
-:101B20001D38C11173C08A3C41F40E947E0C81E0D3
-:101B300080931D380E94C10A6CC0833B39F460E079
-:101B400070E087EE93E10E942C0263C0853C49F46B
-:101B50000E947E0C60E070E083EB94E10E942C0216
-:101B600058C0873CB9F420910F38922F92959F70FE
-:101B70009F5F937030E1939FC00111242F70822BDF
-:101B800080930F3860E00E94D50B0E94C10A0E942A
-:101B90007E0C3FC0873B59F581E080934A38C801ED
-:101BA0008F739927892BE9F430910F38232F2F70E9
-:101BB0002F5F85E7289F812D1124922F981B9695E2
-:101BC000890F869586958695482F440F942F990FF7
-:101BD000990F940F890F281B822F307F832B8093BE
-:101BE0000F38602F80910F380E94D50B12C0873EAE
-:101BF00079F410924A380E94C10A0BC0C0E009C0B3
-:101C0000C0E007C0C0E005C0C0E003C0C1E001C043
-:101C1000C1E08C2FCF911F910F910895AB01813CB2
-:101C200041F460E070E080E99CE00E942C0280E0DA
-:101C30000895823C41F460E070E083E892E00E9405
-:101C40002C0280E00895813BD1F49B0136952795C5
-:101C5000A1E1B2E40E942319969587959695879500
-:101C6000969587956EE3689F9001699F300D1124CA
-:101C700042175307D1F40E947E0C80E00895813E04
-:101C8000B1F49B0136952795A1E1B2E40E94231996
-:101C90009695879596958795969587958F5F80936E
-:101CA0000D380E94C10A80E0089580E0089581E027
-:101CB0000895AB01813C41F460E070E080E99CE074
-:101CC0000E942C0280E00895823C41F460E070E0C4
-:101CD0008DE392E00E942C0280E00895813BD1F4D4
-:101CE0009B0136952795A1E1B2E40E9423199695B0
-:101CF000879596958795969587956EE3689F900151
-:101D0000699F300D112442175307D1F40E947E0CB5
-:101D100080E00895813EB1F49B0136952795A1E1BD
-:101D2000B2E40E9423199695879596958795969586
-:101D300087958F5F80930C380E94C10A80E00895D8
-:101D400080E0089581E00895CF93C091523880E0FB
-:101D50000E940E0883E00E945B038C2F0E940E08F5
-:101D6000CF9108950F931F93CF93DF93C82F8B01CB
-:101D7000873B21F480E00E940E0821C080798039E1
-:101D8000C9F4909116388C2F8F70823059F42091BD
-:101D90001738921708F0292F80914E38811107C00B
-:101DA000822F05C080911738891708F0892F0E946B
-:101DB0000E0805C0803819F480E00E940E08C83073
-:101DC00031F460E080910E380E94D50B53C0C130D1
-:101DD00071F40931110508F4A7C081E080935338EC
-:101DE000602F80910E380E94D50BD0E0A2C0C33086
-:101DF00039F4602F80910E380E94D50BD0E099C045
-:101E0000C33C51F40E947E0C60E070E080E99CE0ED
-:101E10000E942C02D0E08DC0C43CA1F4D0914E3879
-:101E2000DD2341F06D2F70E089E090E10E942C02EB
-:101E3000D0E07FC060911E3870E089E090E10E94A0
-:101E40002C0277C0C43B61F40E94A40E1092BA38F1
-:101E500061E070E089E090E10E942C02D0E069C06E
-:101E6000C53C41F465E970E089E090E10E942C02F4
-:101E7000D0E05FC0D0911D38D11158C0CA3B39F4B1
-:101E800060E070E085EB9BE00E94E60152C0C73C39
-:101E9000B9F480910E38982F92959F709F5F937040
-:101EA00040E1949F900111248F70822B80930E3813
-:101EB00060E00E94D50B0E94C10A0E947E0C39C0CE
-:101EC000C73B59F581E080934A38C8018F73992741
-:101ED000892BE9F430910E38232F2F702F5F85E77F
-:101EE000289F812D1124922F981B9695890F8695F6
-:101EF00086958695482F440F942F990F990F940F2C
-:101F0000890F281B822F307F832B80930E38602F00
-:101F100080910E380E94D50B0CC0C73E49F4109238
-:101F20004A380E94C10A05C0D0E003C0D1E001C018
-:101F3000D1E08D2FDF91CF911F910F910895CF9315
-:101F4000AB01C0911D38C1115AC0883039F41092CC
-:101F50004938109246381092473858C0813B69F48E
-:101F6000809149388150833008F04BC083E08093E2
-:101F7000493880934838C1E049C0853B31F59B0121
-:101F800036952795A1E1B2E40E942319969587958D
-:101F900096958795969587956EE3689F9001699FC2
-:101FA000300D11244217530789F5809149388A3F33
-:101FB00068F58B5F80934938809348381092463893
-:101FC000109247380E947E0C21C08130E1F480914C
-:101FD0004638909147380196809346389093473819
-:101FE00088389E4098F01092463810924738809179
-:101FF0004938882351F081508093493807C0C1E0A7
-:1020000005C0C1E003C0C1E001C0C82F8C2FCF9133
-:102010000895AF92BF92CF92DF92EF92FF920F930B
-:102020001F93CF93DF93C82F8B01B0901A38A090E5
-:10203000193880911C38882319F0C0907C3802C070
-:10204000CC24C394F0901B3890911D389111F090DE
-:102050004C38FF2061F041E0F41659F080911E38B1
-:102060008A1560F00F2EF5E9DF2EF02D08C0DA2C6E
-:1020700006C00F2EF5E9DF2EF02D01C0DA2CE0901E
-:102080004938B8018C2F0E949F0FD0914938DD2329
-:1020900039F0E11005C08091523880932E380BC082
-:1020A000EE2049F0D11107C060E070E080E99CE0CB
-:1020B0000E942C02F3C1C83011F0CA30E9F410922A
-:1020C0004438CA3019F400911E3810E08B2D90E08E
-:1020D0008017910738F48A2D90E00817190710F43B
-:1020E00000931E38C8010E94F0090E94570A81E03F
-:1020F00080930538D0E0D2C1C13C41F460E070E08B
-:1021000080E99CE00E942C02D0E0C8C1C23C91F45E
-:10211000809152388D1520F48D2D0E94570A04C0ED
-:1021200080911E380E94570A8091523880932E3831
-:10213000D0E0B4C1C43C59F480E00E940E0860E0D5
-:1021400070E082EB9EE00E942C02D0E0A7C18FE4F9
-:102150008C0F823008F08FC0D0911C38DD23D1F075
-:102160009801ABEABAEA0E942319929582958F7082
-:1021700089279F7089279C01220F331F820F931F8D
-:10218000880F991F880F991F880F991F0817190723
-:1021900009F075C1D11109C06091103870E0C80113
-:1021A0000E94FB18892B09F079C101151105A1F4D2
-:1021B000C23B21F48FEF809305383DC080915238A7
-:1021C0008A1520F08FEF8093053835C0B81698F146
-:1021D00081E0809305382FC08091103890E046E36D
-:1021E00051E0849F9001859F300D949F300D112404
-:1021F0002017310740F4209152382A1520F08FEF34
-:102200008093053818C04CE652E0849F9001859F6A
-:10221000300D949F300D11242017310760F4809108
-:102220005238B81640F00E947E0C60E070E082EBFD
-:102230009EE00E942C0230915238209105384C2D9E
-:102240002403C0011124830F911D0E94F009809383
-:102250001E3890915238891721F0A81202C00E94AE
-:10226000A40E80911E380E94570A809152388093A4
-:102270002E38D0E013C18FE18C0F823038F480917A
-:102280000538819580930538D0E008C1C13009F048
-:1022900050C00932110519F481E080930538DD231F
-:1022A00081F080912E388D9FC001112460914838B3
-:1022B00070E00E940F19862F611101C081E00E9419
-:1022C000570A80917F3890E020915238821B910903
-:1022D00060912C3870912D386F5F7F4F60932C3850
-:1022E00070932D38009709F4CCC02CF42E3730F4BD
-:1022F00040E051E010C040E052E00DC040E450E04A
-:102300000AC0569547959C01992314F42F5F3F4FBF
-:10231000C901959587950097A1F74617570708F0CB
-:10232000B2C00E94680810922C3810922D38D0E06C
-:10233000B5C0C530B9F480915238893508F4A5C0CC
-:1023400090E0801B910B282F8835910524F0863969
-:10235000910518F403C028E501C025E920937F38D2
-:10236000D0E09CC0C630C1F49091523880914F3873
-:10237000981708F08CC0090F111D90E08017910785
-:102380003CF00835110514F0C80102C088E590E062
-:1023900080937F38D0E082C0C73099F490917F3825
-:1023A00080915238891728F48F5F80937F38D0E06E
-:1023B00075C0981708F06DC0815080937F38D0E0C9
-:1023C0006DC0D0911D38D11166C0C33CC9F481E005
-:1023D00090911C38911180E080931C380E94C10AB2
-:1023E0000E94A40E8091523890E00E94F0098093E0
-:1023F0001E380E94570A8091523880932E384EC062
-:10240000C33B69F4012B09F049C0FF2021F00F2ED6
-:10241000F5E9DF2EF02D8D2D0E94570A3FC0C33EF7
-:1024200029F480911E380E94570A38C0C53C51F4E7
-:1024300080E00E940E0860E070E083EB94E10E946F
-:102440002C022CC0C73B39F460E070E087E99BE0C8
-:102450000E94E60123C0CA3C49F48091523880931F
-:102460004E380E94C10A0E947E0C18C0CA3BA9F4D3
-:1024700060E070E083EA9BE00E94E6010FC0D0E0DC
-:102480000DC0D0E00BC0D0E009C0D0E007C0D0E064
-:1024900005C0D0E003C0D1E001C0D1E08D2FDF91B5
-:1024A000CF911F910F91FF90EF90DF90CF90BF9051
-:1024B000AF900895CF93C0E014C08C2F0E940E08F7
-:1024C00083E190E00E9444098C2F86950E940E08BB
-:1024D00083E190E00E9444090E946B05882329F063
-:1024E000CF5FC03450F381E001C080E08823F9F071
-:1024F00060917D3880915738681B81E00E949E0171
-:102500000E94C10AC5E908C08C2F0E940E0884E011
-:1025100090E00E944409C150C111F6CF0AC08C2F2F
-:102520000E940E088DE090E00E944409C150C11144
-:10253000F6CFCF9108950F931F93CF93DF93C82FBA
-:102540008B01D09149380E949F0FDD2359F0D09123
-:102550004938D11107C060E070E080E99CE00E943A
-:102560002C022FC1C83029F481E080930338D0E0D9
-:1025700028C1C23C21F410924938D0E022C1C13BAD
-:1025800021F5012B69F4809102388D3620F08FEF10
-:102590008093033805C0823018F481E080930338BB
-:1025A000D091023880910338D80FD0930238D111DE
-:1025B00004C081E08093023804C1DE3608F4FAC01A
-:1025C0008DE680930238D0E0FCC0C13E39F48091A2
-:1025D0000338819580930338D0E0F3C0C23B69F49F
-:1025E00081E08093033880910238823008F4E4C09F
-:1025F000815080930238D0E0E4C0C13009F0DEC0E1
-:102600000932110519F481E080930338809127384D
-:102610000E94290990E0EC01CC0FDD1FCC0FDD1FDB
-:10262000CC0FDD1FC81BD90B809126380E942909C9
-:1026300090910138989FC0011124CD2FC90F80912E
-:1026400025380E94290990910038989FC0011124D3
-:10265000C90F209102388C2F90E0820F911D20919C
-:102660004938213019F52091463830914738369550
-:102670002795329522952F7023273F70232744E713
-:1026800050E0421B530B849F9001859F300D949F17
-:10269000300D1124AFE9B6E40E9423199695879571
-:1026A000929582958F7089279F7089270E940E08C6
-:1026B00000FD08C00E94FC06817090912738890FA8
-:1026C000809327389091263880912438890F809301
-:1026D00026380E94FC069FE6899F912D1124929531
-:1026E0009F7025E2929F80191124982F80912538A0
-:1026F000980F909325380E94FC068F7371F40E9406
-:10270000FC069FE4899F912D1124969596952DE0C6
-:10271000929F801911248093243880910138882356
-:1027200049F00E94FC068F7329F480910138815092
-:10273000809301380E94FC06811119C00E94FC069A
-:1027400095E7899F212D1124982F921B9695920F22
-:10275000969596959695392F330F232F220F220F9A
-:10276000230F920F891B8093013810922638809195
-:102770000038833048F00E94FC068F7129F4809164
-:1027800000388150809300380E94FC06D82FDF77F4
-:10279000B9F40E94FC069BEA899F912D112496951D
-:1027A0009695292F220F920F292F220F821B80939B
-:1027B000003807C0D0E005C0D0E003C0D1E001C0C0
-:1027C000D0E08D2FDF91CF911F910F9108950F933E
-:1027D0001F93CF93DF93C82F8B01D0910B3881E0EB
-:1027E00080934438D33019F48C2F0E949B12C83048
-:1027F00029F481E08093043880E0B0C0C13C41F40A
-:1028000060E070E080E99CE00E942C0280E0A6C0BD
-:10281000C23C69F48D2F90E0019665E070E00E9463
-:102820000F1980930B380E94C10A80E097C0C13B0A
-:10283000B1F5D230C8F400FD86C08D2F90E0FC01C8
-:10284000E75FF74C208130910438231B283018F0C3
-:102850002F3F21F402C028E001C02EEFFC01E75F0A
-:10286000F74C208380E07AC0D43009F06EC090919C
-:10287000083880910438890F80930838823020F41A
-:1028800082E08093083805C0893718F088E7809384
-:102890000838809108380E940E0880E05FC0C13E71
-:1028A00049F4809104388195809304380E94C10ACC
-:1028B00080E054C0C23B29F581E080930438D230D7
-:1028C00088F400FD44C08D2F90E0FC01E75FF74CD9
-:1028D00020812F3FF1F1FC01E75FF74C2F5F208350
-:1028E00080E03CC0D430B9F580910838833018F0CE
-:1028F000815080930838809108380E940E0880E04B
-:102900002DC0C23E21F40E94C10A80E027C0C53C10
-:1029100059F460E070E083EB94E10E942C0280E0C7
-:102920000E940E0880E01AC0C130B9F409321105C6
-:1029300019F481E08093043880915138080F009396
-:10294000513880E00BC080E009C080E007C080E023
-:1029500005C080E003C080E001C081E0DF91CF913D
-:102960001F910F9108950F931F93CF93DF93C82F5B
-:102970008B01883039F480914438813019F48C2FE0
-:102980000E94E7138C2F8079803961F481E0809375
-:102990004338D0914438D11129C080911E380E940B
-:1029A0000E0829C0803839F41092433880E00E9424
-:1029B0000E08D0E020C0C130D9F4D0914338DD23D7
-:1029C00051F0809144388130A9F4B8018C2F0E94D5
-:1029D000E713D82F10C00733114068F081E08093CF
-:1029E000533860E080E00E94D50B05C0D0E003C002
-:1029F000D1E001C0D0E08D2FDF91CF911F910F91D9
-:102A00000895CF93DF93C82FD62F16C080911E381C
-:102A10000E940E0888EC90E00E944409DD2321F01A
-:102A200080E991E00E94440980E00E940E0888EC51
-:102A300090E00E944409C150C111E8CFDF91CF91CD
-:102A400008950E947E0C0E946B0581110E945A120B
-:102A50000E945C0A80914E38811180931E3861E09B
-:102A600070E080E99CE00E94E6010895EF92FF92F9
-:102A70000F931F93CF93DF9380917A3890917B3897
-:102A800021E088399207C9F40EC0EC2FF0E0E45839
-:102A9000FF4F849180530E945E098CE291E00E9476
-:102AA0004409CF5F01C0C0E0CC3078F360E070E053
-:102AB00080E99CE00E949902A5C143E1873E94070A
-:102AC00079F054E1833B950709F0F0C02091443838
-:102AD000213009F0EBC020914338222309F4E6C0ED
-:102AE000C0910B38C23009F120F0C43009F4D3C0D2
-:102AF00089C1EC2FF0E0E75FF74CD08185E90E94B7
-:102B00000E08C11105C084E090E00E94440905C090
-:102B10008D2F869590E00E94440980E00E940E0867
-:102B20008D2F90E00E9444096DC10E94FC068F73B6
-:102B3000082F10E00E94FC0695E2899F212D1124A8
-:102B4000982F921B9695920F96959695292F220F66
-:102B5000220F220F291B821BC1E0D0E07E0102C0A0
-:102B6000EE0CFF1C8A95E2F70E94FC069DEC899F03
-:102B7000912D112496959695292F220F220F920FB1
-:102B8000891B02C0CC0FDD1F8A95E2F7CE0DDF1D39
-:102B90000E94FC0690E0BE010E940F19C80FD91FC9
-:102BA000BE01DD0F880B990B0E9402182AE939E952
-:102BB00049E95FE30E9466180E94CA17EB01663973
-:102BC000710510F0C5E9D0E08C2F0E940E08C801F5
-:102BD0000E944409CE019595879595958795959581
-:102BE0008795F82E81111AC0FF24F39417C0C801ED
-:102BF0000E944409CF19D10912F4C0E0D0E08C2F13
-:102C00000E940E080E94FC06837041F4C8010E94D5
-:102C10004409CE01959587950E940E08C230D105D2
-:102C200034F70E94FC069FE4899F912D112496950C
-:102C300096952DE0929F80191124C1E0D0E002C04A
-:102C4000CC0FDD1F8A95E2F70E94FC0690E0BE01E2
-:102C50000E94FB18C80FD91F80E00E940E08CE0109
-:102C60000E944409CFC085E90E940E0882E090E0EE
-:102C70000E94440980E00E940E0883E090E00E94D8
-:102C80004409809108380E940E0884E190E00E9477
-:102C90004409CF5F01C0C0E0C43028F380ED92E06A
-:102CA0000E94440980E00E940E08ACC042E08D33CF
-:102CB000940791F40E94B00980911D38882339F05F
-:102CC00060E070E080E99CE00E9499029BC088EE81
-:102CD00093E00E94440996C052E083369507A9F418
-:102CE00080917D3890917E38992344F40E94B509F3
-:102CF00080917D3881950E94800902C00E948009E0
-:102D000088EE93E00E9444097DC02EE08E30920749
-:102D1000E9F480918038811175C080911E380E943D
-:102D20000E0884E690E00E94440980E00E940E08AC
-:102D300040910D3828EE33E0429FC001439F900D33
-:102D40001124845691090E9444095CC042E08338F2
-:102D5000940789F460E083E00E94011561E083E05C
-:102D60000E94011560E083E00E94011580ED97E06C
-:102D70000E94440947C089559E4009F041C0809196
-:102D80008038882351F03EC08C2F0E940E0882E0CC
-:102D900090E00E944409CF5F01C0C0E080911E38DE
-:102DA000C81790F30E940E0820910C3886EB91E032
-:102DB000AC01249FC001259F900D11240E9444095D
-:102DC000C0911E380FC08C2F0E940E08CF3128F002
-:102DD00085E090E00E94440904C088E090E00E94F1
-:102DE0004409C150C111EFCF80E00E940E088091CC
-:102DF0000C385CEB859FC00111240E94440902C07D
-:102E00000E94A906DF91CF911F910F91FF90EF9043
-:102E10000895F894E0E4F0E08081877F808388ED76
-:102E2000A89584BF90910001907F9093000121E0CC
-:102E300030E084BF2093610082EC80B98FE384B9D5
-:102E400013E018B9E0E0F4E088E0808B828B838B9C
-:102E5000848B858BE0E4F4E081E0838BC0EAD0E0F2
-:102E6000888182608883898181608983A0EAB6E055
-:102E700081E48C938FEF11968C93A0E0BAE083E409
-:102E800011968C9311978EEF90E096968D939C936C
-:102E900097971C9383898160838B0E944F05E0E0A4
-:102EA000F6E08DE1868385E5828310925A38109290
-:102EB0005B38828581608287808581608087888198
-:102EC000806188831083808581608087789481E029
-:102ED0000E945B0360E070E082EC97E10E94E601F3
-:102EE000109250380E9421150E941203809181385F
-:102EF00090918238009751F06091833870918438B6
-:102F00000E942C021092813810928238809153389E
-:102F1000882329F080E00E940E080E943D060E944E
-:102F20003909109250380E943615DECF80917A38D8
-:102F300090917B3823E1873E920739F468E170E095
-:102F400089E090E10E942C0208958950904199F403
-:102F500090915238923040F0892F869596959695AB
-:102F6000890F0E94570A089560E070E080E99CE0B4
-:102F70000E942C02089560E070E080E99CE00E94CD
-:102F80002C020895843021F40E94961780E0089561
-:102F900081E008950E94D1176894B1110C946018D3
-:102FA00008950E94451888F09F5798F0B92F9927E7
-:102FB000B751B0F0E1F0660F771F881F991F1AF024
-:102FC000BA95C9F714C0B13091F00E945F18B1E012
-:102FD00008950C945F18672F782F8827B85F39F011
-:102FE000B93FCCF3869577956795B395D9F73EF4BD
-:102FF00090958095709561957F4F8F4F9F4F089565
-:10300000E89409C097FB3EF4909580957095619582
-:103010007F4F8F4F9F4F9923A9F0F92F96E9BB2738
-:103020009395F695879577956795B795F111F8CFB4
-:10303000FAF4BB0F11F460FF1BC06F5F7F4F8F4F1F
-:103040009F4F16C0882311F096E911C0772321F015
-:103050009EE8872F762F05C0662371F096E8862FAD
-:1030600070E060E02AF09A95660F771F881FDAF704
-:10307000880F9695879597F9089557FD9058440FB6
-:10308000551F59F05F3F71F04795880F97FB991FC7
-:1030900061F09F3F79F08795089512161306140684
-:1030A000551FF2CF4695F1DF08C016161706180611
-:1030B000991FF1CF86957105610508940895E894EC
-:1030C000BB2766277727CB0197F908950E947918C7
-:1030D0000C94EA180E94DC1838F00E94E31820F0E3
-:1030E000952311F00C94D3180C94D91811240C9436
-:1030F00060180E943D1870F3959FC1F3950F50E042
-:10310000551F629FF001729FBB27F00DB11D639F99
-:10311000AA27F00DB11DAA1F649F6627B00DA11D3F
-:10312000661F829F2227B00DA11D621F739FB00DE5
-:10313000A11D621F839FA00D611D221F749F332755
-:10314000A00D611D231F849F600D211D822F762FEE
-:103150006A2F11249F5750409AF0F1F088234AF0CB
-:10316000EE0FFF1FBB1F661F771F881F9150504037
-:10317000A9F79E3F510580F00C94D3180C94601869
-:103180005F3FE4F3983ED4F3869577956795B795BE
-:10319000F795E7959F5FC1F7FE2B880F911D9695D8
-:1031A000879597F9089597F99F6780E870E060E048
-:1031B00008959FEF80EC089500240A9416161706D0
-:1031C00018060906089500240A9412161306140618
-:1031D00005060895092E0394000C11F4882352F07B
-:1031E000BB0F40F4BF2B11F460FF04C06F5F7F4F33
-:1031F0008F4F9F4F0895AA1BBB1B51E107C0AA1F09
-:10320000BB1FA617B70710F0A61BB70B881F991F87
-:103210005A95A9F780959095BC01CD01089597FB2B
-:10322000072E16F4009407D077FD09D00E94FB18F2
-:1032300007FC05D03EF4909581959F4F08957095B9
-:1032400061957F4F0895A29FB001B39FC001A39FD6
-:10325000700D811D1124911DB29F700D811D1124CF
-:10326000911D089503D0808199270895FC01E050B5
-:10327000FC4E0895262F0E9436190080021619F080
-:103280000E944619019701970895262FAF93BF9387
-:10329000E0E0F0E1328131FDFDCFDC01A050BC4E19
-:1032A0002C932DE924BF23E020830196BF91AF9199
-:0632B0000895F894FFCF21
-:1032B6001638133810380201000000000000000123
-:1032C600000000000000000001000021012302258B
-:0932D60003270429052C06FF065C
-:1032DF00060B180101010004582943030202371895
-:1032EF0001050595958E08080D95080101013D0111
-:0432FF00370702008B
-:00000001FF
diff --git a/Debug/anduril2-lume1-ff-6af-with-fet-2022-12-27.hex b/Debug/anduril2-lume1-ff-6af-with-fet-2022-12-27.hex
deleted file mode 100644
index 3ff90de..0000000
--- a/Debug/anduril2-lume1-ff-6af-with-fet-2022-12-27.hex
+++ /dev/null
@@ -1,819 +0,0 @@
-:100000000C9429010C9446010C9446010C94460171
-:100010000C9446010C9476050C9446010C945B05F7
-:100020000C9446010C9446010C9446010C94460134
-:100030000C9446010C9446010C9446010C94460124
-:100040000C9446010C9446010C9446010C94460114
-:100050000C9467030C9446010C9446010C944601E1
-:100060000C9446010C9446010C9446010C944601F4
-:100070000C9446010C9446010C9446013230323205
-:100080003132323730343831000105041410111583
-:10009000101010101010101211111412141410104E
-:1000A000121010101214141010101010121014103E
-:1000B000111111121414141412121212121212101D
-:1000C0001010101014101210101010121010141420
-:1000D000141010141010101010121410141010140A
-:1000E00012121212121212121212121212121212F0
-:1000F00012121212121212121212121212121212E0
-:1001000012121212121212121212121212121212CF
-:1001100012121212121212121212121212121212BF
-:100120001212121212120000000000000000000063
-:1001300000000000000000000000000000000000BF
-:1001400000000000000000000000000000000000AF
-:10015000000000000000000000000000000000009F
-:10016000000000000000000000000000000000008F
-:10017000000000000000000000000000000000007F
-:10018000000000000000000000000000000000006F
-:10019000000000000000000000000000000000005F
-:1001A000000000000000000000000000000000004F
-:1001B0000000000000000000000000FF0102071125
-:1001C00023416F2787C6CEAA03040E12051C2229DD
-:1001D0000B161A536171839726C552FD8EA0B35832
-:1001E000A3B5C8DD92A0B0C0D2E5F90D0E0F111273
-:1001F000071505181A1C1E0722240E0F102E311386
-:10020000373A3E4145101C501F595E241718191AE1
-:100210001C1D1E202123242627292B2D2E3032346D
-:1002200037393B3D404245474A4C4F5255585B5E3B
-:100230006265686C7073777B7F83878B9094999EDF
-:10024000A2A7ACB1B7BCC2C7CDD3D9DFE5EBF2F8FA
-:10025000FF0011241FBECFEFCDBFDFE3DEBF18E3E9
-:10026000A0E0B8E3E1EEF2E302C005900D92A43203
-:10027000B107D9F728E3A4E2B8E301C01D92AF3C6F
-:10028000B207E1F70E940A170C945A190C94000067
-:10029000CF93DF93CDB7DEB72697CDBFDEBF90916A
-:1002A0001C3820917A3830917B382E593B4009F424
-:1002B00092E0843019F460934C3821C06623F9F041
-:1002C000823019F427E9261B622F26E0E8EBF2EBD7
-:1002D000DE01119601900D922A95E1F7E82FF0E0EA
-:1002E0003197EE0FFF1F21E030E02C0F3D1FE20F92
-:1002F000F31F0190F081E02DE90FF11D6083269638
-:10030000CDBFDEBFDF91CF910895813019F41092F7
-:100310004E380895823019F460934D380895833033
-:1003200019F460934B380895843011F460931B38AE
-:10033000089581E00895611160932138089566233E
-:1003400089F0813061F480917D3890915738891B14
-:10035000681B6093573882E08093223803C0635E45
-:100360006093203880912038873418F086E4809399
-:1003700020380895609345380895FF920F931F9396
-:10038000CF93DF93EC018B01F22E20917A383091DC
-:100390007B38232B31F0E0917A38F0917B38842F31
-:1003A0000995C0937A38D0937B38CD2B39F0E09102
-:1003B0007A38F0917B38B8018F2D099581E08093D0
-:1003C0005038DF91CF911F910F91FF900895DC017C
-:1003D00090915638983098F4E92FF0E0EE0FFF1F17
-:1003E000E154F74CA083B1839F5F9093563828E087
-:1003F00049E0CD010E94BD018091563808958FEFEC
-:100400000895CF93DF93E0915638EE2359F0E150F1
-:10041000E0935638F0E0EE0FFF1FE154F74CC08137
-:10042000D18102C0C0E0D0E0E0915638EE2349F01F
-:10043000F0E03197EE0FFF1FE154F74C808191817E
-:1004400002C080E090E02AE049E060E070E00E94B5
-:10045000BD01CE01DF91CF9108950F931F93CF93EC
-:10046000DF93EC018B010E940102B801CE010E94D2
-:10047000E701DF91CF911F910F910895CF93C09124
-:100480001D38C1111BC0813C39F460E070E081E986
-:100490009CE00E942D0215C0823C39F460E070E0BF
-:1004A00084E692E00E942D020CC0873B49F460E094
-:1004B00070E08AEA9BE00E94E70103C0C1E001C04E
-:1004C000C1E08C2FCF910895813C41F460E070E051
-:1004D00081E99CE00E942D0280E00895823C41F475
-:1004E00060E070E08FE09EE00E942D0280E00895C1
-:1004F000873B41F460E070E080EB9BE00E94E70105
-:1005000080E0089581E00895813C41F460E070E06E
-:1005100081E99CE00E942D0280E00895823C41F434
-:1005200060E070E08AE59EE00E942D0280E0089580
-:1005300081E0089580938138909382386093833866
-:1005400070938438089590E001C09F5F903168F403
-:10055000292F30E0F901EE0FFF1F2E0F3F1FF90189
-:10056000EB57F74C20812111F0CF903160F4292F07
-:1005700030E0F901EE0FFF1FE20FF31FEB57F74CCE
-:10058000808361837283089520E01CC0822F90E0F5
-:10059000DC011196AD01440F551FA40FB51FAB57D9
-:1005A000B74C3C91FC01EE0FFF1F8E0F9F1FFC010B
-:1005B000EB57F74C308311968D919C911297818364
-:1005C00092832F5F2F3010F3822F90E0FC01EE0F0B
-:1005D000FF1FE80FF91FEB57F74C108211821282B0
-:1005E00008950F931F93CF93DF93D82F8B01C09162
-:1005F0005638C1500EC0EC2FEE0FFF0BE154F74CF4
-:100600000190F081E02DB8018D2F0995882329F004
-:10061000C150CC2384F781E001C080E0DF91CF910D
-:100620001F910F91089508C06091863870918738A6
-:100630000E94F1020E94C402809185388111F4CF9A
-:1006400008950E94A3020895BC018091BA380E94C7
-:10065000210308951092BA3810925D3810925E38D6
-:1006600081E08093503808959091BA3890689093C3
-:10067000BA38803171F490619093BA38292F2F7075
-:1006800030E02F30310594F49F5F9093BA3881E0C9
-:10069000089581110DC0892F8F7E8093BA3895FF00
-:1006A00009C080648093BA3881E0089581E008959C
-:1006B00080E0089581E0089505C08EED96E20197EF
-:1006C000F1F7822F2FEF280F8111F7CF08951F9296
-:1006D0000F920FB60F9211242F933F934F935F9376
-:1006E0006F937F938F939F93AF93BF93EF93FF93FA
-:1006F00081E080930B0680915B38882309F451C018
-:10070000E0915A38E13039F5A0E0B1E191968C9151
-:1007100091979096AC912091100630911106281B6C
-:10072000310987FD3395B0E00E942419DC01CB012B
-:1007300080589F4FAF4FBF4F892F9A2FAB2FBB27AA
-:10074000BC01002476956795079476956795079484
-:10075000762F602D0DC06091100670911106002457
-:10076000769567950794769567950794762F602D13
-:10077000F0E0EE0FFF1FDF01A554B74C6D937C93A3
-:10078000EA54F74C808191818617970708F4019607
-:100790006817790708F401978083918381E080933B
-:1007A0005C3881E080935B38FF91EF91BF91AF910E
-:1007B0009F918F917F916F915F914F913F912F9179
-:1007C0000F900FBE0F901F901895CF93DF9310924C
-:1007D0005C389091100680915138890F8093513880
-:1007E00080915938882309F458C110925938809162
-:1007F0005A3890915338992339F0E0E0F6E090812F
-:100800009E7F908310925A38811152C08091223875
-:10081000882349F06091BB387091BC386093B6383A
-:100820007093B73804C06091B6387091B738605F84
-:100830007F4F0024660F771F001C660F771F001C78
-:10084000672F702D80E098E50E94FC188091213878
-:10085000680F711D675071097695679560935838D8
-:1008600080914238882321F08150809342380AC019
-:100870006D3140F460E070E084E00E94210385E087
-:1008800080934238809153388111FEC0E0E0F6E059
-:100890008EE1868385E4828381E080935A381092CA
-:1008A0005B38828581608287808581608087ECC02B
-:1008B000813009F0E9C080912238882301F140910C
-:1008C000BD385091BE384093B8385093B93880E065
-:1008D00014C0E82FF0E09A01205F3F4F369527952E
-:1008E000329522952F7023273F702327EE0FFF1F8D
-:1008F000EE5CF74C208331838F5F883050F380911A
-:10090000B8389091B938409696958795929582958A
-:100910008F7089279F7089279C0136952795C091F4
-:1009200057380C2E000CDD0B2C0F3D1F235131408E
-:10093000F90120937D3830937E3840913138A42FCF
-:10094000B0E0AA0FBB1FAE5CB74C2D913C91119744
-:10095000BC01621B730B9B018D939C934F5F47708F
-:1009600040933138220F331F220F331F820F931F02
-:100970004091203850E09A012D5E3E4F2C1B3D0BDC
-:10098000220F331F821B930B20E009C01816190693
-:1009900014F4019703C099230CF401962F5F2330C0
-:1009A000A8F318161906ACF577239CF1209130387E
-:1009B000121624F4281B2093303856C0880F991F34
-:1009C0000397BC0100247695679507947695679503
-:1009D0000794762F602D91FF02C061587F4F660FFC
-:1009E000672F661F770B1616170614F061E070E08C
-:1009F00080E1861B80933038495F5F4FE417F5072D
-:100A000024F480915238863979F185E00E942103DF
-:100A10002BC09C012C5F3F4FF2F47723E4F420912C
-:100A20003038222334F4281B822F845080933038AE
-:100A30001BC02CEE281B209330386CEF7FEF681B17
-:100A4000790B75956795809158388F3168F086E0FD
-:100A50000E94210309C0809158388E3128F060E04F
-:100A600070E087E00E942103E0E0F6E08DE18683FC
-:100A700085E5828310925A3810925B3882858160B6
-:100A8000828780858160808780912238882329F041
-:100A900080912238815080932238DF91CF91089540
-:100AA00081E080935201809151018111FCCF81E45A
-:100AB0008093500108951F920F920FB60F92112448
-:100AC0008F9381E080935301809355388F910F90DD
-:100AD0000FBE0F901F9018958AB1869586958695C2
-:100AE00091E0892781708093803808951F920F923A
-:100AF0000FB60F9211248F938BB188608BB981E070
-:100B0000809354388F910F900FBE0F901F901895BF
-:100B100080938038882341F080E10E94340380E094
-:100B200090E00E94240309C080E00E943403809179
-:100B30005D3890915E380E94240310925D381092C7
-:100B40005E380895CF93DF931092553880915D38C9
-:100B500090915E389C012F5F3F4F88279078822BC1
-:100B6000932B80935D3890935E38C09180380E94BB
-:100B70006C05C81721F0109253380E948805C09167
-:100B80005D38D0915E3880915338882341F1BE01A1
-:100B900083E00E9421030E941303CF73DD27CD2B36
-:100BA00009F069C010922F38E0E0F6E08DE186830D
-:100BB00085E5828310925A3810925B388285816075
-:100BC0008287808581608087A0EAB0E08C91806117
-:100BD0008C9383E0808380858160808739C0809199
-:100BE000BA38807F803B31F460E070E081E00E94A1
-:100BF000210304C0BE0181E00E9421038091BA3824
-:100C000084FF14C085FF04C0CE010E94240320C0CD
-:100C10006897F0F010925D3810925E388062809391
-:100C2000BA3880E090E00E94240312C0882381F04B
-:100C300085FF03C00E942A030BC0629748F08064BE
-:100C40008093BA3880E090E00E9424030E942A0337
-:100C500080912F3881110BC0E0E0F6E09285916021
-:100C6000928790859160908791E0909359388F5F3B
-:100C70008F7180932F38DF91CF91089581E0809319
-:100C80005201809151018111FCCF89E5809350017F
-:100C9000E0E0F6E080818E7F80830E946C05811108
-:100CA000FCCF0E942A03E0E4F4E083898160838B17
-:100CB00010925C38109255381092543822C0E0E5FA
-:100CC000F0E08081897F846080838081816080837F
-:100CD000889580818E7F8083809154388111109215
-:100CE000533880915C38882339F081E08093223832
-:100CF000809359380E94E5038091553881110E94F4
-:100D0000A205809153388111DACF82E08093223896
-:100D1000E0E4F4E08389887F838BE0E0F6E08DE116
-:100D2000868385E5828310925A3810925B388285DB
-:100D300081608287808581608087A0EAB0E08C91A5
-:100D400080618C9383E080838085816080870E94AE
-:100D500050050895E0E5F0E08081897F80838081FF
-:100D600081608083889580818E7F808308958F5FE6
-:100D70008033A8F080911F388330F1F1E4E0F4E093
-:100D8000808180688083E4E2F4E0808180628083F7
-:100D900080818061808383E080931F3808958D3047
-:100DA000A8F080911F38823039F1E4E0F4E08081CE
-:100DB00080688083E4E2F4E08081806280838081C7
-:100DC0008F7E808382E080931F3808958823A1F06E
-:100DD00080911F38813081F0E4E0F4E08081806808
-:100DE0008083E4E2F4E080818F7D808380818F7E48
-:100DF000808381E080931F380895E0910638F09158
-:100E000007383196FB70F460E0930638F0930738AA
-:100E1000809151388B5A80935138E49180915138A8
-:100E20008E0F08951F93CF93DF9382E00E945C039F
-:100E3000F89480E490E00E943319853A79F0789430
-:100E400080E011C0C12FD0E0CE018F5B9F4F0E9488
-:100E50003319C15AD74C88831F5F01C010E01B3182
-:100E600088F3789481E0DF91CF911F910895CF931B
-:100E700082E00E945C03F894C0E00BC08C2F90E0ED
-:100E8000FC01E15AF74C60818F5B9F4F0E943B1938
-:100E9000CF5FCB3198F365EA80E490E00E943B1984
-:100EA0007894CF910895CF93DF9300D01F92CDB760
-:100EB000DEB719821A8291E09B8390E0A7C0492F88
-:100EC00050E0BA01660F771F282F30E002C0359539
-:100ED00027956A95E2F72370E1E0F0E0EC0FFD1F43
-:100EE000E40FF51F3081222319F0213069F163C02E
-:100EF00091110CC041E050E0032E02C0440F551F79
-:100F00000A94E2F7E0E4F4E041834683913061F42F
-:100F100041E050E0032E02C0440F551F0A94E2F74F
-:100F2000E0E2F4E041834683923009F06EC041E094
-:100F300050E0BA0102C0660F771F3A95E2F7E0E28F
-:100F4000F4E06183668361C0911110C0E32FF0E08B
-:100F500041E050E0032E02C0440F551F0A94E2F70F
-:100F600040934204E05BFB4F28E02083913081F402
-:100F7000E32FF0E041E050E0032E02C0440F551F84
-:100F80000A94E2F740932204E05DFB4F28E02083BF
-:100F90009230D9F5E32FF0E041E050E0BA0102C011
-:100FA000660F771F3A95E2F760932204E05DFB4FEE
-:100FB00028E020832AC091110CC041E050E0032EAC
-:100FC00002C0440F551F0A94E2F7E0E4F4E04183C5
-:100FD0004583913061F441E050E0032E02C0440F9C
-:100FE000551F0A94E2F7E0E2F4E041834583923032
-:100FF00061F441E050E0BA0102C0660F771F3A95F4
-:10100000E2F7E0E2F4E0618365839F5F933008F4E8
-:1010100056CF2396CDBFDEBFDF91CF910895CF93FA
-:10102000C82F8093523880937F3880915338811134
-:1010300002C00E945307C11119C010921F38E4E08A
-:10104000F4E080818F778083E4E2F4E080818F7D1B
-:10105000808380818F7E80831092A10610922C0A5B
-:1010600010922D0A8081877F808331C09091240463
-:10107000C150C53930F4E4E2F4E0808188608083B7
-:1010800005C0E4E2F4E08081877F808380912404BE
-:10109000981719F085E00E945C032C2F30E0F901CD
-:1010A000E454FE4FE491E093A106F901EA5DFE4F9E
-:1010B000E491F0E0E0932C0AF0932D0AF901E05757
-:1010C000FF4FE491E093A0008C2F0E94B706CF91D0
-:1010D0000895CF93C0917F3890915238C91718F472
-:1010E0008FEF890F06C09C1718F481E0890F01C0AB
-:1010F0008C2F4FEF480F242F30E0B90164547E4FFE
-:10110000FB015491491750F49091A106911106C02A
-:101110005F3F21F49FEF9093A10613C09091A10629
-:10112000951730F4E0EAF6E091819F5F918309C062
-:101130009091A106591728F4E0EAF6E091819150C8
-:101140009183A9014A5D5E4FFA012491E0912C0A36
-:10115000F0912D0A30E0E217F30748F4E0E0FAE0FE
-:1011600024A535A52F5F3F4F24A735A70FC0E091D9
-:101170002C0AF0912D0A2E173F0740F4E0E0FAE028
-:1011800024A535A52150310924A735A79091A106A2
-:10119000FB01649196130FC020912C0A30912D0A07
-:1011A000FA014491E42FF0E02E173F0721F40E944A
-:1011B0000F08C0937F38CF910895883041F4109282
-:1011C000B53810922A3880E00E940F0841C0813063
-:1011D00031F580912A38811109C060327105C0F162
-:1011E0008F5F80932A380E942A0332C08130A1F495
-:1011F0006B3B710538F08F5F80932A3880E00E9446
-:101200000F0826C06115710519F16270862F880FCD
-:101210008E5E0E940F081CC00E94010219C0813816
-:1012200011F0813EA9F491E090932A38813E31F487
-:101230008091B538865F8093B53805C08091B53808
-:101240008F5F8093B5380E942A038BE40E940F08B9
-:1012500080E00895982F990F88230CF49095892F9A
-:101260000895F89488ED84BF81E08093000178941C
-:10127000A895FFCF80915C3881110E94E503809191
-:10128000553881110E94A2050895CF93DF930DC0B8
-:101290008091503881110FC08AEC98E00197F1F7E6
-:1012A0000E943A090E941303CE01EC012197892B79
-:1012B00079F781E001C080E0DF91CF910895CF936D
-:1012C000DF93C82F811103C0CF5FD9E111C0D6EAE7
-:1012D0000FC08EE10E940F088D2F90E00E944509FB
-:1012E00080E00E940F088AEF90E00E944509C150FB
-:1012F000C111EFCF8AE992E00E944509DF91CF91B9
-:1013000008951F93CF93DF93C9E28C9FC12D1124C1
-:10131000C295CF70982F24E6C29F90191124DDEC5E
-:101320009D9FD12D1124D695D695D6952D2F220F80
-:10133000822F880F880F820F192F181BCC2319F0CA
-:101340008C2F0E945F09C11102C0DD2319F08D2F7F
-:101350000E945F09812F0E945F09DF91CF911F9149
-:101360000895809158380E94810908958EE10E9465
-:101370000F0886EA90E00E94450986EA90E00E9404
-:10138000450986EA90E00E94450980E00E940F0826
-:1013900086EA90E00E94450986EA90E00E944509AD
-:1013A00086EA90E00E94450986EA90E00E9445099D
-:1013B00086EA90E00E944509089580911C3890913A
-:1013C0001D38911182E090E0FC01EA5EF74C20812B
-:1013D00020931A38FC01ED5EF74C80818093193818
-:1013E0000895DF92EF92FF920F931F93CF93DF93B5
-:1013F000EC010E94DD0930911A3860911938E091B2
-:101400001D38F0E0EF5EF74C008180911C38882396
-:1014100049F0013039F4832F90E0860F911D9595A6
-:1014200087953EC0432F50E0C417D507A4F1462F3F
-:1014300050E04C175D078CF1811102C08C2F30C039
-:10144000162F131BE02EF12C81E0E81AF108812FF2
-:1014500090E0B7010E941019D62E60937C38632F5C
-:1014600020E015C0129FC0011124B7010E94FC1892
-:10147000630FFE01E61BF1091AF4F195E195F109FC
-:101480004D2D469550E04E175F074CF42F5F201707
-:1014900048F3862F05C0832F03C0862F01C0862FF7
-:1014A000DF91CF911F910F91FF90EF90DF90089502
-:1014B00080934F380E940F080895CF93DF930E94C6
-:1014C0001207882309F45BC0EFE5F8E3808180937D
-:1014D0001C38218186E198E3DC012C932281C3E151
-:1014E000D8E32883238140E158E3DA012C93248157
-:1014F000DC0111962C93258129832681DA0111962E
-:101500002C932781DC0112962C9380858A83818518
-:10151000DA0112968C93828580931D38838580939F
-:101520004C38848580934B38858580931B3886851D
-:1015300080934E38878580934D38808980930B380F
-:101540008189A9E0B8E38C93828911968C93838971
-:1015500080930838848980930D388589809320385A
-:10156000868980935738878980932138808D80932E
-:101570000F38818D80930E38828D80934538DF91AE
-:10158000CF910895CF93DF93EFE5F8E380911C3876
-:10159000808386E198E3DC012C912183C3E1D8E3C9
-:1015A0002881228340E158E3DA012C912383DC0176
-:1015B00011962C91248329812583DA0111962C918F
-:1015C0002683DC0112968C9187838A818087DA01D9
-:1015D00012968C91818780911D38828780914C383A
-:1015E000838780914B38848780911B3885878091D1
-:1015F0004E38868780914D38878780910B38808B55
-:10160000A9E0B8E38C91818B11968C91828B8091AB
-:101610000838838B80910D38848B80912038858B9E
-:1016200080915738868B80912138878B80910F3835
-:10163000808F80910E38818F80914538828F0E94F3
-:101640003707DF91CF910895CF93DF93EB01883077
-:10165000A9F410922B388DE50E940F0880918038F4
-:10166000811162C080912B388F5F80932B3860E0AE
-:1016700070E08DED98E00E94E70156C0982F907FB2
-:10168000903BA1F550912B38451760F19B01A9E5DE
-:10169000B0E60E942419281B390B36952795820F36
-:1016A000931F0024880F991F001C880F991F001C8E
-:1016B000892F902D6DE5689F9001699F300D112451
-:1016C000CE01821B930B029749F45F5F50932B3836
-:1016D000451750F18BE40E940F0826C082E10E945A
-:1016E0000F0822C080E00E940F081EC0903E81F4C7
-:1016F00080912B38882349F0481738F060E070E07B
-:101700008DED98E00E94E7010FC00E9401020CC01D
-:101710008A3051F46091B53880912B38F9010995E0
-:101720000E94C20A0E94010280E0DF91CF910895D9
-:1017300028E431E043E00E94240B089528E431E0DE
-:1017400044E00E94240B089525E831E044E00E9423
-:10175000240B08952BE931E041E00E94240B089509
-:101760002FE931E042E00E94240B08952AEB31E09A
-:1017700041E00E94240B0895409158384D31A0F06B
-:1017800080E001C08E5F282F30E0F901EF52FD4468
-:1017900090814917B8F7F901E053FD44E081F0E08A
-:1017A000E757FF4F8491089580E008950F931F93AA
-:1017B000CF939091583891509C3120F480E00E9452
-:1017C000530799C0C82FC295CF708F70909153382E
-:1017D000911103C0C33008F0C2E0873030F4E82F25
-:1017E000F0E0E757FF4FE49159C0873011F50091C1
-:1017F000293810E00F5F1F4F0E94FD069DEC899F66
-:10180000912D112496959695292F220F220F920F34
-:10181000891B9801280F311DC90166E070E00E9404
-:10182000101980932938E82FF0E0E757FF4FE49133
-:1018300035C08830D1F480915338811102C0E3E083
-:1018400001C0EFE06E2351F48091293890E00196B9
-:1018500066E070E00E94101980932938E0912938E1
-:10186000F0E0E757FF4FE49119C080915338882387
-:1018700021F00E94BC0BE82F11C066958BEA689F8F
-:10188000812D11248695982F990F890F681BE62FBB
-:10189000F0E0EE0FFF1FE757FF4FE491C33001F573
-:1018A0004091283850E04F5F5F4F9A01A5E9B7EDAE
-:1018B0000E942419929582958F7089279F7089279D
-:1018C00063E1689F9001699F300D1124CA01821B5A
-:1018D000930B80932838A82FB0E0A254BD44CC913C
-:1018E000CC2319F0C13021F002C0E0E001C0EE0FBE
-:1018F0008E2F0E945307CF911F910F910895CF9380
-:10190000C09152388EE18C0F873908F080E00E9438
-:101910000F0886E00E945C038C2F0E940F08CF9175
-:1019200008950F931F93CF938B01883091F480E03B
-:101930000E940F0860E080910F380E94D60B109231
-:101940004938012B09F05BC181E080935338C0E036
-:1019500061C1813061F46931710508F452C180932D
-:10196000533880910F380E94D60BC0E053C18330AA
-:1019700079F580914E38882371F090914D3842EC82
-:1019800051E0949F9001959F300D112462177307C9
-:1019900010F080931E38602F80910F380E94D60B74
-:1019A000C091453882EC91E0C89F9001C99F300DED
-:1019B0001124CC2309F42EC12017310708F023C1CC
-:1019C00060E070E083EB9EE00E942D02C0E022C147
-:1019D000813BF1F481E090E00E94F1090E940F0840
-:1019E000C0914B38C11111C180911C38811103C0C5
-:1019F00088E190E002C080E090E00817190708F441
-:101A000009C161E070E08AE090E10E942D0202C10C
-:101A1000813E41F461E070E08AE090E10E942D0295
-:101A2000C0E0F8C0813849F480911E3890E00E94EF
-:101A3000F1090E940F08C0E0EDC0813C49F46091BB
-:101A4000523870E08AE090E10E942D02C0E0E2C0CE
-:101A5000823B99F480911B3890911D3891118091AF
-:101A60004C38811105C086E990E00E94F10901C05F
-:101A700086E90E940F08C0E0CDC0823E29F480E0D4
-:101A80000E940F08C0E0C6C0823C41F466E970E0E5
-:101A90008AE090E10E942D02C0E0BCC0833929F4A5
-:101AA00080E00E940F08C0E0B5C0833C41F460E0D4
-:101AB00070E08EE392E00E942D02C0E0ABC0843C57
-:101AC00051F40E947F0C60E070E083EB9EE00E9486
-:101AD0002D02C0E09FC08D3B11F40E9431098F3C64
-:101AE00041F460E070E089E991E00E942D02C0E0DD
-:101AF00091C08A3BA9F4672B99F4C0911D38CC237F
-:101B000041F00E947F0C10921D380E94C20AC0E072
-:101B100081C060E070E08EE99BE00E94E7017AC03E
-:101B2000C0911D38C11173C08A3C41F40E947F0CE2
-:101B300081E080931D380E94C20A6CC0833B39F457
-:101B400060E070E088EE93E10E942D0263C0853C66
-:101B500049F40E947F0C60E070E084EB94E10E9405
-:101B60002D0258C0873CB9F420910F38922F9295DE
-:101B70009F709F5F937030E1939FC00111242F707D
-:101B8000822B80930F3860E00E94D60B0E94C20A1D
-:101B90000E947F0C3FC0873B59F581E080934A3813
-:101BA000C8018F739927892BE9F430910F38232FBF
-:101BB0002F702F5F85E7289F812D1124922F981B6E
-:101BC0009695890F869586958695482F440F942F74
-:101BD000990F990F940F890F281B822F307F832B29
-:101BE00080930F38602F80910F380E94D60B12C05F
-:101BF000873E79F410924A380E94C20A0BC0C0E0B6
-:101C000009C0C0E007C0C0E005C0C0E003C0C1E03B
-:101C100001C0C1E08C2FCF911F910F910895AB01AE
-:101C2000813C41F460E070E081E99CE00E942D027B
-:101C300080E00895823C41F460E070E084E892E046
-:101C40000E942D0280E00895813BD1F49B013695DE
-:101C50002795A1E1B2E40E9424199695879596955F
-:101C60008795969587956EE3689F9001699F300DE3
-:101C7000112442175307D1F40E947F0C80E008958D
-:101C8000813EB1F49B0136952795A1E1B2E40E9413
-:101C900024199695879596958795969587958F5F44
-:101CA00080930D380E94C20A80E0089580E0089574
-:101CB00081E00895AB01813C41F460E070E081E98E
-:101CC0009CE00E942D0280E00895823C41F460E097
-:101CD00070E08EE392E00E942D0280E00895813B47
-:101CE000D1F49B0136952795A1E1B2E40E94241915
-:101CF0009695879596958795969587956EE3689FB7
-:101D00009001699F300D112442175307D1F40E94AE
-:101D10007F0C80E00895813EB1F49B0136952795B4
-:101D2000A1E1B2E40E94241996958795969587952E
-:101D3000969587958F5F80930C380E94C20A80E049
-:101D4000089580E0089581E00895CF93C0915238BE
-:101D500080E00E940F0883E00E945C038C2F0E94A9
-:101D60000F08CF9108950F931F93CF93DF93C82F40
-:101D70008B01873B21F480E00E940F0821C080790D
-:101D80008039C9F4909116388C2F8F70823059F4B5
-:101D900020911738921708F0292F80914E38811121
-:101DA00007C0822F05C080911738891708F0892F46
-:101DB0000E940F0805C0803819F480E00E940F08C7
-:101DC000C83031F460E080910E380E94D60B53C0C9
-:101DD000C13071F40931110508F4A7C081E0809386
-:101DE0005338602F80910E380E94D60BD0E0A2C0ED
-:101DF000C33039F4602F80910E380E94D60BD0E0AA
-:101E000099C0C33C51F40E947F0C60E070E081E90E
-:101E10009CE00E942D02D0E08DC0C43CA1F4D09182
-:101E20004E38DD2341F06D2F70E08AE090E10E9492
-:101E30002D02D0E07FC060911E3870E08AE090E112
-:101E40000E942D0277C0C43B61F40E94A50E10923F
-:101E5000BA3861E070E08AE090E10E942D02D0E0A3
-:101E600069C0C53C41F466E970E08AE090E10E94F7
-:101E70002D02D0E05FC0D0911D38D11158C0CA3BAF
-:101E800039F460E070E086EB9BE00E94E70152C00D
-:101E9000C73CB9F480910E38982F92959F709F5F40
-:101EA000937040E1949F900111248F70822B809356
-:101EB0000E3860E00E94D60B0E94C20A0E947F0C7E
-:101EC00039C0C73B59F581E080934A38C8018F7308
-:101ED0009927892BE9F430910E38232F2F702F5F2B
-:101EE00085E7289F812D1124922F981B9695890FA5
-:101EF000869586958695482F440F942F990F990FB4
-:101F0000940F890F281B822F307F832B80930E38EC
-:101F1000602F80910E380E94D60B0CC0C73E49F44A
-:101F200010924A380E94C20A05C0D0E003C0D1E036
-:101F300001C0D1E08D2FDF91CF911F910F910895B6
-:101F4000CF93AB01C0911D38C1115AC0883039F40C
-:101F500010924938109246381092473858C0813B49
-:101F600069F4809149388150833008F04BC083E098
-:101F70008093493880934838C1E049C0853B31F5AA
-:101F80009B0136952795A1E1B2E40E94241996950C
-:101F9000879596958795969587956EE3689F9001AE
-:101FA000699F300D11244217530789F580914938F4
-:101FB0008A3F68F58B5F8093493880934838109248
-:101FC0004638109247380E947F0C21C08130E1F4DE
-:101FD0008091463890914738019680934638909387
-:101FE000473888389E4098F010924638109247380B
-:101FF00080914938882351F081508093493807C037
-:10200000C1E005C0C1E003C0C1E001C0C82F8C2FF2
-:10201000CF910895AF92BF92CF92DF92EF92FF924D
-:102020000F931F93CF93DF93C82F8B01B0901A3873
-:10203000A090193880911C38882319F0C0907C3802
-:1020400002C0CC24C394F0901B3890911D3891119C
-:10205000F0904C38FF2061F041E0F41659F0809187
-:102060001E388A1560F00F2EF6E9DF2EF02D08C01D
-:10207000DA2C06C00F2EF6E9DF2EF02D01C0DA2C87
-:10208000E0904938B8018C2F0E94A00FD0914938B8
-:10209000DD2339F0E11005C08091523880932E384D
-:1020A0000BC0EE2049F0D11107C060E070E081E97B
-:1020B0009CE00E942D02F3C1C83011F0CA30E9F44F
-:1020C00010924438CA3019F400911E3810E08B2D5C
-:1020D00090E08017910738F48A2D90E008171907CF
-:1020E00010F400931E38C8010E94F1090E94580A9A
-:1020F00081E080930538D0E0D2C1C13C41F460E07A
-:1021000070E081E99CE00E942D02D0E0C8C1C23C91
-:1021100091F4809152388D1520F48D2D0E94580A2B
-:1021200004C080911E380E94580A809152388093D2
-:102130002E38D0E0B4C1C43C59F480E00E940F08AE
-:1021400060E070E083EB9EE00E942D02D0E0A7C12A
-:102150008FE48C0F823008F08FC0D0911C38DD23C3
-:10216000D1F09801ABEABAEA0E94241992958295BF
-:102170008F7089279F7089279C01220F331F820F40
-:10218000931F880F991F880F991F880F991F081791
-:10219000190709F075C1D11109C06091103870E0BC
-:1021A000C8010E94FC18892B09F079C1011511059D
-:1021B000A1F4C23B21F48FEF809305383DC080919C
-:1021C00052388A1520F08FEF8093053835C0B81645
-:1021D00098F181E0809305382FC08091103890E00D
-:1021E00046E351E0849F9001859F300D949F300D10
-:1021F00011242017310740F4209152382A1520F07D
-:102200008FEF8093053818C04CE652E0849F900110
-:10221000859F300D949F300D11242017310760F4F5
-:1022200080915238B81640F00E947F0C60E070E058
-:1022300083EB9EE00E942D023091523820910538A8
-:102240004C2D2403C0011124830F911D0E94F1091C
-:1022500080931E3890915238891721F0A81202C03D
-:102260000E94A50E80911E380E94580A8091523813
-:1022700080932E38D0E013C18FE18C0F823038F478
-:1022800080910538819580930538D0E008C1C13030
-:1022900009F050C00932110519F481E08093053826
-:1022A000DD2381F080912E388D9FC0011124609133
-:1022B000483870E00E941019862F611101C081E03A
-:1022C0000E94580A80917F3890E020915238821BFA
-:1022D000910960912C3870912D386F5F7F4F60931A
-:1022E0002C3870932D38009709F4CCC02CF42E377D
-:1022F00030F440E051E010C040E052E00DC040E456
-:1023000050E00AC0569547959C01992314F42F5F1D
-:102310003F4FC901959587950097A1F74617570735
-:1023200008F0B2C00E94690810922C3810922D3823
-:10233000D0E0B5C0C530B9F480915238893508F481
-:10234000A5C090E0801B910B282F8835910524F0C3
-:102350008739910518F403C028E501C026E92093C8
-:102360007F38D0E09CC0C630C1F490915238809143
-:102370004F38981708F08CC0090F111D90E0801796
-:1023800091073CF00835110514F0C80102C088E53A
-:1023900090E080937F38D0E082C0C73099F490916C
-:1023A0007F3880915238891728F48F5F80937F3867
-:1023B000D0E075C0981708F06DC0815080937F38C9
-:1023C000D0E06DC0D0911D38D11166C0C33CC9F4B6
-:1023D00081E090911C38911180E080931C380E941C
-:1023E000C20A0E94A50E8091523890E00E94F10925
-:1023F00080931E380E94580A8091523880932E385C
-:102400004EC0C33B69F4012B09F049C0FF2021F005
-:102410000F2EF6E9DF2EF02D8D2D0E94580A3FC0B9
-:10242000C33E29F480911E380E94580A38C0C53C2A
-:1024300051F480E00E940F0860E070E084EB94E1CA
-:102440000E942D022CC0C73B39F460E070E088E99F
-:102450009BE00E94E70123C0CA3C49F480915238B6
-:1024600080934E380E94C20A0E947F0C18C0CA3B5B
-:10247000A9F460E070E084EA9BE00E94E7010FC0ED
-:10248000D0E00DC0D0E00BC0D0E009C0D0E007C064
-:10249000D0E005C0D0E003C0D1E001C0D1E08D2F75
-:1024A000DF91CF911F910F91FF90EF90DF90CF9030
-:1024B000BF90AF900895CF93C0E014C08C2F0E94BE
-:1024C0000F0883E190E00E9445098C2F86950E94B9
-:1024D0000F0883E190E00E9445090E946C05882363
-:1024E00029F0CF5FC03450F381E001C080E0882341
-:1024F000F9F060917D3880915738681B81E00E9427
-:102500009F010E94C20AC6E908C08C2F0E940F08D2
-:1025100084E090E00E944509C150C111F6CF0AC085
-:102520008C2F0E940F088DE090E00E944509C15059
-:10253000C111F6CFCF9108950F931F93CF93DF93DF
-:10254000C82F8B01D09149380E94A00FDD2359F08C
-:10255000D0914938D11107C060E070E081E99CE07A
-:102560000E942D022FC1C83029F481E080930338E6
-:10257000D0E028C1C23C21F410924938D0E022C1F9
-:10258000C13B21F5012B69F4809102388E3620F091
-:102590008FEF8093033805C0823018F481E0809378
-:1025A0000338D091023880910338D80FD093023885
-:1025B000D11104C081E08093023804C1DF3608F4F1
-:1025C000FAC08EE680930238D0E0FCC0C13E39F4F8
-:1025D00080910338819580930338D0E0F3C0C23BEB
-:1025E00069F481E08093033880910238823008F4E6
-:1025F000E4C0815080930238D0E0E4C0C13009F0DB
-:10260000DEC00932110519F481E08093033880910E
-:1026100027380E942A0990E0EC01CC0FDD1FCC0F77
-:10262000DD1FCC0FDD1FC81BD90B809126380E94FF
-:102630002A0990910138989FC0011124CD2FC90F0C
-:10264000809125380E942A0990910038989FC001F6
-:102650001124C90F209102388C2F90E0820F911D18
-:1026600020914938213019F520914638309147386A
-:1026700036952795329522952F7023273F70232773
-:1026800044E750E0421B530B849F9001859F300D1F
-:10269000949F300D1124AFE9B6E40E942419969559
-:1026A0008795929582958F7089279F7089270E94C0
-:1026B0000F0800FD08C00E94FD0681709091273828
-:1026C000890F809327389091263880912438890F7C
-:1026D000809326380E94FD069FE6899F912D112444
-:1026E00092959F7025E2929F80191124982F8091D6
-:1026F0002538980F909325380E94FD068F7371F44A
-:102700000E94FD069FE4899F912D11249695969530
-:102710002DE0929F801911248093243880910138F4
-:10272000882349F00E94FD068F7329F480910138B7
-:102730008150809301380E94FD06811119C00E94CA
-:10274000FD0695E7899F212D1124982F921B9695C0
-:10275000920F969596959695392F330F232F220F2A
-:10276000220F230F920F891B809301381092263875
-:1027700080910038833048F00E94FD068F7129F463
-:10278000809100388150809300380E94FD06D82F38
-:10279000DF77B9F40E94FD069BEA899F912D1124F1
-:1027A00096959695292F220F920F292F220F821B83
-:1027B0008093003807C0D0E005C0D0E003C0D1E06E
-:1027C00001C0D0E08D2FDF91CF911F910F9108951F
-:1027D0000F931F93CF93DF93C82F8B01D0910B38AA
-:1027E00081E080934438D33019F48C2F0E949C12DE
-:1027F000C83029F481E08093043880E0B0C0C13C47
-:1028000041F460E070E081E99CE00E942D0280E0EC
-:10281000A6C0C23C69F48D2F90E0019665E070E09F
-:102820000E94101980930B380E94C20A80E097C062
-:10283000C13BB1F5D230C8F400FD86C08D2F90E0C9
-:10284000FC01E75FF74C208130910438231B2830CE
-:1028500018F02F3F21F402C028E001C02EEFFC0148
-:10286000E75FF74C208380E07AC0D43009F06EC077
-:102870009091083880910438890F8093083882300D
-:1028800020F482E08093083805C0893718F088E783
-:1028900080930838809108380E940F0880E05FC05C
-:1028A000C13E49F4809104388195809304380E9498
-:1028B000C20A80E054C0C23B29F581E0809304380D
-:1028C000D23088F400FD44C08D2F90E0FC01E75F1A
-:1028D000F74C20812F3FF1F1FC01E75FF74C2F5FB0
-:1028E000208380E03CC0D430B9F580910838833033
-:1028F00018F0815080930838809108380E940F08A2
-:1029000080E02DC0C23E21F40E94C20A80E027C0B0
-:10291000C53C59F460E070E084EB94E10E942D0224
-:1029200080E00E940F0880E01AC0C130B9F409327B
-:10293000110519F481E08093043880915138080F13
-:102940000093513880E00BC080E009C080E007C0F0
-:1029500080E005C080E003C080E001C081E0DF913D
-:10296000CF911F910F9108950F931F93CF93DF93F2
-:10297000C82F8B01883039F480914438813019F4A4
-:102980008C2F0E94E8138C2F8079803961F481E0CC
-:1029900080934338D0914438D11129C080911E389A
-:1029A0000E940F0829C0803839F41092433880E023
-:1029B0000E940F08D0E020C0C130D9F4D091433834
-:1029C000DD2351F0809144388130A9F4B8018C2F77
-:1029D0000E94E813D82F10C00733114068F081E03F
-:1029E0008093533860E080E00E94D60B05C0D0E0B1
-:1029F00003C0D1E001C0D0E08D2FDF91CF911F91B6
-:102A00000F910895CF93DF93C82FD62F16C08091D2
-:102A10001E380E940F0888EC90E00E944509DD23D3
-:102A200021F080E991E00E94450980E00E940F08B2
-:102A300088EC90E00E944509C150C111E8CFDF91B8
-:102A4000CF9108950E947F0C0E946C0581110E9415
-:102A50005B120E945D0A80914E38811180931E386E
-:102A600061E070E081E99CE00E94E7010895EF9247
-:102A7000FF920F931F93CF93DF9380917A389091B9
-:102A80007B3821E089399207C9F40EC0EC2FF0E0C1
-:102A9000E458FF4F849180530E945F098CE291E0DB
-:102AA0000E944509CF5F01C0C0E0CC3078F360E000
-:102AB00070E081E99CE00E949A02A5C143E1883E52
-:102AC000940779F054E1843B950709F0F0C0209118
-:102AD0004438213009F0EBC020914338222309F417
-:102AE000E6C0C0910B38C23009F120F0C43009F4BF
-:102AF000D3C089C1EC2FF0E0E75FF74CD08186E9C5
-:102B00000E940F08C11105C084E090E00E944509B1
-:102B100005C08D2F869590E00E94450980E00E94B7
-:102B20000F088D2F90E00E9445096DC10E94FD069F
-:102B30008F73082F10E00E94FD0695E2899F212DDA
-:102B40001124982F921B9695920F96959695292F62
-:102B5000220F220F220F291B821BC1E0D0E07E0131
-:102B600002C0EE0CFF1C8A95E2F70E94FD069DEC68
-:102B7000899F912D112496959695292F220F220F2A
-:102B8000920F891B02C0CC0FDD1F8A95E2F7CE0D94
-:102B9000DF1D0E94FD0690E0BE010E941019C80FC3
-:102BA000D91FBE01DD0F880B990B0E9403182AE97B
-:102BB00039E949E95FE30E9467180E94CB17EB01EE
-:102BC0006739710510F0C6E9D0E08C2F0E940F081C
-:102BD000C8010E944509CE019595879595958795E1
-:102BE00095958795F82E81111AC0FF24F39417C08C
-:102BF000C8010E944509CF19D10912F4C0E0D0E004
-:102C00008C2F0E940F080E94FD06837041F4C801BA
-:102C10000E944509CE01959587950E940F08C23004
-:102C2000D10534F70E94FD069FE4899F912D112460
-:102C3000969596952DE0929F80191124C1E0D0E0E1
-:102C400002C0CC0FDD1F8A95E2F70E94FD0690E0DE
-:102C5000BE010E94FC18C80FD91F80E00E940F0817
-:102C6000CE010E944509CFC086E90E940F0882E08C
-:102C700090E00E94450980E00E940F0883E090E008
-:102C80000E944509809108380E940F0884E190E075
-:102C90000E944509CF5F01C0C0E0C43028F380ED39
-:102CA00092E00E94450980E00E940F08ACC042E01B
-:102CB0008E33940791F40E94B10980911D388823C6
-:102CC00039F060E070E081E99CE00E949A029BC0CC
-:102CD00088EE93E00E94450996C052E0843695073D
-:102CE000A9F480917D3890917E38992344F40E9414
-:102CF000B60980917D3881950E94810902C00E94A9
-:102D0000810988EE93E00E9445097DC02EE08F3056
-:102D10009207E9F480918038811175C080911E3846
-:102D20000E940F0884E690E00E94450980E00E941E
-:102D30000F0840910D3828EE33E0429FC001439FB9
-:102D4000900D1124845691090E9445095CC042E00F
-:102D50008438940789F460E083E00E94021561E002
-:102D600083E00E94021560E083E00E94021580ED7E
-:102D700097E00E94450947C08A559E4009F041C02E
-:102D800080918038882351F03EC08C2F0E940F081C
-:102D900082E090E00E944509CF5F01C0C0E08091D1
-:102DA0001E38C81790F30E940F0820910C3886EB4C
-:102DB00091E0AC01249FC001259F900D11240E9439
-:102DC0004509C0911E380FC08C2F0E940F08CF31CB
-:102DD00028F085E090E00E94450904C088E090E07A
-:102DE0000E944509C150C111EFCF80E00E940F0839
-:102DF00080910C385CEB859FC00111240E9445092D
-:102E000002C00E94AA06DF91CF911F910F91FF90FF
-:102E1000EF900895F894E0E4F0E08081877F80836C
-:102E200088EDA89584BF90910001907F9093000158
-:102E300021E030E084BF2093610082EC80B98FE311
-:102E400084B913E018B9E0E0F4E088E0808B828B6D
-:102E5000838B848B858BE0E4F4E081E0838BC0EA94
-:102E6000D0E0888182608883898181608983A0EA3B
-:102E7000B6E081E48C938FEF11968C93A0E0BAE0DA
-:102E800083E411968C9311978EEF90E096968D9334
-:102E90009C9397971C9383898160838B0E94500534
-:102EA000E0E0F6E08DE1868385E5828310925A3872
-:102EB00010925B38828581608287808581608087FF
-:102EC0008881806188831083808581608087789481
-:102ED00081E00E945C0360E070E083EC97E10E9477
-:102EE000E701109250380E9422150E94130380912E
-:102EF000813890918238009751F0609183387091B9
-:102F000084380E942D02109281381092823880916C
-:102F10005338882329F080E00E940F080E943E0663
-:102F20000E943A09109250380E943715DECF8091E6
-:102F30007A3890917B3823E1883E920739F469E131
-:102F400070E08AE090E10E942D0208958A5090413D
-:102F500099F490915238923040F0892F8695969549
-:102F60009695890F0E94580A089560E070E081E903
-:102F70009CE00E942D02089560E070E081E99CE0F1
-:102F80000E942D020895843021F40E94971780E05A
-:102F9000089581E008950E94D2176894B1110C94AD
-:102FA000611808950E94461888F09F5798F0B92F2D
-:102FB0009927B751B0F0E1F0660F771F881F991F6E
-:102FC0001AF0BA95C9F714C0B13091F00E94601898
-:102FD000B1E008950C946018672F782F8827B85FA8
-:102FE00039F0B93FCCF3869577956795B395D9F7C6
-:102FF0003EF490958095709561957F4F8F4F9F4FD0
-:103000000895E89409C097FB3EF4909580957095DB
-:1030100061957F4F8F4F9F4F9923A9F0F92F96E924
-:10302000BB279395F695879577956795B795F11199
-:10303000F8CFFAF4BB0F11F460FF1BC06F5F7F4F36
-:103040008F4F9F4F16C0882311F096E911C0772348
-:1030500021F09EE8872F762F05C0662371F096E851
-:10306000862F70E060E02AF09A95660F771F881F20
-:10307000DAF7880F9695879597F9089557FD905838
-:10308000440F551F59F05F3F71F04795880F97FB2C
-:10309000991F61F09F3F79F08795089512161306E6
-:1030A0001406551FF2CF4695F1DF08C01616170615
-:1030B0001806991FF1CF869571056105089408954A
-:1030C000E894BB2766277727CB0197F908950E94DC
-:1030D0007A180C94EB180E94DD1838F00E94E4185E
-:1030E00020F0952311F00C94D4180C94DA181124C4
-:1030F0000C9461180E943E1870F3959FC1F3950FD0
-:1031000050E0551F629FF001729FBB27F00DB11D6B
-:10311000639FAA27F00DB11DAA1F649F6627B00DFB
-:10312000A11D661F829F2227B00DA11D621F739FE4
-:10313000B00DA11D621F839FA00D611D221F749FF2
-:103140003327A00D611D231F849F600D211D822F39
-:10315000762F6A2F11249F5750409AF0F1F0882360
-:103160004AF0EE0FFF1FBB1F661F771F881F91508D
-:103170005040A9F79E3F510580F00C94D4180C9450
-:1031800061185F3FE4F3983ED4F386957795679591
-:10319000B795F795E7959F5FC1F7FE2B880F911DB7
-:1031A0009695879597F9089597F99F6780E870E05D
-:1031B00060E008959FEF80EC089500240A941616AD
-:1031C000170618060906089500240A941216130615
-:1031D000140605060895092E0394000C11F48823A3
-:1031E00052F0BB0F40F4BF2B11F460FF04C06F5FBF
-:1031F0007F4F8F4F9F4F0895AA1BBB1B51E107C004
-:10320000AA1FBB1FA617B70710F0A61BB70B881F76
-:10321000991F5A95A9F780959095BC01CD01089505
-:1032200097FB072E16F4009407D077FD09D00E9473
-:10323000FC1807FC05D03EF4909581959F4F0895AA
-:10324000709561957F4F0895A29FB001B39FC00113
-:10325000A39F700D811D1124911DB29F700D811DC2
-:103260001124911D089503D0808199270895FC01B0
-:10327000E050FC4E0895262F0E9437190080021658
-:1032800019F00E944719019701970895262FAF93CF
-:10329000BF93E0E0F0E1328131FDFDCFDC01A050D1
-:1032A000BC4E2C932DE924BF23E020830196BF91CF
-:0832B000AF910895F894FFCFDF
-:1032B8001638133810380201000000000000000121
-:1032C8000000000000000000010000210123022589
-:0932D80003270429052C06FF065A
-:1032E100060B180101010004582943030202371893
-:1032F10001050595958E08080D95080101013D010F
-:043301003707020088
-:00000001FF
diff --git a/MODELS b/MODELS
index 25c820d..3071b60 100644
--- a/MODELS
+++ b/MODELS
@@ -1,6 +1,5 @@
 Model	Name                          	MCU
 -----	----                          	---
-0000	thefreeman-lin16dac           	attiny1616
 0111	emisar-d4                     	attiny85
 0112	emisar-d4-219c                	attiny85
 0113	emisar-d4v2                   	attiny1634
@@ -8,7 +7,9 @@ Model	Name                          	MCU
 0115	emisar-d4v2-nofet             	attiny1634
 0121	emisar-d1                     	attiny85
 0122	emisar-d1s                    	attiny85
-0123	emisar-d1v2                   	attiny1634
+0123	emisar-d1v2-7135-fet          	attiny1634
+0124	emisar-d1v2-linear-fet        	attiny1634
+0125	emisar-d1v2-nofet             	attiny1634
 0131	emisar-d4s                    	attiny85
 0132	emisar-d4s-219c               	attiny85
 0133	emisar-d4sv2                  	attiny1634
@@ -49,10 +50,6 @@ Model	Name                          	MCU
 0422	ff-pl47-219                   	attiny85
 0423	ff-pl47g2                     	attiny85
 0441	ff-e01                        	attiny85
-0451	ff-pl09mu						attiny85
-0461	ff-e07-2021						attiny85
-0471	ff-e07c							attiny85
-0481	lume1-ff-6af					attiny1616
 0511	mateminco-mf01s               	attiny85
 0521	mateminco-mf01-mini           	attiny85
 0531	mateminco-mt35-mini           	attiny85
@@ -63,10 +60,7 @@ Model	Name                          	MCU
 0621	blf-lantern                   	attiny85
 0622	blf-lantern-t1616             	attiny1616
 0631	sofirn-sp10-pro               	attiny1616
-0714    wurkkos-ts10                    attiny1616
-0715    wurkkos-ts25                    attiny1616
 1618	gchart-fet1-t1616             	attiny1616
-4221    loneoceans-lume-x1-kr1			attiny1634
 
 Duplicates:
 
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..332f0f3
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,14 @@
+all:
+	./build-all.sh
+
+clean:
+	rm -f *.hex *~ *.elf *.o
+
+todo:
+	@egrep 'TODO:|FIXME:' *.[ch]
+
+models:
+	@./models.py > MODELS
+	@cat MODELS
+
+.phony: clean todo
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..a4bd8fe
--- /dev/null
+++ b/README.md
@@ -0,0 +1 @@
+anduril rev 653, flattened to diff against https://gitea.lan.bofp.co.uk:9004/SiteRelEnby/anduril2/src/branch/loneoceans_lume1-ff-6af_port (branch https://gitea.lan.bofp.co.uk:9004/SiteRelEnby/anduril2/src/branch/loneoceans_lume1-ff-6af_653)
diff --git a/anduril-ui.png b/anduril-ui.png
new file mode 100644
index 0000000..8f60cc8
Binary files /dev/null and b/anduril-ui.png differ
diff --git a/main.c b/anduril.c
similarity index 87%
rename from main.c
rename to anduril.c
index 26b1a17..179e851 100644
--- a/main.c
+++ b/anduril.c
@@ -54,8 +54,8 @@
 
 /********* specific settings for known driver types *********/
 // Anduril config file name (set it here or define it at the gcc command line)
+//#define CONFIGFILE cfg-blf-q8.h
 
-#define CONFIGFILE cfg-lume1-ff-6af.h
 #include "tk.h"
 #include incfile(CONFIGFILE)
 
@@ -122,10 +122,6 @@
 #include "beacon-mode.h"
 #endif
 
-#ifdef USE_BEACONTOWER_MODE
-#include "beacontower-mode.h"
-#endif
-
 #ifdef USE_THERMAL_REGULATION
 #include "tempcheck-mode.h"
 #endif
@@ -181,10 +177,6 @@
 #include "beacon-mode.c"
 #endif
 
-#ifdef USE_BEACONTOWER_MODE
-#include "beacontower-mode.c"
-#endif
-
 #ifdef USE_THERMAL_REGULATION
 #include "tempcheck-mode.c"
 #endif
@@ -246,22 +238,6 @@ void setup() {
 
     #else  // if START_AT_MEMORIZED_LEVEL
 
-        #ifdef USE_SOFT_FACTORY_RESET
-        #if (ATTINY == 25) || (ATTINY == 45) || (ATTINY == 85) || (ATTINY == 1634)
-        uint8_t was_wdt_reset = MCUSR & (1<<WDRF);  // get the Watchdog Reset Flag
-        #elif defined(AVRXMEGA3)  // ATTINY816, 817, etc
-        uint8_t was_wdt_reset = RSTCTRL.RSTFR & RSTCTRL_WDRF_bm;  // get the Watchdog Reset Flag
-        #else
-            #error Unrecognized MCU type
-        #endif
-        
-        // if the power-on was because of a WDT Reset, do a factory reset
-        // (note: this implies that the button is currently held down, 
-        // because a 13H is the only way to get to WDT Reset for dual-switch)
-        if(was_wdt_reset)
-            factory_reset();
-        #endif // USE_SOFT_FACTORY_RESET
-
         // dual switch: e-switch + power clicky
         // power clicky acts as a momentary mode
         load_config();
@@ -335,14 +311,7 @@ void loop() {
     #ifdef USE_THERMAL_REGULATION
     // TODO: blink out therm_ceil during thermal_config_state?
     else if (state == tempcheck_state) {
-        // temperature is type int16_t
-        // but blink_num is uint8_t, so -10 will blink as 246
-        if (temperature < 0){
-            blink_negative();
-            blink_num(-temperature);
-        }
-        else {blink_num(temperature);}
-        //blink_num(temperature);
+        blink_num(temperature);
         nice_delay_ms(1000);
     }
     #endif
@@ -359,12 +328,6 @@ void loop() {
     }
     #endif
 
-    #ifdef USE_BEACONTOWER_MODE
-    else if (state == beacontower_state) {
-        beacontower_mode_iter();
-    }
-    #endif
-
     #ifdef USE_IDLE_MODE
     else {
         // doze until next clock tick
diff --git a/anduril2.atsln b/anduril2.atsln
deleted file mode 100644
index b56e102..0000000
--- a/anduril2.atsln
+++ /dev/null
@@ -1,22 +0,0 @@
-
-Microsoft Visual Studio Solution File, Format Version 12.00
-# Atmel Studio Solution File, Format Version 11.00
-VisualStudioVersion = 14.0.23107.0
-MinimumVisualStudioVersion = 10.0.40219.1
-Project("{54F91283-7BC4-4236-8FF9-10F437C3AD48}") = "anduril2", "anduril2.cproj", "{DCE6C7E3-EE26-4D79-826B-08594B9AD897}"
-EndProject
-Global
-	GlobalSection(SolutionConfigurationPlatforms) = preSolution
-		Debug|AVR = Debug|AVR
-		Release|AVR = Release|AVR
-	EndGlobalSection
-	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-		{DCE6C7E3-EE26-4D79-826B-08594B9AD897}.Debug|AVR.ActiveCfg = Debug|AVR
-		{DCE6C7E3-EE26-4D79-826B-08594B9AD897}.Debug|AVR.Build.0 = Debug|AVR
-		{DCE6C7E3-EE26-4D79-826B-08594B9AD897}.Release|AVR.ActiveCfg = Release|AVR
-		{DCE6C7E3-EE26-4D79-826B-08594B9AD897}.Release|AVR.Build.0 = Release|AVR
-	EndGlobalSection
-	GlobalSection(SolutionProperties) = preSolution
-		HideSolutionNode = FALSE
-	EndGlobalSection
-EndGlobal
diff --git a/anduril2.componentinfo.xml b/anduril2.componentinfo.xml
deleted file mode 100644
index 52c412d..0000000
--- a/anduril2.componentinfo.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<Store xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="AtmelPackComponentManagement">
-	<ProjectComponents />
-</Store>
\ No newline at end of file
diff --git a/anduril2.cproj b/anduril2.cproj
deleted file mode 100644
index 3fdc92f..0000000
--- a/anduril2.cproj
+++ /dev/null
@@ -1,150 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">
-  <PropertyGroup>
-    <SchemaVersion>2.0</SchemaVersion>
-    <ProjectVersion>7.0</ProjectVersion>
-    <ToolchainName>com.Atmel.AVRGCC8.C</ToolchainName>
-    <ProjectGuid>dce6c7e3-ee26-4d79-826b-08594b9ad897</ProjectGuid>
-    <avrdevice>ATtiny1616</avrdevice>
-    <avrdeviceseries>none</avrdeviceseries>
-    <OutputType>Executable</OutputType>
-    <Language>C</Language>
-    <OutputFileName>$(MSBuildProjectName)</OutputFileName>
-    <OutputFileExtension>.elf</OutputFileExtension>
-    <OutputDirectory>$(MSBuildProjectDirectory)\$(Configuration)</OutputDirectory>
-    <AssemblyName>anduril2</AssemblyName>
-    <Name>anduril2</Name>
-    <RootNamespace>anduril2</RootNamespace>
-    <ToolchainFlavour>Native</ToolchainFlavour>
-    <KeepTimersRunning>true</KeepTimersRunning>
-    <OverrideVtor>false</OverrideVtor>
-    <CacheFlash>true</CacheFlash>
-    <ProgFlashFromRam>true</ProgFlashFromRam>
-    <RamSnippetAddress>0x20000000</RamSnippetAddress>
-    <UncachedRange />
-    <preserveEEPROM>true</preserveEEPROM>
-    <OverrideVtorValue>exception_table</OverrideVtorValue>
-    <BootSegment>2</BootSegment>
-    <ResetRule>0</ResetRule>
-    <eraseonlaunchrule>0</eraseonlaunchrule>
-    <EraseKey />
-    <AsfFrameworkConfig>
-      <framework-data xmlns="">
-        <options />
-        <configurations />
-        <files />
-        <documentation help="" />
-        <offline-documentation help="" />
-        <dependencies>
-          <content-extension eid="atmel.asf" uuidref="Atmel.ASF" version="3.49.1" />
-        </dependencies>
-      </framework-data>
-    </AsfFrameworkConfig>
-    <avrtool>com.atmel.avrdbg.tool.atmelice</avrtool>
-    <avrtoolserialnumber>J41800069349</avrtoolserialnumber>
-    <avrdeviceexpectedsignature>0x1E9421</avrdeviceexpectedsignature>
-    <avrtoolinterface>UPDI</avrtoolinterface>
-    <com_atmel_avrdbg_tool_atmelice>
-      <ToolOptions>
-        <InterfaceProperties>
-          <UpdiClock>500000</UpdiClock>
-        </InterfaceProperties>
-        <InterfaceName>UPDI</InterfaceName>
-      </ToolOptions>
-      <ToolType>com.atmel.avrdbg.tool.atmelice</ToolType>
-      <ToolNumber>J41800069349</ToolNumber>
-      <ToolName>Atmel-ICE</ToolName>
-    </com_atmel_avrdbg_tool_atmelice>
-    <avrtoolinterfaceclock>500000</avrtoolinterfaceclock>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
-    <ToolchainSettings>
-      <AvrGcc>
-        <avrgcc.common.Device>-mmcu=attiny1616 -B "%24(PackRepoDir)\atmel\ATtiny_DFP\1.8.332\gcc\dev\attiny1616"</avrgcc.common.Device>
-        <avrgcc.common.outputfiles.hex>True</avrgcc.common.outputfiles.hex>
-        <avrgcc.common.outputfiles.lss>True</avrgcc.common.outputfiles.lss>
-        <avrgcc.common.outputfiles.eep>True</avrgcc.common.outputfiles.eep>
-        <avrgcc.common.outputfiles.srec>True</avrgcc.common.outputfiles.srec>
-        <avrgcc.common.outputfiles.usersignatures>False</avrgcc.common.outputfiles.usersignatures>
-        <avrgcc.compiler.general.ChangeDefaultCharTypeUnsigned>True</avrgcc.compiler.general.ChangeDefaultCharTypeUnsigned>
-        <avrgcc.compiler.general.ChangeDefaultBitFieldUnsigned>True</avrgcc.compiler.general.ChangeDefaultBitFieldUnsigned>
-        <avrgcc.compiler.symbols.DefSymbols>
-          <ListValues>
-            <Value>NDEBUG</Value>
-          </ListValues>
-        </avrgcc.compiler.symbols.DefSymbols>
-        <avrgcc.compiler.directories.IncludePaths>
-          <ListValues>
-            <Value>%24(PackRepoDir)\atmel\ATtiny_DFP\1.8.332\include\</Value>
-          </ListValues>
-        </avrgcc.compiler.directories.IncludePaths>
-        <avrgcc.compiler.optimization.level>Optimize for size (-Os)</avrgcc.compiler.optimization.level>
-        <avrgcc.compiler.optimization.PackStructureMembers>True</avrgcc.compiler.optimization.PackStructureMembers>
-        <avrgcc.compiler.optimization.AllocateBytesNeededForEnum>True</avrgcc.compiler.optimization.AllocateBytesNeededForEnum>
-        <avrgcc.compiler.warnings.AllWarnings>True</avrgcc.compiler.warnings.AllWarnings>
-        <avrgcc.linker.libraries.Libraries>
-          <ListValues>
-            <Value>libm</Value>
-          </ListValues>
-        </avrgcc.linker.libraries.Libraries>
-        <avrgcc.assembler.general.IncludePaths>
-          <ListValues>
-            <Value>%24(PackRepoDir)\atmel\ATtiny_DFP\1.8.332\include\</Value>
-          </ListValues>
-        </avrgcc.assembler.general.IncludePaths>
-      </AvrGcc>
-    </ToolchainSettings>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
-    <ToolchainSettings>
-      <AvrGcc>
-        <avrgcc.common.Device>-mmcu=attiny1616 -B "%24(PackRepoDir)\atmel\ATtiny_DFP\1.8.332\gcc\dev\attiny1616"</avrgcc.common.Device>
-        <avrgcc.common.outputfiles.hex>True</avrgcc.common.outputfiles.hex>
-        <avrgcc.common.outputfiles.lss>True</avrgcc.common.outputfiles.lss>
-        <avrgcc.common.outputfiles.eep>True</avrgcc.common.outputfiles.eep>
-        <avrgcc.common.outputfiles.srec>True</avrgcc.common.outputfiles.srec>
-        <avrgcc.common.outputfiles.usersignatures>False</avrgcc.common.outputfiles.usersignatures>
-        <avrgcc.compiler.general.ChangeDefaultCharTypeUnsigned>True</avrgcc.compiler.general.ChangeDefaultCharTypeUnsigned>
-        <avrgcc.compiler.general.ChangeDefaultBitFieldUnsigned>True</avrgcc.compiler.general.ChangeDefaultBitFieldUnsigned>
-        <avrgcc.compiler.symbols.DefSymbols>
-          <ListValues>
-            <Value>DEBUG</Value>
-          </ListValues>
-        </avrgcc.compiler.symbols.DefSymbols>
-        <avrgcc.compiler.directories.IncludePaths>
-          <ListValues>
-            <Value>%24(PackRepoDir)\atmel\ATtiny_DFP\1.8.332\include\</Value>
-          </ListValues>
-        </avrgcc.compiler.directories.IncludePaths>
-        <avrgcc.compiler.optimization.level>Optimize debugging experience (-Og)</avrgcc.compiler.optimization.level>
-        <avrgcc.compiler.optimization.PackStructureMembers>True</avrgcc.compiler.optimization.PackStructureMembers>
-        <avrgcc.compiler.optimization.AllocateBytesNeededForEnum>True</avrgcc.compiler.optimization.AllocateBytesNeededForEnum>
-        <avrgcc.compiler.optimization.DebugLevel>Default (-g2)</avrgcc.compiler.optimization.DebugLevel>
-        <avrgcc.compiler.warnings.AllWarnings>True</avrgcc.compiler.warnings.AllWarnings>
-        <avrgcc.linker.libraries.Libraries>
-          <ListValues>
-            <Value>libm</Value>
-          </ListValues>
-        </avrgcc.linker.libraries.Libraries>
-        <avrgcc.assembler.general.IncludePaths>
-          <ListValues>
-            <Value>%24(PackRepoDir)\atmel\ATtiny_DFP\1.8.332\include\</Value>
-          </ListValues>
-        </avrgcc.assembler.general.IncludePaths>
-        <avrgcc.assembler.debugging.DebugLevel>Default (-Wa,-g)</avrgcc.assembler.debugging.DebugLevel>
-      </AvrGcc>
-    </ToolchainSettings>
-  </PropertyGroup>
-  <ItemGroup>
-    <Compile Include="cfg-lume1-ff-6af.h">
-      <SubType>compile</SubType>
-    </Compile>
-    <Compile Include="hwdef-cfg-lume1-ff-6af.h">
-      <SubType>compile</SubType>
-    </Compile>
-    <Compile Include="main.c">
-      <SubType>compile</SubType>
-    </Compile>
-  </ItemGroup>
-  <Import Project="$(AVRSTUDIO_EXE_PATH)\\Vs\\Compiler.targets" />
-</Project>
\ No newline at end of file
diff --git a/battcheck-mode.c b/battcheck-mode.c
index e7e9185..87dfb89 100644
--- a/battcheck-mode.c
+++ b/battcheck-mode.c
@@ -44,8 +44,6 @@ uint8_t battcheck_state(Event event, uint16_t arg) {
         set_state(beacon_state, 0);
         #elif defined(USE_SOS_MODE) && defined(USE_SOS_MODE_IN_BLINKY_GROUP)
         set_state(sos_state, 0);
-        #elif defined(USE_BEACONTOWER_MODE)
-        set_state(beacontower_state, 0);
         #endif
         return MISCHIEF_MANAGED;
     }
diff --git a/beacon-mode.c b/beacon-mode.c
index c29cea2..6772f2e 100644
--- a/beacon-mode.c
+++ b/beacon-mode.c
@@ -45,8 +45,6 @@ uint8_t beacon_state(Event event, uint16_t arg) {
     else if (event == EV_2clicks) {
         #if defined(USE_SOS_MODE) && defined(USE_SOS_MODE_IN_BLINKY_GROUP)
         set_state(sos_state, 0);
-        #elif defined(USE_BEACONTOWER_MODE)
-        set_state(beacontower_state, 0);
         #elif defined(USE_BATTCHECK)
         set_state(battcheck_state, 0);
         #elif defined(USE_THERMAL_REGULATION)
diff --git a/beacontower-mode.c b/beacontower-mode.c
deleted file mode 100644
index 9a08f4e..0000000
--- a/beacontower-mode.c
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * beacontower-mode.c Beacon/Obstruction Tower mode for Anduril.
- *
- * 2020 - loneoceans
- * Copyright (C) 2017 Selene Scriven
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-
-/*
- Beacon-Tower mode:
-
- 	Similar to Beacon, but emulates the gradual turn on and off of traditional
-    large incandescent bulbs of obstruction/beacon towers. The brightness and 
-    the flashes per seconds (FPS) are configurable, with the default being the 
-    standard 30 FPM, with roughly 50% duty cycle (slightly more for On).
-
-       - Brightness is the user's last-ramped level, so set this in 
-         ramping mode before starting beacon mode.
-
-       - FPM is configured by holding the button. The light will blink
-         once per second while holding the button. Release it after the 
-         desired amount of time has passed, to set a new beacon flashing
-         interval. 
-
-         For example, to set a 5-second interval , hold the button for 5 seconds.
-
-         Suppose the period of the light is set as t seconds:
-         
-         - Turn on ramp = nominally ~t/8s at ramp level ~60.
-         - On at full brightness = 7/16*t s 
-         - Turn off ramp = nominally ~t/4s at ramp level ~60
-         - Off = 3/16 *ts
-         
-         Increasing the brightness also increases the time taken to ramp up
-         and down, just like an incandescent would.
-
- Access from blinky / utility modes; the sequence is:
-
-  - Battery check.
-  - Temperature check (if light has a temperature sensor).
-  - Beacon mode.
-  - SOS mode (if enabled).
-  - Beacon Tower mode (if enabled).
-  
-*/
-
-#ifndef BEACONTOWER_MODE_C
-#define BEACONTOWER_MODE_C
-
-#include "beacontower-mode.h"
-
-inline void beacontower_mode_iter() {
-    // one iteration of main loop()
-    if (! button_last_state) {
-    	for (uint8_t i =0; i<memorized_level;i++){
-    		set_level(i);
-    		nice_delay_ms(2);
-    	}
-    	set_level(memorized_level);
-        nice_delay_ms(beacontower_seconds*438);
-		for (uint8_t i  = memorized_level;i>0;i--){
-    		set_level(i);
-            if (i>30) {nice_delay_ms(5);}
-            else {nice_delay_ms(8);}
-    	}
-        set_level(0);
-        nice_delay_ms(beacontower_seconds*188);
-    }
-}
-
-uint8_t beacontower_state(Event event, uint16_t arg) {
-    // 1 click: off
-    if (event == EV_1click) {
-        set_state(off_state, 0);
-        return MISCHIEF_MANAGED;
-    }
-    // TODO: use sleep ticks to measure time between pulses,
-    //       to save power
-
-    // 2 clicks: next blinky mode
-    else if (event == EV_2clicks) {
-    	#if defined(USE_BATTCHECK_MODE)
-        set_state(battcheck_state, 0);
-        #elif defined(USE_THERMAL_REGULATION)
-        set_state(tempcheck_state, 0);
-        #elif defined(USE_BEACON_MODE)
-        set_state(beacon_state, 0);
-        #elif defined(USE_SOS_MODE) && defined(USE_SOS_MODE_IN_BLINKY_GROUP)
-        set_state(sos_state, 0);
-        #endif
-        return MISCHIEF_MANAGED;
-    }
-    // hold: configure beacon tower timing
-    else if (event == EV_click1_hold) {
-        if (0 == (arg % TICKS_PER_SECOND)) {
-            blink_once();
-        }
-        return MISCHIEF_MANAGED;
-    }
-    // release hold: save new timing
-    else if (event == EV_click1_hold_release) {
-        beacontower_seconds = 1 + (arg / TICKS_PER_SECOND);
-        save_config();
-        // to save beacontower_seconds? TODO
-        return MISCHIEF_MANAGED;
-    }
-    return EVENT_NOT_HANDLED;
-}
-
-
-#endif
-
diff --git a/beacontower-mode.h b/beacontower-mode.h
deleted file mode 100644
index 7531d7c..0000000
--- a/beacontower-mode.h
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * beacontower-mode.h: Beacon/Obstruction Tower mode for Anduril.
- *
- * 2020 - loneoceans
- * Copyright (C) 2017 Selene Scriven
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef BEACONTOWER_MODE_H
-#define BEACONTOWER_MODE_H
-
-// beacon tower flash timing (30FPS default)
-uint8_t beacontower_seconds = 2;
-
-// beacon mode
-uint8_t beacontower_state(Event event, uint16_t arg);
-
-inline void beacontower_mode_iter();
-
-#endif
diff --git a/build-all.sh b/build-all.sh
new file mode 100755
index 0000000..b9f6d15
--- /dev/null
+++ b/build-all.sh
@@ -0,0 +1,57 @@
+#!/bin/sh
+
+# Usage: build-all.sh [pattern]
+# If pattern given, only build targets which match.
+
+if [ ! -z "$1" ]; then
+  SEARCH="$1"
+fi
+
+UI=anduril
+
+date '+#define VERSION_NUMBER "%Y%m%d"' > version.h
+
+PASS=0
+FAIL=0
+PASSED=''
+FAILED=''
+
+for TARGET in cfg-*.h ; do
+
+  # maybe limit builds to a specific pattern
+  if [ ! -z "$SEARCH" ]; then
+    echo "$TARGET" | grep -i "$SEARCH" > /dev/null
+    if [ 0 != $? ]; then continue ; fi
+  fi
+
+  # friendly name for this build
+  NAME=$(echo "$TARGET" | perl -ne '/cfg-(.*).h/ && print "$1\n";')
+  echo "===== $NAME ====="
+
+  # figure out MCU type
+  ATTINY=$(grep 'ATTINY:' $TARGET | awk '{ print $3 }')
+  if [ -z "$ATTINY" ]; then ATTINY=85 ; fi
+
+  # try to compile
+  echo ../../../bin/build.sh $ATTINY "$UI" "-DCONFIGFILE=${TARGET}"
+  ../../../bin/build.sh $ATTINY "$UI" "-DCONFIGFILE=${TARGET}"
+
+  # track result, and rename compiled files
+  if [ 0 = $? ] ; then
+    mv -f "$UI".hex "$UI".$NAME.hex
+    PASS=$(($PASS + 1))
+    PASSED="$PASSED $NAME"
+  else
+    echo "ERROR: build failed"
+    FAIL=$(($FAIL + 1))
+    FAILED="$FAILED $NAME"
+  fi
+
+done
+
+# summary
+echo "===== $PASS builds succeeded, $FAIL failed ====="
+#echo "PASS: $PASSED"
+if [ 0 != $FAIL ]; then
+  echo "FAIL:$FAILED"
+fi
diff --git a/cfg-lume1-ff-6af.h b/cfg-lume1-ff-6af.h
deleted file mode 100644
index 36a2494..0000000
--- a/cfg-lume1-ff-6af.h
+++ /dev/null
@@ -1,188 +0,0 @@
-
-/* LUME1-FF-6AF Driver with ATTINY1616
- *
- *  Configuration File for 2022 Lume1 Driver with 6A Buck + FET
- *  Used in FireflyLite E12R, E07X, PL09mu etc (2022)
- *
- *  Anduril 2 Firmware by Selene Scriven (R653)
- *  - Lume1-FF-6AF
- *  - 27 Dec 2022
- *  - Attiny1616
- * 
- *  For more information: 
- *  - www.loneoceans.com/labs/
- *  - Manual: http://toykeeper.net/torches/fsm/anduril2/anduril-manual.txt
- */
-
-#define MODEL_NUMBER "0481"         // lume1-ff-6af 2022 with attiny1616
-#include "hwdef-lume1-ff-6af.h"
-
-//***************************************
-//**       THERMAL SETTINGS            **
-//***************************************
-
-// set this light for 50C thermal ceiling
-#undef DEFAULT_THERM_CEIL
-#define DEFAULT_THERM_CEIL 55
-//#define MAX_THERM_CEIL 70 // default maximum value
-
-// drop from turbo at therm_ceil+TURBO_TEMP_EXTRA
-#define TURBO_TEMP_EXTRA 7 // in celsius
-
-// stop panicking at ~3A (not sure of this numbers yet since it depends on the host..)
-#define THERM_FASTER_LEVEL 125			   	 // About 8.9W
-#define MIN_THERM_STEPDOWN 88			          // About 2.2W
-#define THERM_NEXT_WARNING_THRESHOLD 16		 // accumulate less error before adjusting (default 24)
-#define THERM_RESPONSE_MAGNITUDE 64  	   	 // bigger adjustments (default 64)
-
-// easier access to thermal config mode, similar to Emisar, Noctigon
-#define USE_TENCLICK_THERMAL_CONFIG
-
-// optional, makes initial turbo step-down faster so first peak isn't as hot
-// FET mode can run very very hot, so be extra careful
-//#define THERM_HARD_TURBO_DROP
-
-//***************************************
-//**      RAMPS AND OPERATIONS         **
-//***************************************
-
-// Uncomment to get Max Turbo on 2C from Off
-//#define USE_2C_MAX_TURBO
-
-// enable 2 click turbo
-#define DEFAULT_2C_STYLE 1
-
-// set this light to use stepped ramp by default (instead of smooth)
-#undef RAMP_STYLE
-#define RAMP_STYLE 1
-
-// the entire ramp is regulated; don't blink halfway up
-#ifdef BLINK_AT_RAMP_MIDDLE
-#undef BLINK_AT_RAMP_MIDDLE
-#endif
-
-// We're abusing the Dynamic PWM functionality to set the VREF instead of PWM TOP (from GChart's work)
-#ifdef USE_SET_LEVEL_GRADUALLY
-#undef USE_SET_LEVEL_GRADUALLY
-#endif
-
-// NOTE: in ramp-mode-fsm.h, USE_SET_LEVEL_GRADUALLY is set anyway
-// Disabling gradual ramping will require overhauling the ramp code
-// Uncomment the following for most flashlights
-//#define USE_SET_LEVEL_GRADUALLY_SUNSET
-
-// Enable usage of multiple power paths
-#define USE_MULTIPLE_POWER_PATH
-
-// RAMP TABLE FOR BEHAVIOR USING LEVELS 1-149 as BUCK, 150 as FET
-#define RAMP_LENGTH 150
-//#define RAMP_LENGTH 149
-#define USE_DYN_PWM
-
-// NOTE --> RAMP TABLES MUST CORRESPOND TO THESE VALUES!
-#define LED_PATH1_PIN_LEVEL_MIN 1
-#define LED_PATH2_PIN_LEVEL_MIN 13
-#define LED_PATH3_PIN_LEVEL_MIN 48
-#define LED_FET_PIN_LEVEL_MIN 150
-
-#define PWM_CHANNELS 2
-#define PWM_BITS 8 
-
-// =========== UDR x^4 curves ===========
-
-// for 255 DAC UDR - with FET
-
-// New ramp level with UDR is ~13.7million dynamic range (up from 3million)
-#define PWM1_LEVELS 1, 2, 7, 17, 35, 65, 111, 39, 135, 198, 206, 170, 3, 4, 14, 18, 5, 28, 34, 41, 11, 22, 26, 83, 97, 113, 131, 151, 38, 197, 82, 253, 142, 160, 179, 88, 163, 181, 200, 221, 146, 160, 176, 192, 210, 229, 249, 13, 14, 15, 17, 18, 7, 21, 5, 24, 26, 28, 30, 7, 34, 36, 14, 15, 16, 46, 49, 19, 55, 58, 62, 65, 69, 16, 28, 80, 31, 89, 94, 36, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 36, 38, 39, 41, 43, 45, 46, 48, 50, 52, 55, 57, 59, 61, 64, 66, 69, 71, 74, 76, 79, 82, 85, 88, 91, 94, 98, 101, 104, 108, 112, 115, 119, 123, 127, 131, 135, 139, 144, 148, 153, 158, 162, 167, 172, 177, 183, 188, 194, 199, 205, 211, 217, 223, 229, 235, 242, 248, 255, 0
-// note - level 1 is basically invisible, level 2 is visible, level 3 is ultra low
-// for 255 PWM FET
-#define PWM2_LEVELS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255
-// NOTE: CMPn = BOTTOM will produce a static low signal on WOn while CMPn > TOP will produce a static high signal on
-
-// for NO-FET UDR (149 levels)
-//#define PWM1_LEVELS 1, 2, 7, 17, 35, 65, 111, 39, 135, 198, 206, 170, 3, 4, 14, 18, 5, 28, 34, 41, 11, 22, 26, 83, 97, 113, 131, 151, 38, 197, 82, 253, 142, 160, 179, 88, 163, 181, 200, 221, 146, 160, 176, 192, 210, 229, 249, 13, 14, 15, 17, 18, 7, 21, 5, 24, 26, 28, 30, 7, 34, 36, 14, 15, 16, 46, 49, 19, 55, 58, 62, 65, 69, 16, 28, 80, 31, 89, 94, 36, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 36, 38, 39, 41, 43, 45, 46, 48, 50, 52, 55, 57, 59, 61, 64, 66, 69, 71, 74, 76, 79, 82, 85, 88, 91, 94, 98, 101, 104, 108, 112, 115, 119, 123, 127, 131, 135, 139, 144, 148, 153, 158, 162, 167, 172, 177, 183, 188, 194, 199, 205, 211, 217, 223, 229, 235, 242, 248, 255
-// for NO-FET FET (149 levels)
-//#define PWM2_LEVELS 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-
-#define PWM_TOPS 16, 16, 16, 16, 16, 16, 16, 18, 17, 17, 20, 18, 20, 20, 16, 16, 18, 16, 16, 16, 18, 20, 20, 16, 16, 16, 16, 16, 18, 16, 20, 16, 17, 17, 17, 18, 20, 20, 20, 20, 18, 18, 18, 18, 18, 18, 18, 16, 16, 16, 16, 16, 20, 16, 18, 16, 16, 16, 16, 18, 16, 16, 20, 20, 20, 16, 16, 20, 16, 16, 16, 16, 16, 18, 20, 16, 20, 16, 16, 20, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18    
-#define PWM2_TOPS 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
-
-#ifdef USE_DYNAMIC_UNDERCLOCKING
-#undef USE_DYNAMIC_UNDERCLOCKING
-#endif
-
-//#define MAX_1x7135 34
-//#define HALFSPEED_LEVEL 14
-//#define QUARTERSPEED_LEVEL 6
-
-#define DEFAULT_LEVEL 61  // About ~0.5W
-#define MAX_1x7135 88     // About ~2.2W
-
-#define RAMP_SMOOTH_FLOOR 8
-#define RAMP_SMOOTH_CEIL 149  // Level 150 is when Buck is off and FET is ON 100%
-
-#define RAMP_DISCRETE_FLOOR 8
-#define RAMP_DISCRETE_CEIL RAMP_SMOOTH_CEIL
-#define RAMP_DISCRETE_STEPS 5
-
-#define SIMPLE_UI_FLOOR 13
-#define SIMPLE_UI_CEIL 142  // 142 for 5A max
-#define SIMPLE_UI_STEPS 5
-
-// Turn on Buck from level 1 to 149, but not 150
-// Level 150 is when Buck is off and FET is ON 100%
-#define LED_ENABLE_PIN_LEVEL_MIN 1
-#define LED_ENABLE_PIN_LEVEL_MAX 149
-
-//***************************************
-//**       AUX LEDs and MISC           **
-//***************************************
-
-// this light has three aux LED channels: R, G, B
-#define USE_AUX_RGB_LEDS
-#define AUXLED_RGB_DIFFERENT_PORTS 
-
-// it has no independent LED in the button
-//#define USE_BUTTON_LED
-
-// off mode: low (1)
-// lockout: blinking (3)
-//#define INDICATOR_LED_DEFAULT_MODE ((3<<2) + 1)
-
-// the button lights up
-//#define USE_INDICATOR_LED
-
-// the button is visible while main LEDs are on
-//#define USE_INDICATOR_LED_WHILE_RAMPING
-
-// the aux LEDs are front-facing, so turn them off while main LEDs are on
-// TODO: the whole "indicator LED" thing needs to be refactored into
-//       "aux LED(s)" and "button LED(s)" since they work a bit differently
-#ifdef USE_INDICATOR_LED_WHILE_RAMPING
-#undef USE_INDICATOR_LED_WHILE_RAMPING
-#endif
-
-#define RGB_LED_OFF_DEFAULT 0x18  // low, voltage
-#define RGB_LED_LOCKOUT_DEFAULT 0x37  // blinking, rainbow
-
-// enable blinking aux LEDs
-#define TICK_DURING_STANDBY
-#define STANDBY_TICK_SPEED 3  // every 0.128 s
-//#define STANDBY_TICK_SPEED 4  // every 0.256 s
-//#define STANDBY_TICK_SPEED 5  // every 0.512 s
-
-#define USE_SOS_MODE
-#define USE_SOS_MODE_IN_BLINKY_GROUP
-
-#define USE_BEACONTOWER_MODE
-
-// party strobe on-time
-#define PARTY_STROBE_ONTIME 4
-
-// attiny1616 has enough space to smooth out voltage readings
-#define USE_VOLTAGE_LOWPASS
-
-// can't reset the normal way because power is connected before the button
-#define USE_SOFT_FACTORY_RESET   // can reset with 13H but why not include this as well..
-
-// ======================================
\ No newline at end of file
diff --git a/config-mode.c b/config-mode.c
index c096588..dce3075 100644
--- a/config-mode.c
+++ b/config-mode.c
@@ -47,8 +47,7 @@ uint8_t config_state_base(
     static uint8_t config_step;
     if (event == EV_enter_state) {
         config_step = 0;
-        //set_level(0);
-        set_level(RAMP_SIZE * 5 / 8);   // make this brighter because light will be on
+        set_level(0);
         // if button isn't held, configure first menu item
         if (! button_last_state) {
             config_step ++;
@@ -67,7 +66,7 @@ uint8_t config_state_base(
                 config_step ++;
                 // blink when config step advances
                 if (config_step <= num_config_steps)
-                    set_level(RAMP_SIZE * 4 / 8);   // original is 3/8
+                    set_level(RAMP_SIZE * 3 / 8);
             }
             else {
                 // stay on at a low level to indicate menu is active
diff --git a/fsm-adc.c b/fsm-adc.c
index a73e71e..0aaac0e 100644
--- a/fsm-adc.c
+++ b/fsm-adc.c
@@ -485,10 +485,7 @@ static inline void ADC_temperature_handler() {
             warning_threshold = THERM_NEXT_WARNING_THRESHOLD - (uint8_t)howmuch;
 
             // send a warning
-            if ((temperature < (therm_ceil + TURBO_TEMP_EXTRA))&&(actual_level==RAMP_LENGTH)){;} // MODIFIED FOR LUME1-1616 FOR HARD STEP FROM TURBO ###############################
-            //else {set_level_gradually(stepdown);}
-            else{emit(EV_temperature_high, howmuch);}
-            //emit(EV_temperature_high, howmuch);
+            emit(EV_temperature_high, howmuch);
         }
     }
 
diff --git a/fsm-misc.c b/fsm-misc.c
index 6d25a5e..baa88a4 100644
--- a/fsm-misc.c
+++ b/fsm-misc.c
@@ -47,7 +47,7 @@ uint8_t blink_digit(uint8_t num) {
 
     // "zero" digit gets a single short blink
     uint8_t ontime = BLINK_SPEED * 2 / 12;
-    if (!num) { ontime = 25; num ++; }
+    if (!num) { ontime = 8; num ++; }
 
     for (; num>0; num--) {
         set_level(BLINK_BRIGHTNESS);
@@ -57,20 +57,6 @@ uint8_t blink_digit(uint8_t num) {
     }
     return nice_delay_ms(BLINK_SPEED * 8 / 12);
 }
-void blink_negative(){
-    // "negative" symbol gets a single long blink
-    uint8_t ontime = BLINK_SPEED * 2 / 12;
-    set_level(BLINK_BRIGHTNESS);
-    nice_delay_ms(ontime);
-    nice_delay_ms(ontime);
-    nice_delay_ms(ontime);
-    set_level(0);
-    nice_delay_ms(ontime);
-    nice_delay_ms(ontime);
-    nice_delay_ms(ontime);
-    nice_delay_ms(ontime);
-    nice_delay_ms(ontime);
-}
 #endif
 
 #ifdef USE_BLINK_BIG_NUM
@@ -241,42 +227,13 @@ void button_led_set(uint8_t lvl) {
 void rgb_led_set(uint8_t value) {
     // value: 0b00BBGGRR
     uint8_t pins[] = { AUXLED_R_PIN, AUXLED_G_PIN, AUXLED_B_PIN };
-    
     for (uint8_t i=0; i<3; i++) {
         uint8_t lvl = (value >> (i<<1)) & 0x03;
         uint8_t pin = pins[i];
-
         switch (lvl) {
         
             #ifdef AVRXMEGA3  // ATTINY816, 817, etc
 
-            #ifdef AUXLED_RGB_DIFFERENT_PORTS
-
-            case 0:  // LED off
-                if (i==0){AUXLED_R_PORT.DIRSET = (1 << pin); AUXLED_R_PORT.OUTCLR = (1 << pin);}
-                if (i==1){AUXLED_G_PORT.DIRSET = (1 << pin); AUXLED_G_PORT.OUTCLR = (1 << pin);}
-                if (i==2){AUXLED_B_PORT.DIRSET = (1 << pin); AUXLED_B_PORT.OUTCLR = (1 << pin);}
-
-                break;
-
-            case 1:  // LED low
-
-                if (i==0){AUXLED_R_PORT.DIRCLR = (1 << pin); *((uint8_t *)&AUXLED_R_PORT + 0x10 + pin) = PORT_PULLUPEN_bm;}
-                if (i==1){AUXLED_G_PORT.DIRCLR = (1 << pin); *((uint8_t *)&AUXLED_G_PORT + 0x10 + pin) = PORT_PULLUPEN_bm;}
-                if (i==2){AUXLED_B_PORT.DIRCLR = (1 << pin); *((uint8_t *)&AUXLED_B_PORT + 0x10 + pin) = PORT_PULLUPEN_bm;}
-                
-                break;
-
-            default:  // LED high
-
-                if (i==0){AUXLED_R_PORT.DIRSET = (1 << pin); AUXLED_R_PORT.OUTSET = (1 << pin);}
-                if (i==1){AUXLED_G_PORT.DIRSET = (1 << pin); AUXLED_G_PORT.OUTSET = (1 << pin);}
-                if (i==2){AUXLED_B_PORT.DIRSET = (1 << pin); AUXLED_B_PORT.OUTSET = (1 << pin);}
-
-                break;
-
-            #else
-
             case 0:  // LED off
                 AUXLED_RGB_PORT.DIRSET = (1 << pin); // set as output
                 AUXLED_RGB_PORT.OUTCLR = (1 << pin); // set output low
@@ -291,8 +248,6 @@ void rgb_led_set(uint8_t value) {
                 AUXLED_RGB_PORT.OUTSET = (1 << pin); // set as high
                 break;
 
-            #endif 
-
             #else
         
             case 0:  // LED off
diff --git a/fsm-misc.h b/fsm-misc.h
index fced399..7d93cb5 100644
--- a/fsm-misc.h
+++ b/fsm-misc.h
@@ -26,7 +26,7 @@ void auto_clock_speed();
 
 #if defined(USE_BLINK_NUM) || defined(USE_BLINK_DIGIT)
 #ifndef BLINK_BRIGHTNESS
-#define BLINK_BRIGHTNESS (MAX_LEVEL/5)
+#define BLINK_BRIGHTNESS (MAX_LEVEL/6)
 #endif
 uint8_t blink_digit(uint8_t num);
 #endif
@@ -34,7 +34,6 @@ uint8_t blink_digit(uint8_t num);
 #ifdef USE_BLINK_NUM
 //#define USE_BLINK
 uint8_t blink_num(uint8_t num);
-void blink_negative();
 #endif
 
 /*
diff --git a/fsm-ramping.c b/fsm-ramping.c
index 423921f..ad5b22c 100644
--- a/fsm-ramping.c
+++ b/fsm-ramping.c
@@ -82,15 +82,6 @@ void set_level(uint8_t level) {
 
     //TCCR0A = PHASE;
     if (level == 0) {
-
-        // disable power paths
-        #ifdef USE_MULTIPLE_POWER_PATH
-            power_path_level = 0;
-            LED_PATH1_PORT &= ~LED_PATH1_PIN;
-            LED_PATH2_PORT &= ~LED_PATH2_PIN;
-            LED_PATH3_PORT &= ~LED_PATH3_PIN;
-        #endif
-
         #if PWM_CHANNELS >= 1
         PWM1_LVL = 0;
         #endif
@@ -123,8 +114,7 @@ void set_level(uint8_t level) {
         #endif
         // disable the power channel, if relevant
         #ifdef LED_ENABLE_PIN
-        LED_ENABLE_PORT &= ~LED_ENABLE_PIN;
-        //LED_ENABLE_PORT &= ~(1 << LED_ENABLE_PIN);
+        LED_ENABLE_PORT &= ~(1 << LED_ENABLE_PIN);
         #endif
         #ifdef LED2_ENABLE_PIN
         LED2_ENABLE_PORT &= ~(1 << LED2_ENABLE_PIN);
@@ -138,17 +128,14 @@ void set_level(uint8_t level) {
             #endif
 
             #ifndef LED_ENABLE_PIN_LEVEL_MIN
-            //LED_ENABLE_PORT |= (1 << LED_ENABLE_PIN);
-            LED_ENABLE_PORT |= LED_ENABLE_PIN;
+            LED_ENABLE_PORT |= (1 << LED_ENABLE_PIN);
             #else
             // only enable during part of the ramp
             if ((level >= LED_ENABLE_PIN_LEVEL_MIN)
                     && (level <= LED_ENABLE_PIN_LEVEL_MAX))
-                LED_ENABLE_PORT |= LED_ENABLE_PIN;
-                //LED_ENABLE_PORT |= (1 << LED_ENABLE_PIN);
+                LED_ENABLE_PORT |= (1 << LED_ENABLE_PIN);
             else  // disable during other parts of the ramp
-                LED_ENABLE_PORT &= ~LED_ENABLE_PIN;
-                //LED_ENABLE_PORT &= ~(1 << LED_ENABLE_PIN);
+                LED_ENABLE_PORT &= ~(1 << LED_ENABLE_PIN);
             #endif
 
             // for drivers with a slow regulator chip (eg, boost converter),
@@ -235,11 +222,6 @@ void set_level(uint8_t level) {
                 #endif
             }
         #endif
-
-        #ifdef USE_MULTIPLE_POWER_PATH
-        set_power_path(level);
-        #endif
-
     }
     #ifdef USE_TINT_RAMPING
     update_tint();
@@ -431,68 +413,6 @@ void update_tint() {
 }
 #endif  // ifdef USE_TINT_RAMPING
 
-#ifdef USE_MULTIPLE_POWER_PATH
-void set_power_path(uint8_t ramp_level){
-    // Handle dynamic power pathing 
-    ramp_level++; // convert to 1-based indexing
-
-    /* Check if the ramp level corresponds to a new power path or not.
-     * If it doesn't, no need to change any thing.
-     * Original AVR 8BIT Implementation is via filtered PWM, so some delays required.
-     * AVR 8BIT
-     *   Does it come from the top (brighter) or bottom (dimmer)?
-     *   If it is the top, ok to jump from lower R path to higher R
-     *   If from bottom, it takes some time constant x 3~ before the
-     *    reference voltage drops from high to low, so it a delay is
-     *    needed to be added. This delay is called infrequently so 
-     *    it is ok to hard-code a busy-loop delay to avoid TCPWMs.
-     *  AVR 1-Series
-     *   Use DAC instead of PWM
-     *   No longer needs a delay!
-     */
-
-    if (ramp_level>=LED_PATH3_PIN_LEVEL_MIN){
-        if (power_path_level != 3){
-            // High Mode
-            // Delay: i=3000.. ~1.56ms, 5000 .. 3.43ms
-            //for(uint16_t i = 0; i<999; i++){;} // 7999 found to be good for 8 or 10 bit PWM
-            //LED_PATH1_PORT &= ~LED_PATH1_PIN;
-            //LED_PATH2_PORT &= ~LED_PATH2_PIN;
-            LED_PATH1_PORT |= LED_PATH1_PIN;
-            LED_PATH2_PORT |= LED_PATH2_PIN;
-            LED_PATH3_PORT |= LED_PATH3_PIN;
-            power_path_level = 3;
-        }
-    }
-    else if (ramp_level>=LED_PATH2_PIN_LEVEL_MIN){
-        if (power_path_level != 2){
-            // Low Mode
-            /*
-            if (power_path_level<2){
-                // ramping from low to higher 
-                for(uint16_t i = 0; i<999; i++){;}
-            }
-            */
-            //LED_PATH1_PORT &= ~LED_PATH1_PIN;
-            LED_PATH1_PORT |= LED_PATH1_PIN;
-            LED_PATH2_PORT |= LED_PATH2_PIN;
-            LED_PATH3_PORT &= ~LED_PATH3_PIN;
-            power_path_level = 2;
-        }
-    }
-    else if (ramp_level>=LED_PATH1_PIN_LEVEL_MIN){
-        if (power_path_level != 1){
-            // Moon Mode
-            // no need for delays
-            LED_PATH1_PORT |= LED_PATH1_PIN;
-            LED_PATH2_PORT &= ~LED_PATH2_PIN;
-            LED_PATH3_PORT &= ~LED_PATH3_PIN;
-            power_path_level = 1;
-        }
-    }
-    //ramp_level--;
-}
-#endif // ifdef USE_MULTIPLE_POWER_PATH
 
 #endif  // ifdef USE_RAMPING
 #endif
diff --git a/fsm-ramping.h b/fsm-ramping.h
index 6ede36a..d8b1a52 100644
--- a/fsm-ramping.h
+++ b/fsm-ramping.h
@@ -26,10 +26,6 @@
 // actual_level: last ramp level set by set_level()
 uint8_t actual_level = 0;
 
-#ifdef USE_MULTIPLE_POWER_PATH
-uint8_t power_path_level = 1;
-#endif
-
 #ifdef USE_TINT_RAMPING
 #ifdef TINT_RAMP_TOGGLE_ONLY
 uint8_t tint = 0;
@@ -177,9 +173,5 @@ uint8_t jump_start_level = DEFAULT_JUMP_START_LEVEL;
 void set_level(uint8_t level);
 //void set_level_smooth(uint8_t level);
 
-#ifdef USE_MULTIPLE_POWER_PATH
-void set_power_path(uint8_t ramp_level);
-#endif
-
 #endif  // ifdef USE_RAMPING
 #endif
diff --git a/hwdef-BLF_GT.h b/hwdef-BLF_GT.h
new file mode 100644
index 0000000..51b391d
--- /dev/null
+++ b/hwdef-BLF_GT.h
@@ -0,0 +1,60 @@
+#ifndef HWDEF_BLF_GT_H
+#define HWDEF_BLF_GT_H
+
+/* BLF GT driver layout
+ *           ----
+ *   Reset -|1  8|- VCC (unused)
+ * eswitch -|2  7|- Voltage divider
+ * AUX LED -|3  6|- Current control (buck level)
+ *     GND -|4  5|- PWM (buck output on/off)
+ *           ----
+ */
+
+#define PWM_CHANNELS 2
+
+#ifndef AUXLED_PIN
+#define AUXLED_PIN   PB4    // pin 3
+#endif
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN   PB3    // pin 2
+#define SWITCH_PCINT PCINT3 // pin 2 pin change interrupt
+#endif
+
+#ifndef PWM1_PIN
+#define PWM1_PIN PB0        // pin 5, 1x7135 PWM
+#define PWM1_LVL OCR0A      // OCR0A is the output compare register for PB0
+#endif
+#ifndef PWM2_PIN
+#define PWM2_PIN PB1        // pin 6, FET PWM
+#define PWM2_LVL OCR0B      // OCR0B is the output compare register for PB1
+#endif
+
+#define USE_VOLTAGE_DIVIDER // use a voltage divider on pin 7, not VCC
+#ifndef VOLTAGE_PIN
+#define VOLTAGE_PIN PB2     // pin 7, voltage ADC
+#define VOLTAGE_CHANNEL 0x01 // MUX 01 corresponds with PB2
+#define VOLTAGE_ADC ADC1D  // Digital input disable bit corresponding with PB2
+// inherited from tk-attiny.h
+//#define VOLTAGE_ADC_DIDR DIDR0  // DIDR for ADC1
+// 1.1V reference, left-adjust, ADC1/PB2
+//#define ADMUX_VOLTAGE_DIVIDER ((1 << V_REF) | (1 << ADLAR) | VOLTAGE_CHANNEL)
+// 1.1V reference, no left-adjust, ADC1/PB2
+#define ADMUX_VOLTAGE_DIVIDER ((1 << V_REF) | VOLTAGE_CHANNEL)
+#endif
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V (in-between, we assume values form a straight line)
+#ifndef ADC_44
+#define ADC_44 (184*4)
+#endif
+#ifndef ADC_22
+#define ADC_22 (92*4)
+#endif
+
+#define FAST 0xA3           // fast PWM both channels
+#define PHASE 0xA1          // phase-correct PWM both channels
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-BLF_GT_Mini.h b/hwdef-BLF_GT_Mini.h
new file mode 100644
index 0000000..43f74f3
--- /dev/null
+++ b/hwdef-BLF_GT_Mini.h
@@ -0,0 +1,14 @@
+#ifndef HWDEF_BLF_GT_MINI_H
+#define HWDEF_BLF_GT_MINI_H
+
+/* BLF/Lumintop GT Mini driver layout
+ */
+// exactly the same as a D1S, but with a lighted button
+#include "hwdef-Emisar_D1S.h"
+
+// lighted button
+#ifndef AUXLED_PIN
+#define AUXLED_PIN   PB4    // pin 3
+#endif
+
+#endif
diff --git a/hwdef-BLF_LT1-t1616.h b/hwdef-BLF_LT1-t1616.h
new file mode 100644
index 0000000..8e5c58b
--- /dev/null
+++ b/hwdef-BLF_LT1-t1616.h
@@ -0,0 +1,107 @@
+#ifndef HWDEF_BLF_LANTERN_T1616_H
+#define HWDEF_BLF_LANTERN_T1616_H
+
+/* BLF LT1 driver layout using the Attiny1616
+
+Driver pinout:
+ * eSwitch:    PA5
+ * Aux LED:    PB5
+ * PWM FET:    PB0 (TCA0 WO0)
+ * PWM 1x7135: PB1 (TCA0 WO1)
+ * Voltage:    VCC
+
+*/
+
+
+#define LAYOUT_DEFINED
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1616
+#include <avr/io.h>
+
+#define PWM_CHANNELS 1
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN     PIN5_bp
+#define SWITCH_PORT    VPORTA.IN
+#define SWITCH_ISC_REG PORTA.PIN2CTRL
+#define SWITCH_VECT    PORTA_PORT_vect
+#define SWITCH_INTFLG  VPORTA.INTFLAGS
+#endif
+
+
+// usually PWM1_LVL would be a hardware register, but we need to abstract
+// it out to a soft brightness value, in order to handle tint ramping
+// (this allows smooth thermal regulation to work, and makes things
+//  otherwise simpler and easier)
+uint8_t PWM1_LVL;
+
+// warm tint channel
+#ifndef PWM1_PIN
+#define PWM1_PIN PB1                //
+#define TINT1_LVL TCA0.SINGLE.CMP1  // CMP1 is the output compare register for PB1
+#endif
+
+// cold tint channel
+#ifndef PWM2_PIN
+#define PWM2_PIN PB0                //
+#define TINT2_LVL TCA0.SINGLE.CMP0  // CMP0 is the output compare register for PB0
+#endif
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 7  // add 0.35V
+#endif
+
+
+// lighted button
+#ifndef AUXLED_PIN
+#define AUXLED_PIN  PIN5_bp
+#define AUXLED_PORT PORTB
+#endif
+
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+
+    // set up the system clock to run at 5 MHz instead of the default 3.33 MHz
+    _PROTECTED_WRITE( CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_4X_gc | CLKCTRL_PEN_bm );
+
+    //VPORTA.DIR = ...;
+    VPORTB.DIR = PIN0_bm | PIN1_bm | PIN5_bm;  // Outputs: Aux LED and PWMs
+    //VPORTC.DIR = ...;
+
+    // enable pullups on the unused pins to reduce power
+    PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN5CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;  // eSwitch
+    PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
+
+    //PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // cold tint channel
+    //PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // warm tint channel
+    PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
+    PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
+    //PORTB.PIN5CTRL = PORT_PULLUPEN_bm; // Aux LED
+
+    PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
+
+    // set up the PWM
+    // TODO: add references to MCU documentation
+    TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
+    TCA0.SINGLE.PER = 255;
+    TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc | TCA_SINGLE_ENABLE_bm;
+}
+
+
+#endif
diff --git a/hwdef-BLF_LT1.h b/hwdef-BLF_LT1.h
new file mode 100644
index 0000000..4e81c42
--- /dev/null
+++ b/hwdef-BLF_LT1.h
@@ -0,0 +1,58 @@
+#ifndef HWDEF_BLF_LT1_H
+#define HWDEF_BLF_LT1_H
+
+/* BLF LT1 driver layout
+ *           ----
+ *   Reset -|1  8|- VCC
+ * eswitch -|2  7|- (unused)
+ * aux LED -|3  6|- PWM (5000K)
+ *     GND -|4  5|- PWM (3000K)
+ *           ----
+ */
+
+#define ATTINY 85
+#include <avr/io.h>
+
+#define PWM_CHANNELS 1  // 1 virtual channel (1 for main LEDs + 1 for 2nd LEDs)
+#define PWM_BITS 9      // 0 to 255 at 15.6 kHz, but goes to 510 for "200%" turbo
+#define PWM_TOP 255
+
+// dynamic PWM with tint ramping (not supported on attiny85)
+//#define USE_DYN_PWM     // dynamic frequency and speed
+//#define PWM1_CNT TCNT0  // for dynamic PWM, reset phase
+//#define PWM1_PHASE_RESET_OFF  // force reset while shutting off
+//#define PWM1_PHASE_RESET_ON   // force reset while turning on
+//#define PWM1_PHASE_SYNC       // manual sync while changing level
+
+// usually PWM1_LVL would be a hardware register, but we need to abstract
+// it out to a soft brightness value, in order to handle tint ramping
+// (this allows smooth thermal regulation to work, and makes things
+//  otherwise simpler and easier)
+uint16_t PWM1_LVL;
+
+#define PWM1_PIN PB0        // pin 5, warm tint PWM
+#define TINT1_LVL OCR0A     // OCR0A is the output compare register for PB0
+
+#define PWM2_PIN PB1        // pin 6, cold tint PWM
+#define TINT2_LVL OCR0B     // OCR0B is the output compare register for PB1
+
+
+#define AUXLED_PIN   PB4    // pin 3
+
+#define SWITCH_PIN   PB3    // pin 2
+#define SWITCH_PCINT PCINT3 // pin 2 pin change interrupt
+
+#define ADC_PRSCL   0x07    // clk/128
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 7  // add 0.35V
+#endif
+
+#define FAST 0xA3           // fast PWM both channels
+#define PHASE 0xA1          // phase-correct PWM both channels
+
+#define LAYOUT_DEFINED
+
+
+#endif
diff --git a/hwdef-BLF_Q8-T1616.h b/hwdef-BLF_Q8-T1616.h
new file mode 100644
index 0000000..d6ad760
--- /dev/null
+++ b/hwdef-BLF_Q8-T1616.h
@@ -0,0 +1,107 @@
+#ifndef HWDEF_BLF_Q8_T1616_H
+#define HWDEF_BLF_Q8_T1616_H
+
+/* BLF Q8 driver layout using the Attiny1616
+
+Driver pinout:
+ * eSwitch:    PA5
+ * Aux LED:    PB5
+ * PWM FET:    PB0 (TCA0 WO0)
+ * PWM 1x7135: PB1 (TCA0 WO1)
+ * Voltage:    VCC
+
+*/
+
+
+#define LAYOUT_DEFINED
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1616
+#include <avr/io.h>
+
+#define PWM_CHANNELS 2
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN     PIN5_bp
+#define SWITCH_PORT    VPORTA.IN
+#define SWITCH_ISC_REG PORTA.PIN2CTRL
+#define SWITCH_VECT    PORTA_PORT_vect
+#define SWITCH_INTFLG  VPORTA.INTFLAGS
+#endif
+
+
+// 7135 channel
+#ifndef PWM1_PIN
+#define PWM1_PIN PB1               //
+#define PWM1_LVL TCA0.SINGLE.CMP1  // CMP1 is the output compare register for PB1
+#endif
+
+// FET channel
+#ifndef PWM2_PIN
+#define PWM2_PIN PB0               //
+#define PWM2_LVL TCA0.SINGLE.CMP0  // CMP0 is the output compare register for PB0
+#endif
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 7  // add 0.35V
+#endif
+
+
+// lighted button
+#ifndef AUXLED_PIN
+#define AUXLED_PIN  PIN5_bp
+#define AUXLED_PORT PORTB
+#endif
+
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+
+    // set up the system clock to run at 10 MHz instead of the default 3.33 MHz
+    _PROTECTED_WRITE( CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm );
+
+    //VPORTA.DIR = ...;
+    VPORTB.DIR = PIN0_bm | PIN1_bm | PIN5_bm;  // Outputs: Aux LED and PWMs
+    //VPORTC.DIR = ...;
+
+    // enable pullups on the unused pins to reduce power
+    PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN5CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;  // eSwitch
+    PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
+
+    //PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // FET channel
+    //PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // 7135 channel
+    PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
+    PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
+    //PORTB.PIN5CTRL = PORT_PULLUPEN_bm; // Aux LED
+
+    PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
+
+    // set up the PWM
+    // https://ww1.microchip.com/downloads/en/DeviceDoc/ATtiny1614-16-17-DataSheet-DS40002204A.pdf
+    // PB0 is TCA0:WO0, use TCA_SINGLE_CMP0EN_bm
+    // PB1 is TCA0:WO1, use TCA_SINGLE_CMP1EN_bm
+    // PB2 is TCA0:WO2, use TCA_SINGLE_CMP2EN_bm
+    // For Fast (Single Slope) PWM use TCA_SINGLE_WGMODE_SINGLESLOPE_gc
+    // For Phase Correct (Dual Slope) PWM use TCA_SINGLE_WGMODE_DSBOTTOM_gc
+    // See the manual for other pins, clocks, configs, portmux, etc
+    TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_WGMODE_DSBOTTOM_gc;
+    TCA0.SINGLE.PER = 255;
+    TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc | TCA_SINGLE_ENABLE_bm;
+}
+
+
+#endif
diff --git a/hwdef-BLF_Q8.h b/hwdef-BLF_Q8.h
new file mode 100644
index 0000000..5dac5d2
--- /dev/null
+++ b/hwdef-BLF_Q8.h
@@ -0,0 +1,21 @@
+#ifndef HWDEF_BLF_Q8_H
+#define HWDEF_BLF_Q8_H
+
+/* BLF Q8 driver layout
+ * Q8 driver is the same as a D4, basically
+ */
+
+// ... except the Q8 has a lighted button
+#ifndef AUXLED_PIN
+#define AUXLED_PIN   PB4    // pin 3
+#endif
+
+// ... and slightly different calibration
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 7  // add 0.35V
+#endif
+
+// Q8 driver is the same as a D4, basically
+#include "hwdef-Emisar_D4.h"
+
+#endif
diff --git a/hwdef-Emisar_D1.h b/hwdef-Emisar_D1.h
new file mode 100644
index 0000000..caf1d4e
--- /dev/null
+++ b/hwdef-Emisar_D1.h
@@ -0,0 +1,9 @@
+#ifndef HWDEF_EMISAR_D1_H
+#define HWDEF_EMISAR_D1_H
+
+/* Emisar D1 driver layout
+ */
+// D1 driver is exactly the same as a D4
+#include "hwdef-Emisar_D4.h"
+
+#endif
diff --git a/hwdef-Emisar_D18.h b/hwdef-Emisar_D18.h
new file mode 100644
index 0000000..3a238eb
--- /dev/null
+++ b/hwdef-Emisar_D18.h
@@ -0,0 +1,48 @@
+#ifndef HWDEF_EMISAR_D18_H
+#define HWDEF_EMISAR_D18_H
+
+/* Emisar D18 (FET+13+1) driver layout
+ *           ----
+ *   Reset -|1  8|- VCC
+ * eswitch -|2  7|- aux LED?
+ *     FET -|3  6|- 13x7135
+ *     GND -|4  5|-  1x7135
+ *           ----
+ */
+
+#define PWM_CHANNELS 3
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN   PB3    // pin 2
+#define SWITCH_PCINT PCINT3 // pin 2 pin change interrupt
+#endif
+
+#ifndef PWM1_PIN
+#define PWM1_PIN PB0        // pin 5, 1x7135 PWM
+#define PWM1_LVL OCR0A      // OCR0A is the output compare register for PB0
+#endif
+#ifndef PWM2_PIN
+#define PWM2_PIN PB1        // pin 6, 7x7135 PWM
+#define PWM2_LVL OCR0B      // OCR0B is the output compare register for PB1
+#endif
+#ifndef PWM3_PIN
+#define PWM3_PIN PB4        // pin 3, FET PWM
+#define PWM3_LVL OCR1B      // OCR1B is the output compare register for PB4
+#endif
+
+#ifndef AUXLED_PIN
+#define AUXLED_PIN PB2      // pin 7
+#endif
+#define ADC_PRSCL   0x07    // clk/128
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 5  // add 0.25V
+#endif
+
+#define FAST 0xA3           // fast PWM both channels
+#define PHASE 0xA1          // phase-correct PWM both channels
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Emisar_D1S.h b/hwdef-Emisar_D1S.h
new file mode 100644
index 0000000..2e9fffa
--- /dev/null
+++ b/hwdef-Emisar_D1S.h
@@ -0,0 +1,9 @@
+#ifndef HWDEF_EMISAR_D1S_H
+#define HWDEF_EMISAR_D1S_H
+
+/* Emisar D1S driver layout
+ */
+// D1S driver is exactly the same as a D4
+#include "hwdef-Emisar_D4.h"
+
+#endif
diff --git a/hwdef-Emisar_D4.h b/hwdef-Emisar_D4.h
new file mode 100644
index 0000000..d062d6f
--- /dev/null
+++ b/hwdef-Emisar_D4.h
@@ -0,0 +1,47 @@
+#ifndef HWDEF_EMISAR_D4_H
+#define HWDEF_EMISAR_D4_H
+
+/* Emisar D4 driver layout
+ *           ----
+ *   Reset -|1  8|- VCC
+ * eswitch -|2  7|-
+ * AUX LED -|3  6|- PWM (FET)
+ *     GND -|4  5|- PWM (1x7135)
+ *           ----
+ */
+
+#define LAYOUT_DEFINED
+
+#define PWM_CHANNELS 2
+
+//#define AUXLED_PIN   PB4    // pin 3
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN   PB3    // pin 2
+#define SWITCH_PCINT PCINT3 // pin 2 pin change interrupt
+#endif
+
+#ifndef PWM1_PIN
+#define PWM1_PIN PB0        // pin 5, 1x7135 PWM
+#define PWM1_LVL OCR0A      // OCR0A is the output compare register for PB0
+#endif
+#ifndef PWM2_PIN
+#define PWM2_PIN PB1        // pin 6, FET PWM
+#define PWM2_LVL OCR0B      // OCR0B is the output compare register for PB1
+#endif
+
+// (FIXME: remove?  not used?)
+//#define VOLTAGE_PIN PB2     // pin 7, voltage ADC
+//#define ADC_CHANNEL 0x01    // MUX 01 corresponds with PB2
+//#define ADC_DIDR    ADC1D   // Digital input disable bit corresponding with PB2
+#define ADC_PRSCL   0x07    // clk/128
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 5  // add 0.25V
+#endif
+
+#define FAST 0xA3           // fast PWM both channels
+#define PHASE 0xA1          // phase-correct PWM both channels
+
+#endif
diff --git a/hwdef-Emisar_D4S.h b/hwdef-Emisar_D4S.h
new file mode 100644
index 0000000..05a60f9
--- /dev/null
+++ b/hwdef-Emisar_D4S.h
@@ -0,0 +1,14 @@
+#ifndef HWDEF_EMISAR_D4S_H
+#define HWDEF_EMISAR_D4S_H
+
+/* Emisar D4S driver layout
+ */
+// same as a D4, basically
+#include "hwdef-Emisar_D4.h"
+
+// ... except the D4S has aux LEDs under the optic
+#ifndef AUXLED_PIN
+#define AUXLED_PIN   PB4    // pin 3
+#endif
+
+#endif
diff --git a/hwdef-Emisar_D4Sv2-tintramp.h b/hwdef-Emisar_D4Sv2-tintramp.h
new file mode 100644
index 0000000..0f4a77a
--- /dev/null
+++ b/hwdef-Emisar_D4Sv2-tintramp.h
@@ -0,0 +1,188 @@
+#ifndef HWDEF_D4SV2_TINTRAMP_H
+#define HWDEF_D4SV2_TINTRAMP_H
+
+/* Emisar D4Sv2 w/ tint ramping
+ * (based on the Noctigon K9.3 driver layout (attiny1634))
+ *
+ * Pin / Name / Function
+ *   1    PA6   2nd LED PWM (linear) (PWM1B)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   button LED
+ *   6    PA1   Opamp 2 enable (2nd LEDs)
+ *   7    PA0   Opamp 1 enable (main LEDs)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   main LED PWM (FET) (PWM0A) (unused on some models because tint ramping)
+ *  16    PB3   main LED PWM (linear) (PWM1A)
+ *  17    PB2   MISO
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   (none)
+ *  20    PA7   e-switch (PCINT7)
+ *      ADC12   thermal sensor
+ *
+ * Main LED power uses one pin to turn the Opamp on/off,
+ * and one pin to control Opamp power level.
+ * Main brightness control uses the power level pin, with 4 kHz 10-bit PWM.
+ * The on/off pin is only used to turn the main LED on and off,
+ * not to change brightness.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 1  // 1 virtual channel (1 for main LEDs + 1 for 2nd LEDs)
+#define PWM_BITS 14     // 0 to 16383 at variable Hz, not 0 to 255 at 16 kHz
+#define PWM_TOP 511
+// dynamic PWM with tint ramping
+#define USE_DYN_PWM  // dynamic frequency and speed
+#define PWM_DATATYPE2 uint32_t  // only needs 32-bit if ramp values go over 255
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN   PA7     // pin 20
+#define SWITCH_PCINT PCINT7  // pin 20 pin change interrupt
+#define SWITCH_PCIE  PCIE0   // PCIE1 is for PCINT[7:0]
+#define SWITCH_PCMSK PCMSK0  // PCMSK1 is for PCINT[7:0]
+#define SWITCH_PORT  PINA    // PINA or PINB or PINC
+#define SWITCH_PUE   PUEA    // pullup group A
+#define PCINT_vect   PCINT0_vect  // ISR for PCINT[7:0]
+#endif
+
+// usually PWM1_LVL would be a hardware register, but we need to abstract
+// it out to a soft brightness value, in order to handle tint ramping
+// (this allows smooth thermal regulation to work, and makes things
+//  otherwise simpler and easier)
+uint16_t PWM1_LVL;
+#define PWM1_PIN PB3        // pin 16, Opamp reference
+#define TINT1_LVL OCR1A     // OCR1A is the output compare register for PB3
+#define PWM1_CNT TCNT1      // for dynamic PWM, reset phase
+#define PWM1_PHASE_RESET_OFF  // force reset while shutting off
+#define PWM1_PHASE_RESET_ON   // force reset while turning on
+#define PWM1_PHASE_SYNC       // manual sync while changing level
+
+// gah, this driver is weird...
+// two linear channels are treated as one,
+// while there's also a FET on one channel for turbo on half the LEDs
+// so the FET needs to be "PWM2" but the second linear is "TINT2"
+#define PWM3_PIN PA6        // pin 1, 2nd LED Opamp reference
+#define TINT2_LVL OCR1B     // OCR1B is the output compare register for PA6
+
+#define PWM2_PIN PC0        // pin 15, DD FET PWM
+#define PWM2_LVL OCR0A      // OCR0A is the output compare register for PC0
+
+// PWM parameters of both channels are tied together because they share a counter
+#define PWM1_TOP ICR1       // holds the TOP value for for variable-resolution PWM
+
+#define LED_ENABLE_PIN  PA0    // pin 7, Opamp power
+#define LED_ENABLE_PORT PORTA  // control port for PA0
+
+#define LED2_ENABLE_PIN  PA1    // pin 6, Opamp power
+#define LED2_ENABLE_PORT PORTA  // control port for PA1
+
+
+#define USE_VOLTAGE_DIVIDER  // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB1      // Pin 18 / PB1 / ADC6
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC      ADC6D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC6D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 1, 0 for ADC6 / PB1
+// divided by ...
+// REFS[1:0] = 1, 0 for internal 1.1V reference
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b10000110
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 1024 / 1.1)
+// D1, R1, R2 = 0, 330, 100
+#ifndef ADC_44
+//#define ADC_44 981  // raw value at 4.40V
+#define ADC_44 967  // manually tweaked so 4.16V will blink out 4.2
+#endif
+#ifndef ADC_22
+//#define ADC_22 489  // raw value at 2.20V
+#define ADC_22 482  // manually tweaked so 4.16V will blink out 4.2
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+#define BUTTON_LED_PIN  PA2    // pin 5
+#define BUTTON_LED_PORT PORTA  // for all "PA" pins
+#define BUTTON_LED_DDR  DDRA   // for all "PA" pins
+#define BUTTON_LED_PUE  PUEA   // for all "PA" pins
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  DDRC = (1 << PWM2_PIN);
+  DDRB = (1 << PWM1_PIN);
+  DDRA = (1 << PWM3_PIN)
+       | (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       | (1 << BUTTON_LED_PIN)
+       | (1 << LED_ENABLE_PIN)
+       | (1 << LED2_ENABLE_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // Linear opamp PWM for both main and 2nd LEDs (10-bit)
+  // WGM1[3:0]: 1,0,1,0: PWM, Phase Correct, adjustable (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    1,0: PWM OC1B in the normal direction (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (0<<WGM10)   // adjustable PWM (TOP=ICR1) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (1<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (1<<WGM13)  | (0<<WGM12)  // phase-correct adjustable PWM (DS table 12-5)
+          ;
+
+  // FET PWM (8-bit; this channel can't do 10-bit)
+  // WGM0[2:0]: 0,0,1: PWM, Phase Correct, 8-bit (DS table 11-8)
+  // CS0[2:0]:  0,0,1: clk/1 (No prescaling) (DS table 11-9)
+  // COM0A[1:0]:  1,0: PWM OC0A in the normal direction (DS table 11-4)
+  // COM0B[1:0]:  1,0: PWM OC0B in the normal direction (DS table 11-7)
+  TCCR0A  = (0<<WGM01)  | (1<<WGM00)   // 8-bit (TOP=0xFF) (DS table 11-8)
+          | (1<<COM0A1) | (0<<COM0A0)  // PWM 0A in normal direction (DS table 11-4)
+          //| (1<<COM0B1) | (0<<COM0B0)  // PWM 0B in normal direction (DS table 11-7)
+          ;
+  TCCR0B  = (0<<CS02)   | (0<<CS01) | (1<<CS00)  // clk/1 (no prescaling) (DS table 11-9)
+          | (0<<WGM02)  // phase-correct PWM (DS table 11-8)
+          ;
+  // set PWM resolution
+  PWM1_TOP = PWM_TOP;
+
+  // set up e-switch
+  SWITCH_PUE = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Emisar_D4Sv2.h b/hwdef-Emisar_D4Sv2.h
new file mode 100644
index 0000000..d68b7ac
--- /dev/null
+++ b/hwdef-Emisar_D4Sv2.h
@@ -0,0 +1,122 @@
+#ifndef HWDEF_EMISAR_D4SV2_H
+#define HWDEF_EMISAR_D4SV2_H
+
+/* Emisar D4Sv2 driver layout (attiny1634)
+ * (same layout as D4v2, except it's a FET+3+1 instead of FET+1)
+ *
+ * Pin / Name / Function
+ *   1    PA6   FET PWM (PWM1B)
+ *   2    PA5   red aux LED (PWM0B)
+ *   3    PA4   green aux LED
+ *   4    PA3   blue aux LED
+ *   5    PA2   e-switch
+ *   6    PA1   (none)
+ *   7    PA0   (none)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   3x7135 PWM (PWM0A)
+ *  16    PB3   1x7135 PWM (PWM1A)
+ *  17    PB2   MISO
+ *  18    PB1   MOSI
+ *  19    PB0   (none)
+ *  20    PA7   (none)
+ *      ADC12   thermal sensor
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define SWITCH_PIN   PA2    // pin 5
+#define SWITCH_PCINT PCINT2 // pin 5 pin change interrupt
+#define SWITCH_PCIE  PCIE0  // PCIE0 is for PCINT[7:0]
+#define SWITCH_PCMSK PCMSK0 // PCMSK0 is for PCINT[7:0]
+#define SWITCH_PORT  PINA   // PINA or PINB or PINC
+
+#define PWM_CHANNELS 3
+
+#define PWM1_PIN PB3        // pin 16, 1x7135 PWM
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+
+#define PWM2_PIN PC0        // pin 15, 3x7135 PWM
+#define PWM2_LVL OCR0A      // OCR0A is the output compare register for PC0
+
+#define PWM3_PIN PA6        // pin 1, FET PWM
+#define PWM3_LVL OCR1B      // OCR1B is the output compare register for PB1
+
+
+#define ADC_PRSCL   0x07    // clk/128
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 4  // add 0.20V  (measured 0.22V)
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN   PA5    // pin 2
+#define AUXLED_G_PIN   PA4    // pin 3
+#define AUXLED_B_PIN   PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE PUEA   // PUEA or PUEB or PUEC
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  // FET, aux R/G/B
+  DDRA = (1 << PWM3_PIN)
+       | (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       ;
+  // 1x7135
+  DDRB = (1 << PWM1_PIN);
+  // 3x7135
+  DDRC = (1 << PWM2_PIN);
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // WGM1[3:0]: 0,0,0,1: PWM, Phase Correct, 8-bit (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    1,0: PWM OC1B in the normal direction (DS table 12-4)
+  TCCR1A  = (0<<WGM11)  | (1<<WGM10)   // 8-bit (TOP=0xFF) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (1<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (0<<WGM13)  | (0<<WGM12)  // phase-correct PWM (DS table 12-5)
+          ;
+
+  // WGM0[2:0]: 0,0,1: PWM, Phase Correct (DS table 11-8)
+  // CS0[2:0]:  0,0,1: clk/1 (No prescaling) (DS table 11-9)
+  // COM0A[1:0]:  1,0: PWM OC0A in the normal direction (DS table 11-4)
+  // COM0B[1:0]:  0,0: OC0B disabled (DS table 11-7)
+  // TCCR0A: COM0A1, COM0A0, COM0B1, COM0B0, -, -, WGM01, WGM00
+  TCCR0A  = (0<<WGM01)  | (1<<WGM00)   // PWM, Phase Correct, TOP=0xFF (DS table 11-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 0A in normal direction (DS table 11-4)
+          | (0<<COM1B1) | (0<<COM1B0)  // PWM 0B disabled (DS table 11-7)
+          ;
+  // TCCR0B: FOC0A, FOC0B, -, -, WGM02, CS02, CS01, CS00
+  TCCR0B  = (0<<CS02)   | (0<<CS01) | (1<<CS00)  // clk/1 (no prescaling) (DS table 11-9)
+          | (0<<WGM02)  // PWM, Phase Correct, TOP=0xFF (DS table 11-8)
+          ;
+
+  // set up e-switch
+  //PORTA = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  PUEA = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Emisar_D4v2.h b/hwdef-Emisar_D4v2.h
new file mode 100644
index 0000000..e118ed5
--- /dev/null
+++ b/hwdef-Emisar_D4v2.h
@@ -0,0 +1,104 @@
+#ifndef HWDEF_EMISAR_D4V2_H
+#define HWDEF_EMISAR_D4V2_H
+
+/* Emisar D4v2 driver layout (attiny1634)
+ *
+ * Pin / Name / Function
+ *   1    PA6   FET PWM (PWM1B)
+ *   2    PA5   red aux LED (PWM0B)
+ *   3    PA4   green aux LED
+ *   4    PA3   blue aux LED
+ *   5    PA2   e-switch
+ *   6    PA1   button LED
+ *   7    PA0   (none)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   (none) PWM0A
+ *  16    PB3   7135 PWM (PWM1A)
+ *  17    PB2   MISO
+ *  18    PB1   MOSI
+ *  19    PB0   (none)
+ *  20    PA7   (none)
+ *      ADC12   thermal sensor
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 2
+
+#define SWITCH_PIN   PA2    // pin 5
+#define SWITCH_PCINT PCINT2 // pin 5 pin change interrupt
+#define SWITCH_PCIE  PCIE0  // PCIE0 is for PCINT[7:0]
+#define SWITCH_PCMSK PCMSK0 // PCMSK0 is for PCINT[7:0]
+#define SWITCH_PORT  PINA   // PINA or PINB or PINC
+
+#define PWM1_PIN PB3        // pin 16, 1x7135 PWM
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+
+#define PWM2_PIN PA6        // pin 1, FET PWM
+#define PWM2_LVL OCR1B      // OCR1B is the output compare register for PB1
+
+
+#define ADC_PRSCL   0x07    // clk/128
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 4  // add 0.20V  (measured 0.22V)
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+#define BUTTON_LED_PIN  PA1    // pin 6
+#define BUTTON_LED_PORT PORTA  // for all "PA" pins
+#define BUTTON_LED_DDR  DDRA   // for all "PA" pins
+#define BUTTON_LED_PUE  PUEA   // for all "PA" pins
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  // 7135
+  DDRB = (1 << PWM1_PIN);
+  // FET, aux R/G/B, button LED
+  DDRA = (1 << PWM2_PIN)
+       | (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       | (1 << BUTTON_LED_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  TCCR1A  = (0<<WGM11)  | (1<<WGM10)   // 8-bit (TOP=0xFF) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (1<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (0<<WGM13)  | (0<<WGM12)  // phase-correct PWM (DS table 12-5)
+          ;
+
+  // set up e-switch
+  //PORTA = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  PUEA = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-FET_7135.h b/hwdef-FET_7135.h
new file mode 100644
index 0000000..c89d3ce
--- /dev/null
+++ b/hwdef-FET_7135.h
@@ -0,0 +1,38 @@
+#ifndef HWDEF_FET_7135_H
+#define HWDEF_FET_7135_H
+
+/* FET + 7135 driver layout
+ *           ----
+ *   Reset -|1  8|- VCC
+ *     OTC -|2  7|- Voltage ADC
+ *  Star 3 -|3  6|- PWM (FET)
+ *     GND -|4  5|- PWM (1x7135)
+ *           ----
+ */
+
+#define STAR2_PIN   PB0     // If this pin isn't used for ALT_PWM
+#define STAR3_PIN   PB4     // pin 3
+
+#define CAP_PIN     PB3     // pin 2, OTC
+#define CAP_CHANNEL 0x03    // MUX 03 corresponds with PB3 (Star 4)
+#define CAP_DIDR    ADC3D   // Digital input disable bit corresponding with PB3
+
+#define PWM_PIN     PB1     // pin 6, FET PWM
+#define PWM_LVL     OCR0B   // OCR0B is the output compare register for PB1
+#define ALT_PWM_PIN PB0     // pin 5, 1x7135 PWM
+#define ALT_PWM_LVL OCR0A   // OCR0A is the output compare register for PB0
+
+#define VOLTAGE_PIN PB2     // pin 7, voltage ADC
+#define ADC_CHANNEL 0x01    // MUX 01 corresponds with PB2
+#define ADC_DIDR    ADC1D   // Digital input disable bit corresponding with PB2
+#define ADC_PRSCL   0x06    // clk/64
+
+//#define TEMP_DIDR   ADC4D
+#define TEMP_CHANNEL 0b00001111
+
+#define FAST 0xA3           // fast PWM both channels
+#define PHASE 0xA1          // phase-correct PWM both channels
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-FF_PL47.h b/hwdef-FF_PL47.h
new file mode 100644
index 0000000..5cd9684
--- /dev/null
+++ b/hwdef-FF_PL47.h
@@ -0,0 +1,27 @@
+#ifndef HWDEF_FF_PL47_H
+#define HWDEF_FF_PL47_H
+
+/* Fireflies PL47 driver layout
+ * same as a D4S, basically, except ...
+ */
+
+// ... the PL47 has aux LEDs on pin 7
+#ifndef AUXLED_PIN
+#define AUXLED_PIN   PB2    // pin 7
+#endif
+
+// ... and switch LEDs on pin 3
+#ifndef AUXLED2_PIN
+#define AUXLED2_PIN   PB4    // pin 3
+#endif
+
+// ... and slightly different calibration
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 7  // add 0.35V
+#endif
+
+#include "hwdef-Emisar_D4S.h"
+#undef FSM_EMISAR_D4S_DRIVER
+#undef FSM_EMISAR_D4_DRIVER
+
+#endif
diff --git a/hwdef-FF_ROT66.h b/hwdef-FF_ROT66.h
new file mode 100644
index 0000000..7348ab2
--- /dev/null
+++ b/hwdef-FF_ROT66.h
@@ -0,0 +1,25 @@
+#ifndef HWDEF_FF_ROT66_H
+#define HWDEF_FF_ROT66_H
+
+/* Fireflies ROT66 driver layout
+ * same as a FW3A, basically, except ...
+ */
+
+// ... except the ROT66 has a lighted button
+#ifndef AUXLED_PIN
+#define AUXLED_PIN   PB2    // pin 7
+#endif
+
+// ... and slightly different calibration
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 7  // add 0.35V
+#endif
+
+#include "hwdef-FW3A.h"
+
+// ... and no optic nerve
+#ifdef VISION_PIN
+#undef VISION_PIN
+#endif
+
+#endif
diff --git a/hwdef-FW3A.h b/hwdef-FW3A.h
new file mode 100644
index 0000000..e8875d7
--- /dev/null
+++ b/hwdef-FW3A.h
@@ -0,0 +1,50 @@
+#ifndef HWDEF_FW3A_H
+#define HWDEF_FW3A_H
+
+/* BLF/TLF FW3A driver layout
+ *           ----
+ *   Reset -|1  8|- VCC
+ * eswitch -|2  7|- optic nerve
+ *     FET -|3  6|- 7x7135
+ *     GND -|4  5|- 1x7135
+ *           ----
+ */
+
+#define PWM_CHANNELS 3
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN   PB3    // pin 2
+#define SWITCH_PCINT PCINT3 // pin 2 pin change interrupt
+#endif
+
+#ifndef PWM1_PIN
+#define PWM1_PIN PB0        // pin 5, 1x7135 PWM
+#define PWM1_LVL OCR0A      // OCR0A is the output compare register for PB0
+#endif
+#ifndef PWM2_PIN
+#define PWM2_PIN PB1        // pin 6, 7x7135 PWM
+#define PWM2_LVL OCR0B      // OCR0B is the output compare register for PB1
+#endif
+#ifndef PWM3_PIN
+#define PWM3_PIN PB4        // pin 3, FET PWM
+#define PWM3_LVL OCR1B      // OCR1B is the output compare register for PB4
+#endif
+
+#ifndef VISION_PIN
+#define VISION_PIN PB2      // pin 7, optic nerve
+//#define ADC_CHANNEL 0x01    // MUX 01 corresponds with PB2
+//#define ADC_DIDR    ADC1D   // Digital input disable bit corresponding with PB2
+#endif
+#define ADC_PRSCL   0x07    // clk/128
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 5  // add 0.25V
+#endif
+
+#define FAST 0xA3           // fast PWM both channels
+#define PHASE 0xA1          // phase-correct PWM both channels
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Ferrero_Rocher.h b/hwdef-Ferrero_Rocher.h
new file mode 100644
index 0000000..48519ef
--- /dev/null
+++ b/hwdef-Ferrero_Rocher.h
@@ -0,0 +1,18 @@
+#ifndef HWDEF_FERRERO_ROCHER_H
+#define HWDEF_FERRERO_ROCHER_H
+
+/* Ferrero Rocher driver layout
+ *            ----
+ *    Reset -|1  8|- VCC
+ * E-switch -|2  7|- Voltage ADC
+ *  Red LED -|3  6|- PWM
+ *      GND -|4  5|- Green LED
+ *            ----
+ */
+// TODO: fill in this section, update Ferrero_Rocher code to use it.
+#define FAST 0x23           // fast PWM channel 1 only
+#define PHASE 0x21          // phase-correct PWM channel 1 only
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Mateminco_MF01-Mini.h b/hwdef-Mateminco_MF01-Mini.h
new file mode 100644
index 0000000..c0de533
--- /dev/null
+++ b/hwdef-Mateminco_MF01-Mini.h
@@ -0,0 +1,49 @@
+#ifndef HWDEF_MF01_MINI_H
+#define HWDEF_MF01_MINI_H
+
+/* MF01-Mini driver layout
+ *           ----
+ *   Reset -|1  8|- VCC
+ * eswitch -|2  7|- aux LEDs
+ * FET PWM -|3  6|- PWM (7x7135)
+ *     GND -|4  5|- PWM (1x7135)
+ *           ----
+ */
+
+#define PWM_CHANNELS 3
+
+#ifndef AUXLED_PIN
+#define AUXLED_PIN   PB2    // pin 7
+#endif
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN   PB3    // pin 2
+#define SWITCH_PCINT PCINT3 // pin 2 pin change interrupt
+#endif
+
+#ifndef PWM1_PIN
+#define PWM1_PIN PB0        // pin 5, 1x7135 PWM
+#define PWM1_LVL OCR0A      // OCR0A is the output compare register for PB0
+#endif
+#ifndef PWM2_PIN
+#define PWM2_PIN PB1        // pin 6, 7x7135 PWM
+#define PWM2_LVL OCR0B      // OCR0B is the output compare register for PB1
+#endif
+#ifndef PWM3_PIN
+#define PWM3_PIN PB4        // pin 3, FET PWM
+#define PWM3_LVL OCR1B      // OCR1B is the output compare register for PB4
+#endif
+
+#define ADC_PRSCL   0x07    // clk/128
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 5  // add 0.25V
+#endif
+
+#define FAST 0xA3           // fast PWM both channels
+#define PHASE 0xA1          // phase-correct PWM both channels
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Mateminco_MF01S.h b/hwdef-Mateminco_MF01S.h
new file mode 100644
index 0000000..78a64a6
--- /dev/null
+++ b/hwdef-Mateminco_MF01S.h
@@ -0,0 +1,60 @@
+#ifndef HWDEF_MF01S_H
+#define HWDEF_MF01S_H
+
+/* MF01S driver layout
+ *           ----
+ *   Reset -|1  8|- VCC (unused)
+ * eswitch -|2  7|- Voltage divider (2S)
+ * AUX LED -|3  6|- PWM (FET)
+ *     GND -|4  5|- PWM (smaller FET)
+ *           ----
+ */
+
+#define PWM_CHANNELS 2
+
+#ifndef AUXLED_PIN
+#define AUXLED_PIN   PB4    // pin 3
+#endif
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN   PB3    // pin 2
+#define SWITCH_PCINT PCINT3 // pin 2 pin change interrupt
+#endif
+
+#ifndef PWM1_PIN
+#define PWM1_PIN PB0        // pin 5, 1x7135 PWM
+#define PWM1_LVL OCR0A      // OCR0A is the output compare register for PB0
+#endif
+#ifndef PWM2_PIN
+#define PWM2_PIN PB1        // pin 6, FET PWM
+#define PWM2_LVL OCR0B      // OCR0B is the output compare register for PB1
+#endif
+
+#define USE_VOLTAGE_DIVIDER // use a voltage divider on pin 7, not VCC
+#ifndef VOLTAGE_PIN
+#define VOLTAGE_PIN PB2     // pin 7, voltage ADC
+#define VOLTAGE_CHANNEL 0x01 // MUX 01 corresponds with PB2
+#define VOLTAGE_ADC ADC1D  // Digital input disable bit corresponding with PB2
+// inherited from tk-attiny.h
+//#define VOLTAGE_ADC_DIDR DIDR0  // DIDR for ADC1
+// 1.1V reference, left-adjust, ADC1/PB2
+//#define ADMUX_VOLTAGE_DIVIDER ((1 << V_REF) | (1 << ADLAR) | VOLTAGE_CHANNEL)
+// 1.1V reference, no left-adjust, ADC1/PB2
+#define ADMUX_VOLTAGE_DIVIDER ((1 << V_REF) | VOLTAGE_CHANNEL)
+#endif
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V (in-between, we assume values form a straight line)
+#ifndef ADC_44
+#define ADC_44 (234*4)
+#endif
+#ifndef ADC_22
+#define ADC_22 (117*4)
+#endif
+
+#define FAST 0xA3           // fast PWM both channels
+#define PHASE 0xA1          // phase-correct PWM both channels
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Mateminco_MT35-Mini.h b/hwdef-Mateminco_MT35-Mini.h
new file mode 100644
index 0000000..344f658
--- /dev/null
+++ b/hwdef-Mateminco_MT35-Mini.h
@@ -0,0 +1,47 @@
+#ifndef HWDEF_MT35_MINI_H
+#define HWDEF_MT35_MINI_H
+
+/* Mateminco MT35-Mini / Astrolux FT03
+ *           ----
+ *   Reset -|1  8|- VCC
+ * eswitch -|2  7|- Aux LED
+ *  1x7135 -|3  6|- NC
+ *     GND -|4  5|- FET
+ *           ----
+ */
+
+#define PWM_CHANNELS 2
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN   PB3    // pin 2
+#define SWITCH_PCINT PCINT3 // pin 2 pin change interrupt
+#endif
+
+#ifndef PWM1_PIN
+#define PWM1_PIN PB4        // pin 3, 1x7135 PWM
+#define PWM1_LVL OCR1B      // OCR1B is the output compare register for PB0
+#endif
+
+#ifndef PWM2_PIN
+#define PWM2_PIN PB0        // pin 5, FET PWM
+#define PWM2_LVL OCR0A      // OCR0A is the output compare register for PB4
+#endif
+
+#define ADC_PRSCL   0x07    // clk/128
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 7  // add 0.35V
+#endif
+
+// lighted button
+#ifndef AUXLED_PIN
+#define AUXLED_PIN   PB2    // pin 7
+#endif
+
+#define FAST 0xA3           // fast PWM both channels
+#define PHASE 0xA1          // phase-correct PWM both channels
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Noctigon_DM11-12V.h b/hwdef-Noctigon_DM11-12V.h
new file mode 100644
index 0000000..a0d9715
--- /dev/null
+++ b/hwdef-Noctigon_DM11-12V.h
@@ -0,0 +1,165 @@
+#ifndef HWDEF_NOCTIGON_DM11_12V_H
+#define HWDEF_NOCTIGON_DM11_12V_H
+
+/* Noctigon DM11 (12V) driver layout (attiny1634)
+ * (based on Noctigon K1)
+ *
+ * Pin / Name / Function
+ *   1    PA6   (none) (PWM1B) (reserved for DD drivers)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   L: button LED
+ *   6    PA1   (none)
+ *   7    PA0   (none)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   boost PMIC enable (PWM0A not used)
+ *  16    PB3   main LED PWM (PWM1A)
+ *  17    PB2   MISO / e-switch? (PCINT10)
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   Opamp power
+ *  20    PA7   e-switch?  (PCINT7)
+ *      ADC12   thermal sensor
+ *
+ * Main LED power uses one pin to turn the Opamp on/off,
+ * and one pin to control Opamp power level.
+ * Linear brightness control uses the power level pin, with dynamic PWM.
+ * The on/off pin is only used to turn the main LED on and off,
+ * not to change brightness.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 1  // can't use DD FET on boost drivers
+#define PWM_BITS 16  // data type needs 16 bits, not 8
+#define PWM_TOP  255 // highest value used in top half of ramp
+#define USE_DYN_PWM  // dynamic frequency and speed
+
+//#define SWITCH_PIN   PB2     // pin 17
+//#define SWITCH_PCINT PCINT10 // pin 17 pin change interrupt
+//#define SWITCH_PCIE  PCIE1   // PCIE1 is for PCINT[11:8]
+//#define SWITCH_PCMSK PCMSK1  // PCMSK1 is for PCINT[11:8]
+//#define SWITCH_PORT  PINB    // PINA or PINB or PINC
+//#define PCINT_vect   PCINT1_vect  // ISR for PCINT[11:8]
+
+#define SWITCH_PIN   PA7    // pin 20
+#define SWITCH_PCINT PCINT7 // pin 20 pin change interrupt
+#define SWITCH_PCIE  PCIE0  // PCIE0 is for PCINT[7:0]
+#define SWITCH_PCMSK PCMSK0 // PCMSK0 is for PCINT[7:0]
+#define SWITCH_PORT  PINA   // PINA or PINB or PINC
+
+#define PWM1_PIN PB3        // pin 16, Opamp reference
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+#define PWM1_CNT TCNT1      // for dynamic PWM, reset phase
+#define PWM1_PHASE_RESET_OFF  // force reset while shutting off
+#define PWM1_PHASE_RESET_ON   // force reset while turning on
+#define PWM1_PHASE_SYNC       // manual sync while changing level
+
+// PWM parameters of both channels are tied together because they share a counter
+#define PWM1_TOP ICR1       // holds the TOP value for for variable-resolution PWM
+
+#define LED_ENABLE_PIN  PB0    // pin 19, Opamp power
+#define LED_ENABLE_PORT PORTB  // control port for PB0
+
+#define LED2_ENABLE_PIN  PC0    // pin 15, boost PMIC enable
+#define LED2_ENABLE_PORT PORTC  // control port for PC0
+
+
+#define USE_VOLTAGE_DIVIDER  // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB1      // Pin 18 / PB1 / ADC6
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC      ADC6D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC6D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 1, 0 for ADC6 / PB1
+// divided by ...
+// REFS[1:0] = 1, 0 for internal 1.1V reference
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b10000110
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 1024 / 1.1)
+// D1, R1, R2 = 0, 330, 100
+#ifndef ADC_44
+//#define ADC_44 981  // raw value at 4.40V
+#define ADC_44 967  // manually tweaked so 4.16V will blink out 4.2
+#endif
+#ifndef ADC_22
+//#define ADC_22 489  // raw value at 2.20V
+#define ADC_22 482  // manually tweaked so 4.16V will blink out 4.2
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+#define BUTTON_LED_PIN  PA2    // pin 5
+#define BUTTON_LED_PORT PORTA  // for all "PA" pins
+#define BUTTON_LED_DDR  DDRA   // for all "PA" pins
+#define BUTTON_LED_PUE  PUEA   // for all "PA" pins
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  // boost PMIC on/off
+  DDRC = (1 << LED2_ENABLE_PIN);
+  // Opamp level and Opamp on/off
+  DDRB = (1 << PWM1_PIN)
+       | (1 << LED_ENABLE_PIN);
+  // aux R/G/B, button LED
+  DDRA = (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       | (1 << BUTTON_LED_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // WGM1[3:0]: 1,0,1,0: PWM, Phase Correct, adjustable (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    0,0: PWM OC1B disabled (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (0<<WGM10)   // adjustable PWM (TOP=ICR1) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (0<<COM1B1) | (0<<COM1B0)  // PWM 1B disabled (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (1<<WGM13)  | (0<<WGM12)  // phase-correct adjustable PWM (DS table 12-5)
+          ;
+
+  // set PWM resolution
+  PWM1_TOP = PWM_TOP;
+
+  // set up e-switch
+  ////PORTB = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  //PUEB = (1 << SWITCH_PIN);  // pull-up for e-switch
+  //PORTA = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  PUEA = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Noctigon_DM11-SBT90.h b/hwdef-Noctigon_DM11-SBT90.h
new file mode 100644
index 0000000..8d7aa3d
--- /dev/null
+++ b/hwdef-Noctigon_DM11-SBT90.h
@@ -0,0 +1,157 @@
+#ifndef HWDEF_NOCTIGON_DM11SBT90_H
+#define HWDEF_NOCTIGON_DM11SBT90_H
+
+/* Noctigon DM11-SBT90.2 driver layout (attiny1634)
+ * (based on Noctigon K1 and DM11)
+ *
+ * Pin / Name / Function
+ *   1    PA6   FET PWM (direct drive) (PWM1B)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   L: button LED
+ *   6    PA1   (none)
+ *   7    PA0   (none)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   (none) PWM0A
+ *  16    PB3   main LED PWM (PWM1A)
+ *  17    PB2   MISO / e-switch (PCINT10)
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   Opamp power
+ *  20    PA7   (none)  (PCINT7)
+ *      ADC12   thermal sensor
+ *
+ * Main LED power uses one pin to turn the Opamp on/off,
+ * and one pin to control Opamp power level.
+ * Linear brightness control uses the power level pin, with dynamic PWM.
+ * The on/off pin is only used to turn the main LED on and off,
+ * not to change brightness.
+ * Also has a direct-drive FET for turbo.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 2  // override this for the no-FET version
+#define PWM_BITS 16  // data type needs 16 bits, not 8
+#define PWM_TOP  255 // highest value used in top half of ramp
+#define USE_DYN_PWM  // dynamic frequency and speed
+
+#define SWITCH_PIN   PB2     // pin 17
+#define SWITCH_PCINT PCINT10 // pin 17 pin change interrupt
+#define SWITCH_PCIE  PCIE1   // PCIE1 is for PCINT[11:8]
+#define SWITCH_PCMSK PCMSK1  // PCMSK1 is for PCINT[11:8]
+#define SWITCH_PORT  PINB    // PINA or PINB or PINC
+#define PCINT_vect   PCINT1_vect  // ISR for PCINT[11:8]
+
+#define PWM1_PIN PB3        // pin 16, Opamp reference
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+#define PWM1_CNT TCNT1      // for dynamic PWM, reset phase
+#define PWM1_PHASE_RESET_OFF  // force reset while shutting off
+#define PWM1_PHASE_RESET_ON   // force reset while turning on
+#define PWM1_PHASE_SYNC       // manual sync while changing level
+
+#define PWM2_PIN PA6        // pin 1, DD FET PWM
+#define PWM2_LVL OCR1B      // OCR1B is the output compare register for PA6
+
+// PWM parameters of both channels are tied together because they share a counter
+#define PWM1_TOP ICR1       // holds the TOP value for for variable-resolution PWM
+
+#define LED_ENABLE_PIN  PB0    // pin 19, Opamp power
+#define LED_ENABLE_PORT PORTB  // control port for PB0
+
+
+#define USE_VOLTAGE_DIVIDER  // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB1      // Pin 18 / PB1 / ADC6
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC      ADC6D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC6D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 1, 0 for ADC6 / PB1
+// divided by ...
+// REFS[1:0] = 1, 0 for internal 1.1V reference
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b10000110
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 1024 / 1.1)
+// D1, R1, R2 = 0, 330, 100
+#ifndef ADC_44
+//#define ADC_44 981  // raw value at 4.40V
+#define ADC_44 967  // manually tweaked so 4.16V will blink out 4.2
+#endif
+#ifndef ADC_22
+//#define ADC_22 489  // raw value at 2.20V
+#define ADC_22 482  // manually tweaked so 4.16V will blink out 4.2
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+#define BUTTON_LED_PIN  PA2    // pin 5
+#define BUTTON_LED_PORT PORTA  // for all "PA" pins
+#define BUTTON_LED_DDR  DDRA   // for all "PA" pins
+#define BUTTON_LED_PUE  PUEA   // for all "PA" pins
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  // Opamp level and Opamp on/off
+  DDRB = (1 << PWM1_PIN)
+       | (1 << LED_ENABLE_PIN);
+  // DD FET PWM, aux R/G/B, button LED
+  DDRA = (1 << PWM2_PIN)
+       | (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       | (1 << BUTTON_LED_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // WGM1[3:0]: 1,0,1,0: PWM, Phase Correct, adjustable (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    1,0: PWM OC1B in the normal direction (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (0<<WGM10)   // adjustable PWM (TOP=ICR1) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (1<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (1<<WGM13)  | (0<<WGM12)  // phase-correct adjustable PWM (DS table 12-5)
+          ;
+
+  // set PWM resolution
+  PWM1_TOP = PWM_TOP;
+
+  // set up e-switch
+  //PORTB = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  PUEB = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Noctigon_DM11.h b/hwdef-Noctigon_DM11.h
new file mode 100644
index 0000000..ea51432
--- /dev/null
+++ b/hwdef-Noctigon_DM11.h
@@ -0,0 +1,156 @@
+#ifndef HWDEF_NOCTIGON_DM11_H
+#define HWDEF_NOCTIGON_DM11_H
+
+/* Noctigon DM11 driver layout (attiny1634)
+ * (based on Noctigon K1)
+ *
+ * Pin / Name / Function
+ *   1    PA6   FET PWM (direct drive) (PWM1B) (on some models)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   L: button LED
+ *   6    PA1   (none)
+ *   7    PA0   (none)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   (none) PWM0A
+ *  16    PB3   main LED PWM (PWM1A)
+ *  17    PB2   MISO / (none) (PCINT10)
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   Opamp power
+ *  20    PA7   e-switch  (PCINT7)
+ *      ADC12   thermal sensor
+ *
+ * Main LED power uses one pin to turn the Opamp on/off,
+ * and one pin to control Opamp power level.
+ * Linear brightness control uses the power level pin, with dynamic PWM.
+ * The on/off pin is only used to turn the main LED on and off,
+ * not to change brightness.
+ * Some models also have a direct-drive FET for turbo.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 2  // override this for the no-FET version
+#define PWM_BITS 16  // data type needs 16 bits, not 8
+#define PWM_TOP  255 // highest value used in top half of ramp
+#define USE_DYN_PWM  // dynamic frequency and speed
+
+#define SWITCH_PIN   PA7    // pin 20
+#define SWITCH_PCINT PCINT7 // pin 20 pin change interrupt
+#define SWITCH_PCIE  PCIE0  // PCIE0 is for PCINT[7:0]
+#define SWITCH_PCMSK PCMSK0 // PCMSK0 is for PCINT[7:0]
+#define SWITCH_PORT  PINA   // PINA or PINB or PINC
+
+#define PWM1_PIN PB3        // pin 16, Opamp reference
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+#define PWM1_CNT TCNT1      // for dynamic PWM, reset phase
+#define PWM1_PHASE_RESET_OFF  // force reset while shutting off
+#define PWM1_PHASE_RESET_ON   // force reset while turning on
+#define PWM1_PHASE_SYNC       // manual sync while changing level
+
+#define PWM2_PIN PA6        // pin 1, DD FET PWM
+#define PWM2_LVL OCR1B      // OCR1B is the output compare register for PA6
+
+// PWM parameters of both channels are tied together because they share a counter
+#define PWM1_TOP ICR1       // holds the TOP value for for variable-resolution PWM
+
+#define LED_ENABLE_PIN  PB0    // pin 19, Opamp power
+#define LED_ENABLE_PORT PORTB  // control port for PB0
+
+
+#define USE_VOLTAGE_DIVIDER  // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB1      // Pin 18 / PB1 / ADC6
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC      ADC6D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC6D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 1, 0 for ADC6 / PB1
+// divided by ...
+// REFS[1:0] = 1, 0 for internal 1.1V reference
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b10000110
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 1024 / 1.1)
+// D1, R1, R2 = 0, 330, 100
+#ifndef ADC_44
+//#define ADC_44 981  // raw value at 4.40V
+#define ADC_44 967  // manually tweaked so 4.16V will blink out 4.2
+#endif
+#ifndef ADC_22
+//#define ADC_22 489  // raw value at 2.20V
+#define ADC_22 482  // manually tweaked so 4.16V will blink out 4.2
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+#define BUTTON_LED_PIN  PA2    // pin 5
+#define BUTTON_LED_PORT PORTA  // for all "PA" pins
+#define BUTTON_LED_DDR  DDRA   // for all "PA" pins
+#define BUTTON_LED_PUE  PUEA   // for all "PA" pins
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  // Opamp level and Opamp on/off
+  DDRB = (1 << PWM1_PIN)
+       | (1 << LED_ENABLE_PIN);
+  // DD FET PWM, aux R/G/B, button LED
+  DDRA = (1 << PWM2_PIN)
+       | (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       | (1 << BUTTON_LED_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // WGM1[3:0]: 1,0,1,0: PWM, Phase Correct, adjustable (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    1,0: PWM OC1B in the normal direction (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (0<<WGM10)   // adjustable PWM (TOP=ICR1) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (1<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (1<<WGM13)  | (0<<WGM12)  // phase-correct adjustable PWM (DS table 12-5)
+          ;
+
+  // set PWM resolution
+  PWM1_TOP = PWM_TOP;
+
+  // set up e-switch
+  //PORTA = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  PUEA = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Noctigon_K1-12V.h b/hwdef-Noctigon_K1-12V.h
new file mode 100644
index 0000000..b17aad0
--- /dev/null
+++ b/hwdef-Noctigon_K1-12V.h
@@ -0,0 +1,138 @@
+#ifndef HWDEF_NOCTIGON_K1_12V_H
+#define HWDEF_NOCTIGON_K1_12V_H
+
+/* Noctigon K1 driver layout (attiny1634)
+ * (originally known as Emisar D1S V2)
+ *
+ * Pin / Name / Function
+ *   1    PA6   (none) (PWM1B) (reserved for DD drivers)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   (none) (reserved for L: button LED (on some models))
+ *   6    PA1   (none)
+ *   7    PA0   (none)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   boost PMIC enable (PWM0A not used)
+ *  16    PB3   main LED PWM (PWM1A)
+ *  17    PB2   MISO
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   Opamp power
+ *  20    PA7   e-switch  (PCINT7)
+ *      ADC12   thermal sensor
+ *
+ * Main LED power uses one pin to turn the Opamp on/off,
+ * and one pin to control Opamp power level.
+ * All brightness control uses the power level pin, with 4 kHz 10-bit PWM.
+ * The on/off pin is only used to turn the main LED on and off,
+ * not to change brightness.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 1
+#define PWM_BITS 10  // 0 to 1023 at 4 kHz, not 0 to 255 at 16 kHz
+#define PWM_TOP 1023
+
+#define SWITCH_PIN   PA7    // pin 20
+#define SWITCH_PCINT PCINT7 // pin 20 pin change interrupt
+#define SWITCH_PCIE  PCIE0  // PCIE0 is for PCINT[7:0]
+#define SWITCH_PCMSK PCMSK0 // PCMSK0 is for PCINT[7:0]
+#define SWITCH_PORT  PINA   // PINA or PINB or PINC
+
+#define PWM1_PIN PB3        // pin 16, Opamp reference
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+
+#define LED_ENABLE_PIN  PB0    // pin 19, Opamp power
+#define LED_ENABLE_PORT PORTB  // control port for PB0
+
+#define LED2_ENABLE_PIN  PC0    // pin 15, boost PMIC enable
+#define LED2_ENABLE_PORT PORTC  // control port for PC0
+
+
+#define USE_VOLTAGE_DIVIDER  // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB1      // Pin 18 / PB1 / ADC6
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC      ADC6D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC6D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 1, 0 for ADC6 / PB1
+// divided by ...
+// REFS[1:0] = 1, 0 for internal 1.1V reference
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b10000110
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 256 / 1.1)
+// D1, R1, R2 = 0, 330, 100
+#ifndef ADC_44
+//#define ADC_44 981  // raw value at 4.40V
+#define ADC_44 967  // manually tweaked so 4.16V will blink out 4.2
+#endif
+#ifndef ADC_22
+//#define ADC_22 489  // raw value at 2.20V
+#define ADC_22 482  // manually tweaked so 4.16V will blink out 4.2
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  // boost PMIC on/off
+  DDRC = (1 << LED2_ENABLE_PIN);
+  // Opamp level and Opamp on/off
+  DDRB = (1 << PWM1_PIN)
+       | (1 << LED_ENABLE_PIN);
+  // aux R/G/B
+  DDRA = (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // WGM1[3:0]: 0,0,1,1: PWM, Phase Correct, 10-bit (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    0,0: PWM OC1B disabled (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (1<<WGM10)   // 10-bit (TOP=0x03FF) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (0<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (0<<WGM13)  | (0<<WGM12)  // phase-correct PWM (DS table 12-5)
+          ;
+
+  // set up e-switch
+  PUEA = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Noctigon_K1-SBT90.h b/hwdef-Noctigon_K1-SBT90.h
new file mode 100644
index 0000000..c19a4a6
--- /dev/null
+++ b/hwdef-Noctigon_K1-SBT90.h
@@ -0,0 +1,143 @@
+#ifndef HWDEF_NOCTIGON_K1SBT90_H
+#define HWDEF_NOCTIGON_K1SBT90_H
+
+/* Noctigon K1-SBT90.2 driver layout (attiny1634)
+ * (mostly the same as KR4 driver)
+ *
+ * Pin / Name / Function
+ *   1    PA6   FET PWM (direct drive) (PWM1B)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   (none)
+ *   6    PA1   (none)
+ *   7    PA0   (none)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   (none) PWM0A
+ *  16    PB3   main LED PWM (linear) (PWM1A)
+ *  17    PB2   MISO / e-switch (PCINT10)
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   Opamp power
+ *  20    PA7   (none)
+ *      ADC12   thermal sensor
+ *
+ * Main LED power uses one pin to turn the Opamp on/off,
+ * and one pin to control Opamp power level.
+ * Main brightness control uses the power level pin, with 4 kHz 10-bit PWM.
+ * The on/off pin is only used to turn the main LED on and off,
+ * not to change brightness.
+ * Also has a direct-drive FET for turbo.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 2
+#define PWM_BITS 10  // 0 to 1023 at 4 kHz, not 0 to 255 at 16 kHz
+#define PWM_TOP 1023
+
+#define SWITCH_PIN   PB2     // pin 17
+#define SWITCH_PCINT PCINT10 // pin 17 pin change interrupt
+#define SWITCH_PCIE  PCIE1   // PCIE1 is for PCINT[11:8]
+#define SWITCH_PCMSK PCMSK1  // PCMSK1 is for PCINT[11:8]
+#define SWITCH_PORT  PINB    // PINA or PINB or PINC
+#define PCINT_vect   PCINT1_vect  // ISR for PCINT[11:8]
+
+#define PWM1_PIN PB3        // pin 16, Opamp reference
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+
+#define PWM2_PIN PA6        // pin 1, DD FET PWM
+#define PWM2_LVL OCR1B      // OCR1B is the output compare register for PA6
+
+#define LED_ENABLE_PIN  PB0    // pin 19, Opamp power
+#define LED_ENABLE_PORT PORTB  // control port for PB0
+
+
+#define USE_VOLTAGE_DIVIDER  // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB1      // Pin 18 / PB1 / ADC6
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC      ADC6D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC6D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 1, 0 for ADC6 / PB1
+// divided by ...
+// REFS[1:0] = 1, 0 for internal 1.1V reference
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b10000110
+#define ADC_PRSCL   0x07    // clk/128
+
+// TODO: calibrate this
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 256 / 1.1)
+// D1, R1, R2 = 0, 330, 100
+#ifndef ADC_44
+//#define ADC_44 981  // raw value at 4.40V
+#define ADC_44 967  // manually tweaked so 4.16V will blink out 4.2
+#endif
+#ifndef ADC_22
+//#define ADC_22 489  // raw value at 2.20V
+#define ADC_22 482  // manually tweaked so 4.16V will blink out 4.2
+#endif
+
+#define TEMP_CHANNEL 0b00001111
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  // Opamp level and Opamp on/off
+  DDRB = (1 << PWM1_PIN)
+       | (1 << LED_ENABLE_PIN);
+  // DD FET PWM, aux R/G/B
+  DDRA = (1 << PWM2_PIN)
+       | (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // WGM1[3:0]: 0,0,1,1: PWM, Phase Correct, 10-bit (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    1,0: PWM OC1B in the normal direction (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (1<<WGM10)   // 10-bit (TOP=0x03FF) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (1<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (0<<WGM13)  | (0<<WGM12)  // phase-correct PWM (DS table 12-5)
+          ;
+
+  // set up e-switch
+  //PORTB = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  PUEB = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Noctigon_K1.h b/hwdef-Noctigon_K1.h
new file mode 100644
index 0000000..4c0ce05
--- /dev/null
+++ b/hwdef-Noctigon_K1.h
@@ -0,0 +1,134 @@
+#ifndef HWDEF_NOCTIGON_K1_H
+#define HWDEF_NOCTIGON_K1_H
+
+/* Noctigon K1 driver layout (attiny1634)
+ * (originally known as Emisar D1S V2)
+ *
+ * Pin / Name / Function
+ *   1    PA6   (none) (PWM1B) (reserved for DD drivers)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   (none) (reserved for L: button LED (on some models))
+ *   6    PA1   (none)
+ *   7    PA0   (none)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   (none) PWM0A
+ *  16    PB3   main LED PWM (PWM1A)
+ *  17    PB2   MISO
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   Opamp power
+ *  20    PA7   e-switch  (PCINT7)
+ *      ADC12   thermal sensor
+ *
+ * Main LED power uses one pin to turn the Opamp on/off,
+ * and one pin to control Opamp power level.
+ * All brightness control uses the power level pin, with 4 kHz 10-bit PWM.
+ * The on/off pin is only used to turn the main LED on and off,
+ * not to change brightness.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 1
+#define PWM_BITS 10  // 0 to 1023 at 4 kHz, not 0 to 255 at 16 kHz
+#define PWM_TOP 1023
+
+#define SWITCH_PIN   PA7    // pin 20
+#define SWITCH_PCINT PCINT7 // pin 20 pin change interrupt
+#define SWITCH_PCIE  PCIE0  // PCIE0 is for PCINT[7:0]
+#define SWITCH_PCMSK PCMSK0 // PCMSK0 is for PCINT[7:0]
+#define SWITCH_PORT  PINA   // PINA or PINB or PINC
+
+#define PWM1_PIN PB3        // pin 16, Opamp reference
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+
+#define LED_ENABLE_PIN  PB0    // pin 19, Opamp power
+#define LED_ENABLE_PORT PORTB  // control port for PB0
+
+
+#define USE_VOLTAGE_DIVIDER  // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB1      // Pin 18 / PB1 / ADC6
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC      ADC6D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC6D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 1, 0 for ADC6 / PB1
+// divided by ...
+// REFS[1:0] = 1, 0 for internal 1.1V reference
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b10000110
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 256 / 1.1)
+// D1, R1, R2 = 0, 330, 100
+#ifndef ADC_44
+//#define ADC_44 981  // raw value at 4.40V
+#define ADC_44 967  // manually tweaked so 4.16V will blink out 4.2
+#endif
+#ifndef ADC_22
+//#define ADC_22 489  // raw value at 2.20V
+#define ADC_22 482  // manually tweaked so 4.16V will blink out 4.2
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  // Opamp level and Opamp on/off
+  DDRB = (1 << PWM1_PIN)
+       | (1 << LED_ENABLE_PIN);
+  // aux R/G/B
+  DDRA = (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // WGM1[3:0]: 0,0,1,1: PWM, Phase Correct, 10-bit (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    0,0: PWM OC1B disabled (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (1<<WGM10)   // 10-bit (TOP=0x03FF) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (0<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (0<<WGM13)  | (0<<WGM12)  // phase-correct PWM (DS table 12-5)
+          ;
+
+  // set up e-switch
+  //PORTA = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  PUEA = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Noctigon_K9.3.h b/hwdef-Noctigon_K9.3.h
new file mode 100644
index 0000000..6032b4c
--- /dev/null
+++ b/hwdef-Noctigon_K9.3.h
@@ -0,0 +1,164 @@
+#ifndef HWDEF_NOCTIGON_K93_H
+#define HWDEF_NOCTIGON_K93_H
+
+/* Noctigon K9.3 driver layout (attiny1634)
+ *
+ * Pin / Name / Function
+ *   1    PA6   2nd LED PWM (linear) (PWM1B)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   button LED
+ *   6    PA1   Opamp 2 enable (2nd LEDs)
+ *   7    PA0   Opamp 1 enable (main LEDs)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   main LED PWM (FET) (PWM0A)
+ *  16    PB3   main LED PWM (linear) (PWM1A)
+ *  17    PB2   MISO
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   (none)
+ *  20    PA7   e-switch (PCINT7)
+ *      ADC12   thermal sensor
+ *
+ * Main LED power uses one pin to turn the Opamp on/off,
+ * and one pin to control Opamp power level.
+ * Main brightness control uses the power level pin, with 4 kHz 10-bit PWM.
+ * The on/off pin is only used to turn the main LED on and off,
+ * not to change brightness.
+ * Some models also have a direct-drive FET for turbo.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 3  // 2 for main LEDs, 1 for 2nd LEDs
+#define PWM_BITS 10  // 0 to 1023 at 4 kHz, not 0 to 255 at 16 kHz
+#define PWM_TOP 1023
+
+#define SWITCH_PIN   PA7     // pin 20
+#define SWITCH_PCINT PCINT7  // pin 20 pin change interrupt
+#define SWITCH_PCIE  PCIE0   // PCIE1 is for PCINT[7:0]
+#define SWITCH_PCMSK PCMSK0  // PCMSK1 is for PCINT[7:0]
+#define SWITCH_PORT  PINA    // PINA or PINB or PINC
+#define PCINT_vect   PCINT0_vect  // ISR for PCINT[7:0]
+
+#define PWM1_PIN PB3        // pin 16, Opamp reference
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+
+#define PWM2_PIN PC0        // pin 15, DD FET PWM
+#define PWM2_LVL OCR0A      // OCR0A is the output compare register for PC0
+
+#define PWM3_PIN PA6        // pin 1, 2nd LED Opamp reference
+#define PWM3_LVL OCR1B      // OCR1B is the output compare register for PA6
+
+#define LED_ENABLE_PIN  PA0    // pin 7, Opamp power
+#define LED_ENABLE_PORT PORTA  // control port for PA0
+
+#define LED2_ENABLE_PIN  PA1    // pin 6, Opamp power
+#define LED2_ENABLE_PORT PORTA  // control port for PA1
+
+
+#define USE_VOLTAGE_DIVIDER  // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB1      // Pin 18 / PB1 / ADC6
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC      ADC6D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC6D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 1, 0 for ADC6 / PB1
+// divided by ...
+// REFS[1:0] = 1, 0 for internal 1.1V reference
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b10000110
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 1024 / 1.1)
+// D1, R1, R2 = 0, 330, 100
+#ifndef ADC_44
+//#define ADC_44 981  // raw value at 4.40V
+#define ADC_44 967  // manually tweaked so 4.16V will blink out 4.2
+#endif
+#ifndef ADC_22
+//#define ADC_22 489  // raw value at 2.20V
+#define ADC_22 482  // manually tweaked so 4.16V will blink out 4.2
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+#define BUTTON_LED_PIN  PA2    // pin 5
+#define BUTTON_LED_PORT PORTA  // for all "PA" pins
+#define BUTTON_LED_DDR  DDRA   // for all "PA" pins
+#define BUTTON_LED_PUE  PUEA   // for all "PA" pins
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  DDRC = (1 << PWM2_PIN);
+  DDRB = (1 << PWM1_PIN);
+  DDRA = (1 << PWM3_PIN)
+       | (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       | (1 << BUTTON_LED_PIN)
+       | (1 << LED_ENABLE_PIN)
+       | (1 << LED2_ENABLE_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // Linear opamp PWM for both main and 2nd LEDs (10-bit)
+  // WGM1[3:0]: 0,0,1,1: PWM, Phase Correct, 10-bit (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    1,0: PWM OC1B in the normal direction (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (1<<WGM10)   // 10-bit (TOP=0x03FF) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (1<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (0<<WGM13)  | (0<<WGM12)  // phase-correct PWM (DS table 12-5)
+          ;
+
+  // FET PWM (8-bit; this channel can't do 10-bit)
+  // WGM0[2:0]: 0,0,1: PWM, Phase Correct, 8-bit (DS table 11-8)
+  // CS0[2:0]:  0,0,1: clk/1 (No prescaling) (DS table 11-9)
+  // COM0A[1:0]:  1,0: PWM OC0A in the normal direction (DS table 11-4)
+  // COM0B[1:0]:  1,0: PWM OC0B in the normal direction (DS table 11-7)
+  TCCR0A  = (0<<WGM01)  | (1<<WGM00)   // 8-bit (TOP=0xFF) (DS table 11-8)
+          | (1<<COM0A1) | (0<<COM0A0)  // PWM 0A in normal direction (DS table 11-4)
+          //| (1<<COM0B1) | (0<<COM0B0)  // PWM 0B in normal direction (DS table 11-7)
+          ;
+  TCCR0B  = (0<<CS02)   | (0<<CS01) | (1<<CS00)  // clk/1 (no prescaling) (DS table 11-9)
+          | (0<<WGM02)  // phase-correct PWM (DS table 11-8)
+          ;
+
+  // set up e-switch
+  PUEA = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Noctigon_KR4-12V.h b/hwdef-Noctigon_KR4-12V.h
new file mode 100644
index 0000000..e6cf18a
--- /dev/null
+++ b/hwdef-Noctigon_KR4-12V.h
@@ -0,0 +1,157 @@
+#ifndef HWDEF_NOCTIGON_KR4_12V_H
+#define HWDEF_NOCTIGON_KR4_12V_H
+
+/* Noctigon KR4 (12V) driver layout (attiny1634)
+ * (based on Noctigon DM11-12V and KR4)
+ *
+ * Pin / Name / Function
+ *   1    PA6   (none) (PWM1B) (reserved for DD drivers)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   L: button LED
+ *   6    PA1   (none)
+ *   7    PA0   (none)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   boost PMIC enable (PWM0A not used)
+ *  16    PB3   main LED PWM (PWM1A)
+ *  17    PB2   MISO / e-switch (PCINT10)
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   Opamp power
+ *  20    PA7   (none)  (PCINT7)
+ *      ADC12   thermal sensor
+ *
+ * Main LED power uses one pin to turn the Opamp on/off,
+ * and one pin to control Opamp power level.
+ * Linear brightness control uses the power level pin, with dynamic PWM.
+ * The on/off pin is only used to turn the main LED on and off,
+ * not to change brightness.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 1  // can't use DD FET on boost drivers
+#define PWM_BITS 16  // data type needs 16 bits, not 8
+#define PWM_TOP  255 // highest value used in top half of ramp
+#define USE_DYN_PWM  // dynamic frequency and speed
+
+#define SWITCH_PIN   PB2     // pin 17
+#define SWITCH_PCINT PCINT10 // pin 17 pin change interrupt
+#define SWITCH_PCIE  PCIE1   // PCIE1 is for PCINT[11:8]
+#define SWITCH_PCMSK PCMSK1  // PCMSK1 is for PCINT[11:8]
+#define SWITCH_PORT  PINB    // PINA or PINB or PINC
+#define PCINT_vect   PCINT1_vect  // ISR for PCINT[11:8]
+
+#define PWM1_PIN PB3        // pin 16, Opamp reference
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+#define PWM1_CNT TCNT1      // for dynamic PWM, reset phase
+#define PWM1_PHASE_RESET_OFF  // force reset while shutting off
+#define PWM1_PHASE_RESET_ON   // force reset while turning on
+#define PWM1_PHASE_SYNC       // manual sync while changing level
+
+// PWM parameters of both channels are tied together because they share a counter
+#define PWM1_TOP ICR1       // holds the TOP value for for variable-resolution PWM
+
+#define LED_ENABLE_PIN  PB0    // pin 19, Opamp power
+#define LED_ENABLE_PORT PORTB  // control port for PB0
+
+#define LED2_ENABLE_PIN  PC0    // pin 15, boost PMIC enable
+#define LED2_ENABLE_PORT PORTC  // control port for PC0
+
+
+#define USE_VOLTAGE_DIVIDER  // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB1      // Pin 18 / PB1 / ADC6
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC      ADC6D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC6D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 1, 0 for ADC6 / PB1
+// divided by ...
+// REFS[1:0] = 1, 0 for internal 1.1V reference
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b10000110
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 1024 / 1.1)
+// D1, R1, R2 = 0, 330, 100
+#ifndef ADC_44
+//#define ADC_44 981  // raw value at 4.40V
+#define ADC_44 967  // manually tweaked so 4.16V will blink out 4.2
+#endif
+#ifndef ADC_22
+//#define ADC_22 489  // raw value at 2.20V
+#define ADC_22 482  // manually tweaked so 4.16V will blink out 4.2
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+#define BUTTON_LED_PIN  PA2    // pin 5
+#define BUTTON_LED_PORT PORTA  // for all "PA" pins
+#define BUTTON_LED_DDR  DDRA   // for all "PA" pins
+#define BUTTON_LED_PUE  PUEA   // for all "PA" pins
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  // boost PMIC on/off
+  DDRC = (1 << LED2_ENABLE_PIN);
+  // Opamp level and Opamp on/off
+  DDRB = (1 << PWM1_PIN)
+       | (1 << LED_ENABLE_PIN);
+  // aux R/G/B, button LED
+  DDRA = (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       | (1 << BUTTON_LED_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // WGM1[3:0]: 1,0,1,0: PWM, Phase Correct, adjustable (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    0,0: PWM OC1B disabled (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (0<<WGM10)   // adjustable PWM (TOP=ICR1) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (0<<COM1B1) | (0<<COM1B0)  // PWM 1B disabled (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (1<<WGM13)  | (0<<WGM12)  // phase-correct adjustable PWM (DS table 12-5)
+          ;
+
+  // set PWM resolution
+  PWM1_TOP = PWM_TOP;
+
+  // set up e-switch
+  //PORTB = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  PUEB = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Noctigon_KR4-tintramp.h b/hwdef-Noctigon_KR4-tintramp.h
new file mode 100644
index 0000000..3bd57fe
--- /dev/null
+++ b/hwdef-Noctigon_KR4-tintramp.h
@@ -0,0 +1,46 @@
+#ifndef HWDEF_KR4_TINTRAMP_H
+#define HWDEF_KR4_TINTRAMP_H
+
+/* Noctigon KR4 w/ tint ramping
+ * (same driver as D4Sv2-tintramp, but with the switch on a different pin)
+ *
+ * Pin / Name / Function
+ *   1    PA6   2nd LED PWM (linear) (PWM1B)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   button LED
+ *   6    PA1   Opamp 2 enable (2nd LEDs)
+ *   7    PA0   Opamp 1 enable (main LEDs)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   main LED PWM (FET) (PWM0A) (unused on some models because tint ramping)
+ *  16    PB3   main LED PWM (linear) (PWM1A)
+ *  17    PB2   MISO / e-switch (PCINT10)
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   (none)
+ *  20    PA7   (none)
+ *      ADC12   thermal sensor
+ */
+
+#define ATTINY 1634
+#include <avr/io.h>
+
+// move the switch to a different pin
+#define SWITCH_PIN   PB2     // pin 17
+#define SWITCH_PCINT PCINT10 // pin 17 pin change interrupt
+#define SWITCH_PCIE  PCIE1   // PCIE1 is for PCINT[11:8]
+#define SWITCH_PCMSK PCMSK1  // PCMSK1 is for PCINT[11:8]
+#define SWITCH_PORT  PINB    // PINA or PINB or PINC
+#define SWITCH_PUE   PUEB    // pullup group B
+#define PCINT_vect   PCINT1_vect  // ISR for PCINT[11:8]
+
+// the rest of the config is the same as D4Sv2-tintramp
+#include "hwdef-Emisar_D4Sv2-tintramp.h"
+
+#endif
diff --git a/hwdef-Noctigon_KR4.h b/hwdef-Noctigon_KR4.h
new file mode 100644
index 0000000..487d3ac
--- /dev/null
+++ b/hwdef-Noctigon_KR4.h
@@ -0,0 +1,161 @@
+#ifndef HWDEF_NOCTIGON_KR4_H
+#define HWDEF_NOCTIGON_KR4_H
+
+/* Noctigon KR4 / D4V2.5 driver layout (attiny1634)
+ *
+ * Pin / Name / Function
+ *   1    PA6   FET PWM (direct drive) (PWM1B)
+ *   2    PA5   R: red aux LED (PWM0B)
+ *   3    PA4   G: green aux LED
+ *   4    PA3   B: blue aux LED
+ *   5    PA2   button LED (D4V2.5 only)
+ *   6    PA1   (none)
+ *   7    PA0   (none)
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   (none)
+ *  11    PC4   (none)
+ *  12    PC3   RESET
+ *  13    PC2   (none)
+ *  14    PC1   SCK
+ *  15    PC0   (none) PWM0A
+ *  16    PB3   main LED PWM (linear) (PWM1A)
+ *  17    PB2   MISO / e-switch (PCINT10)
+ *  18    PB1   MOSI / battery voltage (ADC6)
+ *  19    PB0   Opamp power
+ *  20    PA7   (none)
+ *      ADC12   thermal sensor
+ *
+ * Main LED power uses one pin to turn the Opamp on/off,
+ * and one pin to control Opamp power level.
+ * Main brightness control uses the power level pin, with 4 kHz 10-bit PWM.
+ * The on/off pin is only used to turn the main LED on and off,
+ * not to change brightness.
+ * Some models also have a direct-drive FET for turbo.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 2
+#define PWM_BITS 16  // data type needs 16 bits, not 8
+#define PWM_TOP  255 // highest value used in top half of ramp
+#define USE_DYN_PWM  // dynamic frequency and speed
+
+#define SWITCH_PIN   PB2     // pin 17
+#define SWITCH_PCINT PCINT10 // pin 17 pin change interrupt
+#define SWITCH_PCIE  PCIE1   // PCIE1 is for PCINT[11:8]
+#define SWITCH_PCMSK PCMSK1  // PCMSK1 is for PCINT[11:8]
+#define SWITCH_PORT  PINB    // PINA or PINB or PINC
+#define PCINT_vect   PCINT1_vect  // ISR for PCINT[11:8]
+
+// the button tends to short out the voltage divider,
+// so ignore voltage while the button is being held
+//#define NO_LVP_WHILE_BUTTON_PRESSED
+
+
+#define PWM1_PIN PB3        // pin 16, Opamp reference
+#define PWM1_LVL OCR1A      // OCR1A is the output compare register for PB3
+#define PWM1_CNT TCNT1      // for dynamic PWM, reset phase
+#define PWM1_PHASE_RESET_OFF  // force reset while shutting off
+#define PWM1_PHASE_RESET_ON   // force reset while turning on
+#define PWM1_PHASE_SYNC       // manual sync while changing level
+
+#define PWM2_PIN PA6        // pin 1, DD FET PWM
+#define PWM2_LVL OCR1B      // OCR1B is the output compare register for PA6
+
+// PWM parameters of both channels are tied together because they share a counter
+#define PWM1_TOP ICR1       // holds the TOP value for for variable-resolution PWM
+
+#define LED_ENABLE_PIN  PB0    // pin 19, Opamp power
+#define LED_ENABLE_PORT PORTB  // control port for PB0
+
+
+#define USE_VOLTAGE_DIVIDER  // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB1      // Pin 18 / PB1 / ADC6
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC      ADC6D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC6D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 1, 0 for ADC6 / PB1
+// divided by ...
+// REFS[1:0] = 1, 0 for internal 1.1V reference
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b10000110
+#define ADC_PRSCL   0x07    // clk/128
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 1024 / 1.1)
+// D1, R1, R2 = 0, 330, 100
+#ifndef ADC_44
+//#define ADC_44 981  // raw value at 4.40V
+#define ADC_44 967  // manually tweaked so 4.16V will blink out 4.2
+#endif
+#ifndef ADC_22
+//#define ADC_22 489  // raw value at 2.20V
+#define ADC_22 482  // manually tweaked so 4.16V will blink out 4.2
+#endif
+
+// this light has aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+#define BUTTON_LED_PIN  PA2    // pin 5
+#define BUTTON_LED_PORT PORTA  // for all "PA" pins
+#define BUTTON_LED_DDR  DDRA   // for all "PA" pins
+#define BUTTON_LED_PUE  PUEA   // for all "PA" pins
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+  // enable output ports
+  // Opamp level and Opamp on/off
+  DDRB = (1 << PWM1_PIN)
+       | (1 << LED_ENABLE_PIN);
+  // DD FET PWM, aux R/G/B, button LED
+  DDRA = (1 << PWM2_PIN)
+       | (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       | (1 << BUTTON_LED_PIN)
+       ;
+
+  // configure PWM
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // WGM1[3:0]: 1,0,1,0: PWM, Phase Correct, adjustable (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    1,0: PWM OC1B in the normal direction (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (0<<WGM10)   // adjustable PWM (TOP=ICR1) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
+          | (1<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (1<<WGM13)  | (0<<WGM12)  // phase-correct adjustable PWM (DS table 12-5)
+          ;
+
+  // set PWM resolution
+  PWM1_TOP = PWM_TOP;
+
+  // set up e-switch
+  //PORTB = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  PUEB = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Sofirn_SP10-Pro.h b/hwdef-Sofirn_SP10-Pro.h
new file mode 100644
index 0000000..d7c2081
--- /dev/null
+++ b/hwdef-Sofirn_SP10-Pro.h
@@ -0,0 +1,144 @@
+#ifndef HWDEF_SOFIRN_SP10_H
+#define HWDEF_SOFIRN_SP10_H
+
+/* Sofirn SP10 Pro pinout
+
+ATTINY1616 Mapping:
+PB5 : PWM small channel (TCA0 - WO2 Alternate MUX)
+PB3 : eSwitch
+PB0 : PWM big channel (TCA0 - WO0)
+PB4 : Voltage divider (ADC0 - AIN9)
+PA1 : Boost Enable
+
+*/
+
+
+#define LAYOUT_DEFINED
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1616
+#include <avr/io.h>
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN     3
+#define SWITCH_PORT    VPORTB.IN
+#define SWITCH_ISC_REG PORTB.PIN3CTRL
+#define SWITCH_VECT    PORTB_PORT_vect
+#define SWITCH_INTFLG  VPORTB.INTFLAGS
+#endif
+
+#define PWM_CHANNELS 2
+#define PWM_BITS 16  // data type needs 16 bits, not 8
+#define PWM_TOP  255 // highest value used in top half of ramp
+#define USE_DYN_PWM  // dynamic frequency and speed
+
+// Small channel
+#ifndef PWM1_PIN
+#define PWM1_PIN PB5
+#define PWM1_LVL TCA0.SINGLE.CMP2BUF  // PB5 is Alternate MUX for TCA Compare 2
+#endif
+
+// Big channel
+#ifndef PWM2_PIN
+#define PWM2_PIN PB0
+#define PWM2_LVL TCA0.SINGLE.CMP0BUF  // PB0 is TCA Compare 0
+#endif
+
+// PWM parameters of both channels are tied together because they share a counter
+#define PWM1_TOP TCA0.SINGLE.PERBUF   // holds the TOP value for for variable-resolution PWM
+// not necessary when double-buffered "BUF" registers are used
+#define PWM1_CNT TCA0.SINGLE.CNT   // for resetting phase after each TOP adjustment
+#define PWM1_PHASE_RESET_OFF  // force reset while shutting off
+#define PWM1_PHASE_RESET_ON   // force reset while turning on
+//#define PWM1_PHASE_SYNC       // manual sync while changing level
+
+#define LED_ENABLE_PIN   PIN1_bp
+#define LED_ENABLE_PORT  PORTA_OUT
+//#define LED_OFF_DELAY 4  // only needed when PWM1_PHASE_RESET_OFF not used
+
+#define USE_VOLTAGE_DIVIDER       // use a dedicated pin, not VCC, because VCC input is flattened
+#define DUAL_VOLTAGE_FLOOR    21  // for AA/14500 boost drivers, don't indicate low voltage if below this level
+#define DUAL_VOLTAGE_LOW_LOW   7  // the lower voltage range's danger zone 0.7 volts (NiMH)
+#define ADMUX_VOLTAGE_DIVIDER ADC_MUXPOS_AIN9_gc  // which ADC channel to read
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+//   (voltage - D1) * (R2/(R2+R1) * 1024 / 1.1)
+// Resistors are 300,000 and 100,000
+#ifndef ADC_44
+#define ADC_44 1023  // raw value at 4.40V
+#endif
+#ifndef ADC_22
+#define ADC_22 512  // raw value at 2.20V
+#endif
+
+
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+
+    // set up the system clock to run at 10 MHz instead of the default 3.33 MHz
+    _PROTECTED_WRITE( CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm );
+
+    VPORTA.DIR = PIN1_bm;  // Boost enable pin
+    VPORTB.DIR = PIN0_bm | PIN5_bm;  // PWM pins as output
+    //VPORTC.DIR = ...;
+
+    // enable pullups on the input pins to reduce power
+    PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
+    //PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Boost enable pin
+    PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
+
+    //PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // Big PWM channel
+    PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTB.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;  // Switch
+    //PORTB.PIN4CTRL = PORT_PULLUPEN_bm; // Voltage divider
+    //PORTB.PIN5CTRL = PORT_PULLUPEN_bm; // Small PWM channel
+
+    PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
+
+    // set up the PWM
+    // https://ww1.microchip.com/downloads/en/DeviceDoc/ATtiny1614-16-17-DataSheet-DS40002204A.pdf
+    // PB0 is TCA0:WO0, use TCA_SINGLE_CMP0EN_bm
+    // PB1 is TCA0:WO1, use TCA_SINGLE_CMP1EN_bm
+    // PB2 is TCA0:WO2, use TCA_SINGLE_CMP2EN_bm
+    // For Fast (Single Slope) PWM use TCA_SINGLE_WGMODE_SINGLESLOPE_gc
+    // For Phase Correct (Dual Slope) PWM use TCA_SINGLE_WGMODE_DSBOTTOM_gc
+    // See the manual for other pins, clocks, configs, portmux, etc
+    PORTMUX.CTRLC = PORTMUX_TCA02_ALTERNATE_gc;  // Use alternate pin for TCA0:WO2
+    TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP2EN_bm | TCA_SINGLE_WGMODE_DSBOTTOM_gc;
+    PWM1_TOP = PWM_TOP;
+    TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc | TCA_SINGLE_ENABLE_bm;
+}
+
+
+// set fuses, these carry over to the ELF file
+// we need this for enabling BOD in Active Mode from the factory.
+// settings can be verified / dumped from the ELF file using this
+// command: avr-objdump -d -S -j .fuse anduril.elf
+FUSES = {
+    .WDTCFG  = FUSE_WDTCFG_DEFAULT,   // Watchdog Configuration
+    .BODCFG  = FUSE_ACTIVE0_bm,       // BOD Configuration
+    .OSCCFG  = FUSE_OSCCFG_DEFAULT,   // Oscillator Configuration
+    .TCD0CFG = FUSE_TCD0CFG_DEFAULT,  // TCD0 Configuration
+    .SYSCFG0 = FUSE_SYSCFG0_DEFAULT,  // System Configuration 0
+    .SYSCFG1 = FUSE_SYSCFG1_DEFAULT,  // System Configuration 1
+    .APPEND  = FUSE_APPEND_DEFAULT,   // Application Code Section End
+    .BOOTEND = FUSE_BOOTEND_DEFAULT,  // Boot Section End
+};
+
+
+#endif
diff --git a/hwdef-TK_Saber.h b/hwdef-TK_Saber.h
new file mode 100644
index 0000000..e6476b8
--- /dev/null
+++ b/hwdef-TK_Saber.h
@@ -0,0 +1,36 @@
+#ifndef HWDEF_TK_SABER_H
+#define HWDEF_TK_SABER_H
+
+/* TK 4-color lightsaber driver layout
+ *             ----
+ *     Reset -|1  8|- VCC
+ * PWM 4 (A) -|2  7|- e-switch
+ * PWM 3 (G) -|3  6|- PWM 2 (B)
+ *       GND -|4  5|- PWM 1 (R)
+ *             ----
+ */
+
+#define PWM_CHANNELS 4
+#define PWM1_PIN PB0        // pin 5
+#define PWM1_LVL OCR0A
+#define PWM2_PIN PB1        // pin 6
+#define PWM2_LVL OCR0B
+#define PWM3_PIN PB4        // pin 3
+#define PWM3_LVL OCR1B
+#define PWM4_PIN PB3        // pin 2
+#define PWM4_LVL OCR1A
+
+#define SWITCH_PIN   PB2    // pin 7
+#define SWITCH_PCINT PCINT2 // pin 7 pin change interrupt
+
+#define ADC_PRSCL   0x07    // clk/128
+
+// average drop across diode on this hardware
+#define VOLTAGE_FUDGE_FACTOR 5  // add 0.25V
+
+#define FAST        0xA3    // fast PWM both channels
+#define PHASE       0xA1    // phase-correct PWM both channels
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-Tripledown.h b/hwdef-Tripledown.h
new file mode 100644
index 0000000..6bde976
--- /dev/null
+++ b/hwdef-Tripledown.h
@@ -0,0 +1,39 @@
+#ifndef HWDEF_TRIPLEDOWN_H
+#define HWDEF_TRIPLEDOWN_H
+
+/* Tripledown driver layout
+ *             ----
+ *     Reset -|1  8|- VCC
+ *       OTC -|2  7|- Voltage ADC
+ * PWM (FET) -|3  6|- PWM (6x7135)
+ *       GND -|4  5|- PWM (1x7135)
+ *             ----
+ */
+
+#define STAR2_PIN   PB0     // If this pin isn't used for ALT_PWM
+
+#define CAP_PIN     PB3     // pin 2, OTC
+#define CAP_CHANNEL 0x03    // MUX 03 corresponds with PB3 (Star 4)
+#define CAP_DIDR    ADC3D   // Digital input disable bit corresponding with PB3
+
+#define PWM_PIN     PB1     // pin 6, 6x7135 PWM
+#define PWM_LVL     OCR0B   // OCR0B is the output compare register for PB1
+#define ALT_PWM_PIN PB0     // pin 5, 1x7135 PWM
+#define ALT_PWM_LVL OCR0A   // OCR0A is the output compare register for PB0
+#define FET_PWM_PIN PB4     // pin 3
+#define FET_PWM_LVL OCR1B   // output compare register for PB4
+
+#define VOLTAGE_PIN PB2     // pin 7, voltage ADC
+#define ADC_CHANNEL 0x01    // MUX 01 corresponds with PB2
+#define ADC_DIDR    ADC1D   // Digital input disable bit corresponding with PB2
+#define ADC_PRSCL   0x06    // clk/64
+
+//#define TEMP_DIDR   ADC4D
+#define TEMP_CHANNEL 0b00001111
+
+#define FAST 0xA3           // fast PWM both channels
+#define PHASE 0xA1          // phase-correct PWM both channels
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-fw3x-lume1.h b/hwdef-fw3x-lume1.h
new file mode 100644
index 0000000..09c5bfe
--- /dev/null
+++ b/hwdef-fw3x-lume1.h
@@ -0,0 +1,169 @@
+#ifndef HWDEF_FW3X_LUME1_H
+#define HWDEF_FW3X_LUME1_H
+
+/* lume1 Driver Rev B for FW3x driver layout (attiny1634)
+ * www.loneoceans.com/labs/ for more information
+ *
+ * Pin / Name / Function in Lume1 Rev B
+ *   1    PA6   Regulated PWM (PWM1B)
+ *   2    PA5   R red aux LED (PWM0B)
+ *   3    PA4   G green aux LED
+ *   4    PA3   B blue aux LED
+ *   5    PA2   e-switch (PCINT2)
+ *   6    PA1   Jumper 1
+ *   7    PA0   Jumper 2
+ *   8    GND   GND
+ *   9    VCC   VCC
+ *  10    PC5   Jumper 3
+ *  11    PC4   Jumper 4
+ *  12    PC3   RESET
+ *  13    PC2   External Thermal Sensor (ADC11)
+ *  14    PC1   SCK
+ *  15    PC0   N/C
+ *  16    PB3   FET PWM (PWM1A)
+ *  17    PB2   MISO
+ *  18    PB1   MOSI
+ *  19    PB0   ADC5 Voltage Battery Sense (2:1 divider)
+ *  20    PA7   BB_Enable
+ *        ADC12 internal thermal sensor (not used for lume1)
+ *
+ * Main LED power uses one pin as a global Buck Boost Enable, and
+ * one pin to control the power level via PWM. Another pin is used
+ * for FET control.
+ */
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1634
+#include <avr/io.h>
+
+#define PWM_CHANNELS 2
+// Added for Lume1 Buck Boost Driver
+#define PWM_BITS 10  // 0 to 1023 at 3.9 kHz, not 0 to 255 at 15.6 kHz
+#define PWM_TOP 1023
+
+#define SWITCH_PIN   PA2    // pin 5
+#define SWITCH_PCINT PCINT2 // pin 5 pin change interrupt
+#define SWITCH_PCIE  PCIE0  // PCIE0 is for PCINT[7:0]
+#define SWITCH_PCMSK PCMSK0 // PCMSK0 is for PCINT[7:0]
+#define SWITCH_PORT  PINA   // PINA or PINB or PINC
+
+#define PWM1_PIN PA6        // pin 1, Buck Boost CTRL pin or 7135-eqv PWM
+#define PWM1_LVL OCR1B      // OCR1A is the output compare register for PA6
+
+#define PWM2_PIN PB3        // pin 16, FET PWM Pin, but only used as on (1023) or off (0)
+#define PWM2_LVL OCR1A      // OCR1A is the output compare register for PB3
+
+// Added for Lume1 Buck Boost Driver
+#define LED_ENABLE_PIN  PA7    // pin 20, BuckBoost Enable
+#define LED_ENABLE_PORT PORTA  // control port for PA7
+
+/* // For Jumpers X1 to X4, no SW support yet
+#define JUMPER1_PIN PA1
+#define JUMPER2_PIN PA0
+#define JUMPER3_PIN PC5
+#define JUMPER4_PIN PC4
+*/
+
+#define USE_VOLTAGE_DIVIDER   // use a dedicated pin, not VCC, because VCC input is flattened
+#define VOLTAGE_PIN PB0       // Pin 19  PB0  ADC5
+// pin to ADC mappings are in DS table 19-4
+#define VOLTAGE_ADC ADC5D  // digital input disable pin for PB1
+// DIDR0/DIDR1 mappings are in DS section 19.13.5, 19.13.6
+#define VOLTAGE_ADC_DIDR DIDR1  // DIDR channel for ADC5D
+// DS tables 19-3, 19-4
+// Bit   7     6     5      4     3    2    1    0
+//     REFS1 REFS0 REFEN ADC0EN MUX3 MUX2 MUX1 MUX0
+// MUX[3:0] = 0, 1, 0, 1 for ADC5 / PB0
+// divided by ...
+// REFS[1:0] = 0, 0 for VCC as analog reference at 2.5V
+// other bits reserved
+#define ADMUX_VOLTAGE_DIVIDER 0b00000101
+#define ADC_PRSCL   0x06    // clk/64
+
+// Raw ADC readings at 4.4V and 2.2V
+// calibrate the voltage readout here
+// estimated / calculated values are:
+// [(Vbatt)*(R2/(R2+R1)) / 2.5V] * 1023
+// R1 = R2 = 100kR
+#ifndef ADC_44
+#define ADC_44 900
+#endif
+#ifndef ADC_22
+#define ADC_22 450
+#endif
+
+// Default ADMUX_THERM for Temperature is: 0b10001110 in tk-attiny.h
+// REFS[1:0] as 10 for analog reference at internal 1.1Vref
+// MUX[3:0] as 1110 for ADC'12' - temperature sensor internal
+
+// Modified fsm-adc.c to use different ADMUX and ADC_temperature_handler()
+// based on USE_EXTERNAL_TEMP_SENSOR
+// See line 34 and line 209
+#define USE_EXTERNAL_TEMP_SENSOR
+#define ADMUX_THERM_EXTERNAL_SENSOR 0b00001011  // VCC reference (2.5V), Channel PC2
+// Used for Lume1 Driver: MCP9700 - T_Celsius = 100*(VOUT - 0.5V)
+// ADC is 2.5V reference, 0 to 1023
+// FIXME: due to floating point, this calculation takes 916 extra bytes
+//        (should use an integer equivalent instead)
+#define EXTERN_TEMP_FORMULA(m) (((m)-205)/4.09)
+
+// this driver allows for aux LEDs under the optic
+#define AUXLED_R_PIN    PA5    // pin 2
+#define AUXLED_G_PIN    PA4    // pin 3
+#define AUXLED_B_PIN    PA3    // pin 4
+#define AUXLED_RGB_PORT PORTA  // PORTA or PORTB or PORTC
+#define AUXLED_RGB_DDR  DDRA   // DDRA or DDRB or DDRC
+#define AUXLED_RGB_PUE  PUEA   // PUEA or PUEB or PUEC
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+// For lume1 driver, no SW support for Auxillary Jumpers X1 to X4 yet!
+inline void hwdef_setup() {
+  // enable output ports in Data Direction Registers
+  // FET PWM Pin
+  DDRB = (1 << PWM2_PIN);
+  // Main PWM, Buck Boost Enable Pin, aux R/G/B
+  DDRA = (1 << PWM1_PIN)
+       | (1 << LED_ENABLE_PIN)
+       | (1 << AUXLED_R_PIN)
+       | (1 << AUXLED_G_PIN)
+       | (1 << AUXLED_B_PIN)
+       ;
+  //DDRB&=~(1<<VOLTAGE_PIN); // All pins are input by default
+  /* // For Jumpers X1 to X4, no SW support yet
+  DDRA &= (1<<JUMPER1_PIN);
+  DDRA &= (1<<JUMPER2_PIN);
+  DDRC &= (1<<JUMPER3_PIN);
+  DDRC &= (1<<JUMPER4_PIN);
+  PUEA = (1 << JUMPER1_PIN);
+  PUEA = (1 << JUMPER2_PIN);
+  PUEC = (1 << JUMPER3_PIN);
+  PUEC = (1 << JUMPER4_PIN);
+  */
+
+  // configure PWM for 10 bit at 3.9kHz
+  // Setup PWM. F_pwm = F_clkio / 2 / N / TOP, where N = prescale factor, TOP = top of counter
+  // pre-scale for timer: N = 1
+  // WGM1[3:0]: 0,0,1,1: PWM, Phase Correct, 10-bit (DS table 12-5)
+  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
+  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
+  // COM1B[1:0]:    1,0: PWM OC1B in the normal direction (DS table 12-4)
+  TCCR1A  = (1<<WGM11)  | (1<<WGM10)   // 10-bit (TOP=0x03FF) (DS table 12-5)
+          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A Clear OC1A on Compare Match
+          | (1<<COM1B1) | (0<<COM1B0)  // PWM 1B Clear OC1B on Compare Match
+          ;
+  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
+          | (0<<WGM13)  | (0<<WGM12)  // PWM, Phase Correct, 10-bit
+          ;
+
+  // set up e-switch
+  //PORTA = (1 << SWITCH_PIN);  // TODO: configure PORTA / PORTB / PORTC?
+  PUEA = (1 << SWITCH_PIN);  // pull-up for e-switch
+  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
+}
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-gchart-fet1-t1616.h b/hwdef-gchart-fet1-t1616.h
new file mode 100644
index 0000000..2435b99
--- /dev/null
+++ b/hwdef-gchart-fet1-t1616.h
@@ -0,0 +1,106 @@
+#ifndef HWDEF_GCH_FET1_T1616_H
+#define HWDEF_GCH_FET1_T1616_H
+
+/* gChart's custom FET+1 driver layout
+
+PB0 - PWM for FET (TCA - WO0)
+PB1 - PWM for 7135 (TCA - WO1)
+PB2 - Switch pin, internal pullup
+PB3 - Aux LED with 4700 Ohm series resistor
+Read voltage from VCC pin, has diode with ~0.4v drop
+
+*/
+
+
+#define LAYOUT_DEFINED
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1616
+#include <avr/io.h>
+
+#define PWM_CHANNELS 2
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN     PIN2_bp
+#define SWITCH_PORT    VPORTB.IN
+#define SWITCH_ISC_REG PORTB.PIN2CTRL
+#define SWITCH_VECT    PORTB_PORT_vect
+#define SWITCH_INTFLG  VPORTB.INTFLAGS
+#endif
+
+
+// 7135 channel
+#ifndef PWM1_PIN
+#define PWM1_PIN PB1               //
+#define PWM1_LVL TCA0.SINGLE.CMP1  // CMP1 is the output compare register for PB1
+#endif
+
+// FET channel
+#ifndef PWM2_PIN
+#define PWM2_PIN PB0               //
+#define PWM2_LVL TCA0.SINGLE.CMP0  // CMP0 is the output compare register for PB0
+#endif
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 8  // 4 = add 0.20V
+#endif
+
+
+// lighted button
+#ifndef AUXLED_PIN
+#define AUXLED_PIN  PIN3_bp
+#define AUXLED_PORT PORTB
+#endif
+
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+
+    // set up the system clock to run at 10 MHz instead of the default 3.33 MHz
+    _PROTECTED_WRITE( CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm );
+
+    //VPORTA.DIR = 0b00000010;
+    VPORTB.DIR = PIN0_bm | PIN1_bm | PIN3_bm;
+    //VPORTC.DIR = 0b00000000;
+
+    // enable pullups on the input pins to reduce power
+    PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
+
+    //PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // FET channel
+    //PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // 7135 channel
+    PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;  // switch
+    //PORTB.PIN3CTRL = PORT_PULLUPEN_bm; // Aux LED
+    PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
+    PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
+
+    PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
+
+    // set up the PWM
+    // https://ww1.microchip.com/downloads/en/DeviceDoc/ATtiny1614-16-17-DataSheet-DS40002204A.pdf
+    // PB0 is TCA0:WO0, use TCA_SINGLE_CMP0EN_bm
+    // PB1 is TCA0:WO1, use TCA_SINGLE_CMP1EN_bm
+    // PB2 is TCA0:WO2, use TCA_SINGLE_CMP2EN_bm
+    // For Fast (Single Slope) PWM use TCA_SINGLE_WGMODE_SINGLESLOPE_gc
+    // For Phase Correct (Dual Slope) PWM use TCA_SINGLE_WGMODE_DSBOTTOM_gc
+    // See the manual for other pins, clocks, configs, portmux, etc
+    TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_WGMODE_DSBOTTOM_gc;
+    TCA0.SINGLE.PER = 255;
+    TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc | TCA_SINGLE_ENABLE_bm;
+}
+
+
+#endif
diff --git a/hwdef-lume1-ff-6af.h b/hwdef-lume1-ff-6af.h
deleted file mode 100644
index 2b7bd05..0000000
--- a/hwdef-lume1-ff-6af.h
+++ /dev/null
@@ -1,133 +0,0 @@
-#ifndef HWDEF_LUME1_1616_FET_6BUCK_H
-#define HWDEF_LUME1_1616_FET_6BUCK_H
-
-/* LUME1-FF-6AF Driver with ATTINY1616
-
-    HW Config for 2022 Lume1 Driver with 6A Buck + FET
-    FireFlyLite E12R, E07X, PL09mu etc (2022)
-
-    Switching over from ATTINY1634 to 1-series yields the following gains:
-    - Factory calibrated temperature sensor removes external temp sensor need
-    - DAC output for LED current control instead of filtered PWM
-    - 3-pin programming using UPDI interface instead of 6 pin ISP
-    - UDR support using three current sense resistors + FET control
-    - Voltage reading from VCC pin (removes need for Vreg) 
-
-*/
-
-#define LAYOUT_DEFINED
-
-#ifdef ATTINY
-#undef ATTINY
-#endif
-#define ATTINY 1616
-#include <avr/io.h>
-
-// average drop across diode on this hardware
-#ifndef VOLTAGE_FUDGE_FACTOR
-#define VOLTAGE_FUDGE_FACTOR 0  // PFET for RRP, essentially 0 v-drop
-#endif
-
-// Define e-switch Pin and ISR
-
-#ifndef SWITCH_PIN   // PC3 
-#define SWITCH_PIN     PIN3_bp
-#define SWITCH_PORT    VPORTC.IN
-#define SWITCH_ISC_REG PORTC.PIN3CTRL
-#define SWITCH_VECT    PORTC_PORT_vect
-#define SWITCH_INTFLG  VPORTC.INTFLAGS
-#endif
-
-// Define DAC control and PWM for FET
-
-#define PWM_CHANNELS 2
-#define PWM_BITS 8
-#define USE_DYN_PWM  // dynamic frequency and speed
-
-#define PWM1_LVL DAC0.DATA
-#define PWM1_TOP VREF.CTRLA
-
-#ifndef PWM2_PIN
-#define PWM2_TOP TCA0.SINGLE.PER
-#define PWM2_PIN PB2
-#define PWM2_LVL TCA0.SINGLE.CMP2
-#endif
-
-// Define Pins
-
-// For UDR Path 1 (dimmest mode) - PA7
-#define LED_PATH1_PIN PIN7_bm
-#define LED_PATH1_PORT PORTA_OUT
-
-// For UDR Path 2 (low mode) - PB5
-#define LED_PATH2_PIN PIN5_bm
-#define LED_PATH2_PORT PORTB_OUT
-
-// For UDR Path 2 (low mode) - PB5
-#define LED_PATH2_PIN   PIN5_bm
-#define LED_PATH2_PORT  PORTB_OUT
-
-// For UDR Path 3 (brightest mode) - PB4
-#define LED_PATH3_PIN   PIN4_bm
-#define LED_PATH3_PORT  PORTB_OUT
-
-// Enable pin for buck and op-amp - PB3
-#define LED_ENABLE_PIN   PIN3_bm
-#define LED_ENABLE_PORT  PORTB_OUT
-#define LED_ON_DELAY 20  // how many ms to delay turning on the lights after enabling the channel
-
-// Define Aux LED Pins
-
-// lighted switch aux led (PC1)
-#ifndef AUXLED_PIN
-#define AUXLED_PIN  PIN1_bp
-#define AUXLED_PORT PORTC
-#endif
-
-#define AUXLED_R_PIN   PIN0_bp    // PC0 / PP15
-#define AUXLED_G_PIN   PIN0_bp    // PB0 / PP14
-#define AUXLED_B_PIN   PIN1_bp    // PB1 / PP13
-
-#define AUXLED_R_PORT   PORTC
-#define AUXLED_G_PORT   PORTB
-#define AUXLED_B_PORT   PORTB
-
-// Others..
-// with so many pins, doing this all with #ifdefs gets awkward...
-// ... so just hardcode it in each hwdef file instead
-
-inline void hwdef_setup() {
-
-    // set up the system clock to run at 10 MHz instead of the default 3.33 MHz
-    // TODO: for this DAC controlled-light, try to decrease the clock speed or use the ULP
-    _PROTECTED_WRITE( CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm );
-
-    // set pins as 1 for output pins
-
-    VPORTA.DIR = PIN1_bm | PIN6_bm | PIN7_bm;
-    VPORTB.DIR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm;
-    VPORTC.DIR = PIN0_bm | PIN1_bm;
-
-    // now set pullups on input pins, and unused pins (reduce power)
-
-    PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
-    PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
-    PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
-    PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
-    PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
-    PORTC.PIN3CTRL = PORT_ISC_BOTHEDGES_gc;
-
-    // set up the DAC (used for the buck in this case)
-
-    VREF.CTRLA |= VREF_DAC0REFSEL_2V5_gc; 
-    VREF.CTRLB |= VREF_DAC0REFEN_bm;
-    DAC0.CTRLA = DAC_ENABLE_bm | DAC_OUTEN_bm;
-    DAC0.DATA = 255;
-
-    // set up the PWM (used for FET in this case)
-    TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP2EN_bm | TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
-    TCA0.SINGLE.PER = 255-1;
-    TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV2_gc | TCA_SINGLE_ENABLE_bm;
-}
-
-#endif
diff --git a/hwdef-nanjg.h b/hwdef-nanjg.h
new file mode 100644
index 0000000..135edbc
--- /dev/null
+++ b/hwdef-nanjg.h
@@ -0,0 +1,22 @@
+#ifndef HWDEF_NANJG_H
+#define HWDEF_NANJG_H
+
+/* NANJG driver layout
+ */
+#define STAR2_PIN   PB0
+#define STAR3_PIN   PB4
+#define STAR4_PIN   PB3
+#define PWM_PIN     PB1
+#define VOLTAGE_PIN PB2
+#define ADC_CHANNEL 0x01    // MUX 01 corresponds with PB2
+#define ADC_DIDR    ADC1D   // Digital input disable bit corresponding with PB2
+#define ADC_PRSCL   0x06    // clk/64
+
+#define PWM_LVL     OCR0B   // OCR0B is the output compare register for PB1
+
+#define FAST 0x23           // fast PWM channel 1 only
+#define PHASE 0x21          // phase-correct PWM channel 1 only
+
+#define LAYOUT_DEFINED
+
+#endif
diff --git a/hwdef-thefreeman-lin16dac.h b/hwdef-thefreeman-lin16dac.h
new file mode 100644
index 0000000..9d6b145
--- /dev/null
+++ b/hwdef-thefreeman-lin16dac.h
@@ -0,0 +1,109 @@
+#ifndef HWDEF_THEFREEMAN_LIN18_H
+#define HWDEF_THEFREEMAN_LIN18_H
+
+/* thefreeman's Linear 16 driver using DAC control
+
+PA6 - DAC for LED brightness control
+PA7 - Op-amp enable pin
+PB5 - Aux LED
+PB4 - Switch pin, internal pullup
+PB3 - HDR control, set High to enable the high power channel, set Low for low power
+Read voltage from VCC pin, has PFET so no drop
+
+*/
+
+
+#define LAYOUT_DEFINED
+
+#ifdef ATTINY
+#undef ATTINY
+#endif
+#define ATTINY 1616
+#include <avr/io.h>
+
+#define PWM_CHANNELS 1
+#define USE_DYN_PWM  // dynamic frequency and speed
+
+#ifndef SWITCH_PIN
+#define SWITCH_PIN     PIN4_bp
+#define SWITCH_PORT    VPORTB.IN
+#define SWITCH_ISC_REG PORTB.PIN2CTRL
+#define SWITCH_VECT    PORTB_PORT_vect
+#define SWITCH_INTFLG  VPORTB.INTFLAGS
+#endif
+
+
+#define PWM1_LVL DAC0.DATA  // use this for DAC voltage output
+
+// PWM parameters of both channels are tied together because they share a counter
+#define PWM1_TOP VREF.CTRLA   // holds the TOP value for for variable-resolution PWM
+
+// For enabling / disabling the HDR high-range channel
+#define LED_ENABLE_PIN   PIN3_bp
+#define LED_ENABLE_PORT  PORTB_OUT
+#define LED_ENABLE_PIN_LEVEL_MIN 35
+#define LED_ENABLE_PIN_LEVEL_MAX 150
+
+// For turning on and off the op-amp
+#define LED2_ENABLE_PIN   PIN7_bp
+#define LED2_ENABLE_PORT  PORTA_OUT
+#define LED2_ON_DELAY 80  // how many ms to delay turning on the lights after enabling the channel
+
+// average drop across diode on this hardware
+#ifndef VOLTAGE_FUDGE_FACTOR
+#define VOLTAGE_FUDGE_FACTOR 0  // using a PFET so no appreciable drop
+#endif
+
+// lighted button
+#ifndef AUXLED_PIN
+#define AUXLED_PIN  PIN5_bp
+#define AUXLED_PORT PORTB
+#endif
+
+
+// with so many pins, doing this all with #ifdefs gets awkward...
+// ... so just hardcode it in each hwdef file instead
+inline void hwdef_setup() {
+
+    // set up the system clock to run at 10 MHz instead of the default 3.33 MHz
+    // TODO: for this DAC controlled-light, try to decrease the clock speed or use the ULP
+    _PROTECTED_WRITE( CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm );
+
+    VPORTA.DIR = PIN6_bm | PIN7_bm;
+    VPORTB.DIR = PIN3_bm;
+    //VPORTC.DIR = 0b00000000;
+
+    // enable pullups on the input pins to reduce power
+    PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
+    PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
+    //PORTA.PIN6CTRL = PORT_PULLUPEN_bm;  // DAC ouput
+    //PORTA.PIN7CTRL = PORT_PULLUPEN_bm;  // Op-amp enable pin
+
+    PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
+    PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; 
+    //PORTB.PIN3CTRL = PORT_PULLUPEN_bm;  // HDR channel selection
+    PORTB.PIN4CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;  // switch
+    //PORTB.PIN5CTRL = PORT_PULLUPEN_bm;  // Aux LED
+
+    PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
+    PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
+
+    // set up the DAC
+    // https://ww1.microchip.com/downloads/en/DeviceDoc/ATtiny1614-16-17-DataSheet-DS40002204A.pdf
+    // DAC ranges from 0V to (255 * Vref) / 256
+    VREF.CTRLA |= VREF_DAC0REFSEL_2V5_gc; // also VREF_DAC0REFSEL_0V55_gc and VREF_DAC0REFSEL_1V1_gc and VREF_DAC0REFSEL_2V5_gc 
+    VREF.CTRLB |= VREF_DAC0REFEN_bm;
+    DAC0.CTRLA = DAC_ENABLE_bm | DAC_OUTEN_bm;
+    DAC0.DATA = 255; // set the output voltage
+
+}
+
+
+#endif
diff --git a/misc.c b/misc.c
index 9808b24..1b63836 100644
--- a/misc.c
+++ b/misc.c
@@ -39,7 +39,7 @@ void blink_confirm(uint8_t num) {
 // make a short, visible pulse
 // (either brighter or darker, depending on current brightness)
 #ifndef BLINK_ONCE_TIME
-#define BLINK_ONCE_TIME 25
+#define BLINK_ONCE_TIME 10
 #endif
 #ifndef BLINK_BRIGHTNESS
 #define BLINK_BRIGHTNESS (MAX_LEVEL/6)
diff --git a/models.py b/models.py
old mode 100644
new mode 100755
diff --git a/ramp-mode.c b/ramp-mode.c
index 02b40c2..13df57b 100644
--- a/ramp-mode.c
+++ b/ramp-mode.c
@@ -263,11 +263,9 @@ uint8_t steady_state(Event event, uint16_t arg) {
         #ifdef USE_SUNSET_TIMER
         // reduce output if shutoff timer is active
         if (sunset_timer) {
-            //uint8_t dimmed_level = timer_orig_level * (sunset_timer-1) / sunset_timer_peak;
-            uint8_t dimmed_level = timer_orig_level * (sunset_timer) / sunset_timer_peak; // prevent inital first dimming
+            uint8_t dimmed_level = timer_orig_level * (sunset_timer-1) / sunset_timer_peak;
             if (dimmed_level < 1) dimmed_level = 1;
-            //#ifdef USE_SET_LEVEL_GRADUALLY
-            #ifdef USE_SET_LEVEL_GRADUALLY_SUNSET
+            #ifdef USE_SET_LEVEL_GRADUALLY
             set_level_gradually(dimmed_level);
             target_level = dimmed_level;
             #else
diff --git a/sos-mode.c b/sos-mode.c
index 9e7815d..f0275c8 100644
--- a/sos-mode.c
+++ b/sos-mode.c
@@ -31,9 +31,7 @@ uint8_t sos_state(Event event, uint16_t arg) {
     }
     // 2 clicks: next blinky mode
     else if (event == EV_2clicks) {
-        #if defined(USE_BEACONTOWER_MODE)
-        set_state(beacontower_state, 0);
-        #elif defined(USE_BATTCHECK_MODE)
+        #if defined(USE_BATTCHECK_MODE)
         set_state(battcheck_state, 0);
         #elif defined(USE_THERMAL_REGULATION)
         set_state(tempcheck_state, 0);
diff --git a/steps.py b/steps.py
old mode 100644
new mode 100755
diff --git a/strobe-modes.c b/strobe-modes.c
index 06fbdd5..a7a8eee 100644
--- a/strobe-modes.c
+++ b/strobe-modes.c
@@ -233,7 +233,6 @@ inline void lightning_storm_iter() {
     brightness = 1 << (pseudo_rand() % 7);  // 1, 2, 4, 8, 16, 32, 64
     brightness += 1 << (pseudo_rand() % 5);  // 2 to 80 now
     brightness += pseudo_rand() % brightness;  // 2 to 159 now (w/ low bias)
-    brightness *= 1.2;
     if (brightness > MAX_LEVEL) brightness = MAX_LEVEL;
     set_level(brightness);
     nice_delay_ms(rand_time);
@@ -274,18 +273,10 @@ inline void bike_flasher_iter() {
     uint8_t burst = bike_flasher_brightness << 1;
     if (burst > MAX_LEVEL) burst = MAX_LEVEL;
     for(uint8_t i=0; i<4; i++) {
-
-        //Use FET for bursts of light instead 
-        set_level(RAMP_LENGTH);
-        nice_delay_ms(2);
-        set_level(0);
-        nice_delay_ms(3);
-        //set_level(burst);
-        //nice_delay_ms(5);
-
+        set_level(burst);
+        nice_delay_ms(5);
         set_level(bike_flasher_brightness);
-        nice_delay_ms(20);
-        //nice_delay_ms(65);
+        nice_delay_ms(65);
     }
     nice_delay_ms(720);  // no return check necessary on final delay
     set_level(0);
diff --git a/tempcheck-mode.c b/tempcheck-mode.c
index 8bf4e02..6b455ed 100644
--- a/tempcheck-mode.c
+++ b/tempcheck-mode.c
@@ -34,8 +34,6 @@ uint8_t tempcheck_state(Event event, uint16_t arg) {
         set_state(beacon_state, 0);
         #elif defined(USE_SOS_MODE) && defined(USE_SOS_MODE_IN_BLINKY_GROUP)
         set_state(sos_state, 0);
-        #elif defined(USE_BEACONTOWER_MODE)
-        set_state(beacontower_state, 0);
         #elif defined(USE_BATTCHECK)
         set_state(battcheck_state, 0);
         #endif
diff --git a/version.h b/version.h
index 6696a8a..8cf3c90 100644
--- a/version.h
+++ b/version.h
@@ -1 +1,4 @@
-#define VERSION_NUMBER "20221227"
+// this file is replaced automatically by the build script
+// set your own date here if you're not using the build script
+// otherwise, default to first human contact with the moon
+#define VERSION_NUMBER "19690720"
